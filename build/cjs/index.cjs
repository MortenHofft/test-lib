'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var react = require('@emotion/react');
var React = require('react');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty$1 = require('@babel/runtime/helpers/defineProperty');
var Button$1 = require('reakit/Button');
var _taggedTemplateLiteral = require('@babel/runtime/helpers/taggedTemplateLiteral');
var stringify = require('fast-json-stable-stringify');
var md = require('react-icons/md');
var Popover$a = require('reakit/Popover');
var Downshift = require('downshift');
var useDebounce = require('use-debounce');
var uncontrollable = require('uncontrollable');
var reactRouterDom = require('react-router-dom');
var Menu$1 = require('reakit/Menu');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _createClass = require('@babel/runtime/helpers/createClass');
var _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');
var _inherits = require('@babel/runtime/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');
var reactIntl = require('react-intl');
var Tooltip$1 = require('reakit/Tooltip');
var Dialog = require('reakit/Dialog');
var reactIcons = require('react-icons');
var gi = require('react-icons/gi');
var fa = require('react-icons/fa');
var bs = require('react-icons/bs');
var ai = require('react-icons/ai');
var Autolinker = require('autolinker');
var DOMPurify = require('dompurify');
var doiRegex = require('doi-regex');
var axios$1 = require('axios');
var hash$2 = require('object-hash');
var _wrapNativeSuper = require('@babel/runtime/helpers/wrapNativeSuper');
var mapboxgl = require('mapbox-gl');
var _objectDestructuringEmpty = require('@babel/runtime/helpers/objectDestructuringEmpty');
var useQueryParams = require('use-query-params');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _typeof = require('@babel/runtime/helpers/typeof');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var isEqual = require('react-fast-compare');
var equal = require('fast-deep-equal/react');
var queryString = require('query-string');
var jsBase64 = require('js-base64');
var urlRegex = require('url-regex');
var Geohash = require('latlon-geohash');
var reactUse = require('react-use');
var nanoid = require('nanoid');
var matchSorter = require('match-sorter');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutProperties);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty$1);
var _taggedTemplateLiteral__default = /*#__PURE__*/_interopDefaultLegacy(_taggedTemplateLiteral);
var stringify__default = /*#__PURE__*/_interopDefaultLegacy(stringify);
var Downshift__default = /*#__PURE__*/_interopDefaultLegacy(Downshift);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);
var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);
var Autolinker__default = /*#__PURE__*/_interopDefaultLegacy(Autolinker);
var DOMPurify__default = /*#__PURE__*/_interopDefaultLegacy(DOMPurify);
var doiRegex__default = /*#__PURE__*/_interopDefaultLegacy(doiRegex);
var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios$1);
var hash__default = /*#__PURE__*/_interopDefaultLegacy(hash$2);
var _wrapNativeSuper__default = /*#__PURE__*/_interopDefaultLegacy(_wrapNativeSuper);
var mapboxgl__default = /*#__PURE__*/_interopDefaultLegacy(mapboxgl);
var _objectDestructuringEmpty__default = /*#__PURE__*/_interopDefaultLegacy(_objectDestructuringEmpty);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);
var equal__default = /*#__PURE__*/_interopDefaultLegacy(equal);
var queryString__default = /*#__PURE__*/_interopDefaultLegacy(queryString);
var urlRegex__default = /*#__PURE__*/_interopDefaultLegacy(urlRegex);
var Geohash__default = /*#__PURE__*/_interopDefaultLegacy(Geohash);

var lightVariables = {
  name: 'light',
  dense: true,
  primary: '#1ea7fd',
  linkColor: '#1393D8',
  fontSize: '15px',
  background: '#f1f5f8',
  paperBackground: '#ffffff',
  paperBorderColor: '#e5ebed',
  color: '#162d3d',
  darkTheme: false,
  fontFamily: '"Helvetica Neue", BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica", "Arial", sans-serif',
  borderRadius: 3,
  drawerZIndex: 1000
};

// https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)#micro-functions-version-4
var shadeHexColor = function shadeHexColor(color, percent) {
  var f = parseInt(color.slice(1), 16),
      t = percent < 0 ? 0 : 255,
      p = percent < 0 ? percent * -1 : percent,
      R = f >> 16,
      G = f >> 8 & 0x00FF,
      B = f & 0x0000FF;
  return "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
};
function shadeBlend(p, c0, c1) {
  var n = p < 0 ? p * -1 : p,
      u = Math.round,
      w = parseInt;

  if (c0.length > 7) {
    var f = c0.split(","),
        t = (c1 ? c1 : p < 0 ? "rgb(0,0,0)" : "rgb(255,255,255)").split(","),
        R = w(f[0].slice(4)),
        G = w(f[1]),
        B = w(f[2]);
    return "rgb(" + (u((w(t[0].slice(4)) - R) * n) + R) + "," + (u((w(t[1]) - G) * n) + G) + "," + (u((w(t[2]) - B) * n) + B) + ")";
  } else {
    var f = w(c0.slice(1), 16),
        t = w((c1 ? c1 : p < 0 ? "#000000" : "#FFFFFF").slice(1), 16),
        R1 = f >> 16,
        G1 = f >> 8 & 0x00FF,
        B1 = f & 0x0000FF;
    return "#" + (0x1000000 + (u(((t >> 16) - R1) * n) + R1) * 0x10000 + (u(((t >> 8 & 0x00FF) - G1) * n) + G1) * 0x100 + (u(((t & 0x0000FF) - B1) * n) + B1)).toString(16).slice(1);
  }
}

var darkVariables = {
  name: 'dark',
  dense: true,
  primary: '#39af5d',
  //green
  fontSize: '14px',
  background: '#151515',
  paperBackground: '#2d2d2d',
  // paperBackground: '#161927',
  paperBackgroundElevated: '#3e3e3e',
  // background: '#181919',
  // paperBackground: '#2c2c2d',
  // paperBackgroundElevated: '#363638',
  paperBorderColor: '#0b0d13',
  color: '#e3e5ea',
  darkTheme: true,
  fontFamily: 'BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif',
  borderRadius: 3
};

function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$s(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var build = function build(theme) {
  var fullTheme = _objectSpread$s(_objectSpread$s({}, lightVariables), theme);

  var direction = fullTheme.darkTheme ? -1 : 1;
  fullTheme.borderRadiusPx = theme.borderRadius + 'px';
  fullTheme.primary500 = theme.primary;
  fullTheme.primary600 = shadeHexColor(fullTheme.primary, -0.05);
  fullTheme.primary700 = shadeHexColor(fullTheme.primary, -0.1);
  fullTheme.primary400 = shadeHexColor(fullTheme.primary, 0.05);
  fullTheme.primary300 = shadeHexColor(fullTheme.primary, 0.1);
  fullTheme.transparentInk40 = "".concat(fullTheme.color, "40");
  fullTheme.transparentInk60 = "".concat(fullTheme.color, "60");
  fullTheme.transparentInk20 = "".concat(fullTheme.color, "20");
  fullTheme.transparentInk80 = "".concat(fullTheme.color, "80");
  fullTheme.transparentInk50 = "".concat(fullTheme.color, "50");
  [1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(function (x) {
    fullTheme["color".concat(10 - x, "00")] = shadeBlend(-1 * direction * x * 0.075, fullTheme.color, fullTheme.paperBackground);
  });
  fullTheme.linkColor = theme.linkColor || theme.primary;
  fullTheme.headerFontFamily = theme.headerFontFamily || theme.fontFamily; // GENERATE PAPER BACKGROUNDS
  // lighter paper colors are used to indicate elevation/focus
  // 500 is considered neutral standard color, 400 is darker and indicate secondary content
  // 600 is brighter and indicate elevation (used for dark themes)

  [1, 2, 3, 4].forEach(function (x) {
    //darken
    fullTheme["paperBackground".concat(5 + x, "00")] = shadeBlend(-x * 0.25, fullTheme.paperBackground, fullTheme.background); //lighten
    // paper colors below 500 might be capped if there are no diff to paperBackgroundElevated (e.g. is already white)

    fullTheme["paperBackground".concat(5 - x, "00")] = shadeBlend(x * 0.25, fullTheme.paperBackground, fullTheme.paperBackgroundElevated); // neutral

    fullTheme["paperBackground500"] = fullTheme.paperBackground;
  });
  fullTheme.darkPaperBackground = fullTheme.darkTheme ? '#000010' : '#4e4e52';
  var brightMapColors = ["#fed976", "#fd8d3c", "#fd8d3c", "#f03b20", "#bd0026"];
  var darkMapColors = brightMapColors; //['#ffd300', '#f4b456', '#e9928a', '#d96cc1', '#b93bff'];

  if (!fullTheme.mapDensityColors) {
    fullTheme.mapDensityColors = fullTheme.darkTheme ? darkMapColors : brightMapColors;
  }

  var cssVariables = {};

  for (var _i = 0, _Object$entries = Object.entries(fullTheme); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray__default["default"](_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    if (!(value instanceof Object)) {
      cssVariables["--".concat(key)] = value;
    }
  }

  fullTheme.cssVariables = cssVariables;
  return fullTheme;
};

var themeBuilder = {
  build: build,
  extend: function extend(_ref) {
    var _ref$baseTheme = _ref.baseTheme,
        baseTheme = _ref$baseTheme === void 0 ? lightVariables : _ref$baseTheme,
        extendWith = _ref.extendWith;
    var theme = baseTheme;

    if (typeof baseTheme === 'string') {
      if (baseTheme === 'dark') {
        theme = darkVariables;
      } else {
        theme = lightVariables;
      }
    }

    var variables = Object.assign({}, theme, extendWith);
    return build(variables);
  }
};

var theme = themeBuilder.build(lightVariables); // A context to share state for the full app/component

var ThemeContext = /*#__PURE__*/React__default["default"].createContext(theme);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var propTypes = {exports: {}};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;

function requireFactoryWithThrowingShims () {
	if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
	hasRequiredFactoryWithThrowingShims = 1;

	var ReactPropTypesSecret = requireReactPropTypesSecret();

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bigint: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithThrowingShims;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

{
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  propTypes.exports = requireFactoryWithThrowingShims()();
}

var helper = {
  noUserSelect: "\n    -webkit-touch-callout: none;\n    user-select: none;\n  "
};

var _templateObject$2;
var button = function button(theme) {
  return /*#__PURE__*/react.css(helper.noUserSelect, " appearance:none;text-decoration:none;display:inline-flex;align-items:center;justify-content:flex-start;text-align:center;border:1px solid transparent;border-radius:", theme.borderRadius, "px;box-shadow:none;font-size:1em;padding-top:0.5em;padding-bottom:0.5em;line-height:calc(1.5em - 6px);position:relative;margin:0;background-color:white;color:", theme.color, ";cursor:pointer;justify-content:center;padding-left:", theme.dense ? 0.5 : 1, "em;padding-right:", theme.dense ? 0.5 : 1, "em;&:focus{outline:none;box-shadow:0 0 0 0.125em rgba(50, 115, 220, 0.25);}&[aria-disabled=\"true\"]{opacity:0.5;cursor:auto;}::-moz-focus-inner{border-style:none;}" + ("" ), "" );
};

var _ref5$6 = {
  name: "2ry9pw",
  styles: "padding:0;border:none;height:auto;color:inherit;line-height:inherit;font-weight:inherit;background:none;border-radius:0"
} ;

var text = function text(theme) {
  return _ref5$6;
};
var primary = function primary(theme) {
  return /*#__PURE__*/react.css("background-color:", theme.primary500, ";border-color:", theme.primary600, ";color:white;&:not([aria-disabled=\"true\"]){&:hover{color:white;border-color:", theme.primary500, ";background-color:", theme.primary600, ";}&:active,&[aria-expanded=\"true\"]{color:white;border-color:", theme.primary600, ";background-color:", theme.primary700, ";}}" + ("" ), "" );
};
var primaryOutline = function primaryOutline(theme) {
  return /*#__PURE__*/react.css("border-color:", theme.primary600, ";background:none;color:", theme.primary700, ";" + ("" ), "" );
};
var outline = function outline(theme) {
  return /*#__PURE__*/react.css("border-color:", theme.transparentInk40, ";background:none;" + ("" ), "" );
};

var _ref4$8 = {
  name: "8muanc",
  styles: "border-color:#808080;color:#808080;background:none"
} ;

var ghost = function ghost(theme) {
  return _ref4$8;
};

var _ref3$e = {
  name: "mpmwmh",
  styles: "background:tomato;color:white"
} ;

var danger = function danger(theme) {
  return _ref3$e;
};

var _ref2$k = {
  name: "1rbowyl",
  styles: "border-color:transparent;background:none"
} ;

var link = function link(theme) {
  return _ref2$k;
};

var _ref$F = {
  name: "7whenc",
  styles: "display:flex;width:100%"
} ;

var isFullWidth = function isFullWidth(theme) {
  return _ref$F;
};
var spinAround = react.keyframes(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral__default["default"](["\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(359deg);\n  }\n"])));
var loading$1 = function loading(theme) {
  return /*#__PURE__*/react.css("&:after{animation:", spinAround, " 500ms infinite linear;border:2px solid #dbdbdb;border-radius:0.5em;border-right-color:transparent;border-top-color:transparent;content:\"\";display:block;height:1em;width:1em;left:calc(50% - (1em / 2));top:calc(50% - (1em / 2));position:absolute!important;}color:transparent!important;pointer-events:none;" + ("" ), "" );
};
var group$1 = function group(_ref6) {
  var theme = _ref6.theme;
  return /*#__PURE__*/react.css("display:inline-flex;max-width:100%;>button{overflow:hidden;border-radius:0;margin:0;margin-right:-1px;}>button:first-of-type{border-top-left-radius:", theme.borderRadius, "px;border-bottom-left-radius:", theme.borderRadius, "px;flex:1 1 auto;}>button:last-of-type{border-top-right-radius:", theme.borderRadius, "px;border-bottom-right-radius:", theme.borderRadius, "px;}" + ("" ), "" );
};
var styles$a = {
  button: button,
  primary: primary,
  primaryOutline: primaryOutline,
  outline: outline,
  ghost: ghost,
  danger: danger,
  link: link,
  loading: loading$1,
  isFullWidth: isFullWidth,
  text: text,
  group: group$1
};

/**
 * generate human readable classnames for easier hacking through css
 * e.g. gbif-button gbif-button-isActive gbif-button-loading
 * @param {string} prefix how to prefix classNames (default 'gbif')
 * @param {string} elementName name of your component e.g. 'button'
 * @param {object} classes what modifiers are applied to this component. An object of booleans and/or strings. booleans will be appended as keys and strings as strings
 * @param {string} className other classnames
 */

function getClasses() {
  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'gbif';
  var elementName = arguments.length > 1 ? arguments[1] : undefined;
  var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var className = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  var classesToApply = [];
  Object.keys(classes).forEach(function (key) {
    var val = classes[key];

    if (val === true) {
      classesToApply.push(key);
    } else if (typeof val === 'string') {
      classesToApply.push(val);
    }
  });
  var humanClasses = getClassNames(prefix, elementName, classesToApply);
  return {
    classNames: {
      className: "".concat(className, " ").concat(humanClasses)
    },
    classesToApply: classesToApply
  };
}

var getClassNames = function getClassNames(prefix, elementName, classes) {
  var root = "".concat(prefix, "-").concat(elementName);
  return classes.reduce(function (a, c) {
    return "".concat(a, " ").concat(root, "-").concat(c);
  }, "".concat(root));
};
function hash$1(obj) {
  return strToHash(stringify__default["default"](obj));
}
var strToHash = function strToHash(str) {
  var hash = 0,
      i,
      chr;
  if (str.length === 0) return hash;

  for (i = 0; i < str.length; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0; // Convert to 32bit integer
  }

  return hash;
};
var keyCodes = {
  LEFT_ARROW: 37,
  RIGHT_ARROW: 39,
  ENTER: 13,
  ESCAPE: 27
};
function join() {
  var args = Array.prototype.slice.call(arguments);
  return args.filter(function (x) {
    return x !== '';
  }).map(function (x) {
    return x.replace(/\/$/g, '');
  }) // remove trailing slash
  // .map(x => x.replace(/^\//g, '')) // remove prepended slash
  .join('/').replace(/\/\//g, '\/');
}

var _excluded$2b = ["className", "loading", "isFullWidth", "isIcon", "appearance", "look", "children", "truncate"],
    _excluded2$k = ["isActive", "onClearRequest", "onClick", "loading", "children", "title", "isNegated"];
var truncateStyle = {
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
};
var Button = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$loading = _ref.loading,
      loading = _ref$loading === void 0 ? false : _ref$loading,
      _ref$isFullWidth = _ref.isFullWidth,
      isFullWidth = _ref$isFullWidth === void 0 ? false : _ref$isFullWidth;
      _ref.isIcon;
      var appearance = _ref.appearance,
      _ref$look = _ref.look,
      look = _ref$look === void 0 ? 'primary' : _ref$look,
      children = _ref.children,
      truncate = _ref.truncate,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$2b);

  appearance = appearance || look;
  var theme = React.useContext(ThemeContext);

  var _getClasses = getClasses(theme.prefix, 'button', {
    appearance: appearance,
    loading: loading,
    isFullWidth: isFullWidth
  }, className),
      classesToApply = _getClasses.classesToApply,
      classNames = _getClasses.classNames;

  return react.jsx(Button$1.Button, _extends__default["default"]({
    ref: ref
  }, classNames, {
    css: /*#__PURE__*/react.css(styles$a.button(theme), " ", classesToApply.map(function (x) {
      return styles$a[x](theme);
    }), ";" + ("" ), "" )
  }, props), truncate ? react.jsx("span", {
    style: truncateStyle
  }, children) : children);
});
Button.displayName = 'Button';
var ButtonGroup = function ButtonGroup(_ref2) {
  var props = _extends__default["default"]({}, _ref2);

  var theme = React.useContext(ThemeContext);
  return react.jsx("div", _extends__default["default"]({
    css: styles$a.group({
      theme: theme
    })
  }, props));
};
ButtonGroup.displayName = 'ButtonGroup';
var FilterButton = /*#__PURE__*/React__default["default"].forwardRef(function (_ref3, ref) {
  var isActive = _ref3.isActive,
      _ref3$onClearRequest = _ref3.onClearRequest,
      onClearRequest = _ref3$onClearRequest === void 0 ? function () {} : _ref3$onClearRequest,
      onClick = _ref3.onClick,
      loading = _ref3.loading,
      children = _ref3.children,
      title = _ref3.title,
      _ref3$isNegated = _ref3.isNegated,
      isNegated = _ref3$isNegated === void 0 ? false : _ref3$isNegated,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded2$k);

  if (!isActive) {
    return react.jsx(ButtonGroup, props, react.jsx(Button, _extends__default["default"]({}, props, {
      ref: ref,
      loading: loading,
      appearance: "primaryOutline",
      onClick: onClick
    }), children));
  }

  return react.jsx(ButtonGroup, {
    style: {
      maxWidth: '100%'
    }
  }, isNegated && react.jsx(Button, _extends__default["default"]({}, props, {
    title: "Negated filter",
    appearance: "primary",
    onClick: onClick,
    loading: loading
  }), react.jsx("span", null, "Exclude")), react.jsx(Button, _extends__default["default"]({}, props, {
    style: {
      maxWidth: 400
    },
    title: title,
    truncate: true,
    appearance: "primary",
    ref: ref,
    onClick: onClick,
    loading: loading
  }), children), react.jsx(Button, {
    appearance: "primary",
    onClick: onClearRequest,
    style: {
      flex: '0 0 auto'
    }
  }, react.jsx(md.MdClose, {
    style: {
      verticalAlign: 'middle'
    }
  })));
});

var _excluded$2a = ["as", "className", "style"];
var Switch = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as,
      Span = _ref$as === void 0 ? 'span' : _ref$as,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$2a);

  var theme = React.useContext(ThemeContext);
  return react.jsx(Span, {
    style: style,
    className: className,
    css: switchClass({
      theme: theme,
      disabled: props.disabled
    })
  }, react.jsx("input", _extends__default["default"]({
    type: "checkbox",
    ref: ref
  }, props)), react.jsx("span", null));
});
Switch.displayName = 'Switch';

var switchClass = function switchClass(_ref2) {
  var theme = _ref2.theme,
      disabled = _ref2.disabled;
  return /*#__PURE__*/react.css("position:relative;top:-0.09em;display:inline-block;line-height:1;white-space:nowrap;vertical-align:middle;outline:none;", disabled ? 'opacity: 0.5;' : null, " cursor:pointer;& input{margin:0;position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;width:100%;height:100%;cursor:pointer;opacity:0;}& input+span{position:relative;top:0;left:0;display:block;width:2em;height:1em;background-color:#88888855;transition:.1s;border-radius:34px;&:before{position:absolute;content:\"\";height:calc(1em - 4px);width:calc(1em - 4px);left:2px;bottom:2px;background-color:", theme.darkTheme ? theme.color900 : '#fff', ";transition:.1s;border-radius:50%;}}& input:checked+span{background-color:#2196F3;}& input:focus+span{outline:none;box-shadow:0 0 0 0.125em rgba(50, 115, 220, 0.25);}& input:checked+span:before{transform:translateX(1em);}" + ("" ), "" );
};

var _templateObject$1;

var _ref3$d = {
  name: "184im9y",
  styles: "-webkit-touch-callout:none;user-select:none"
} ;

var noUserSelect = function noUserSelect(props) {
  return _ref3$d;
};

var _ref2$j = {
  name: "1fvplud",
  styles: "&:focus{outline:none;box-shadow:0 0 0 0.125em rgba(50, 115, 220, 0.25);}::-moz-focus-inner{border-style:none;}"
} ;

var focusStyle = function focusStyle(props) {
  return _ref2$j;
};
var transparentInputOverlay = {
  name: "480kxp",
  styles: "margin:0;position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;width:100%;height:100%;cursor:pointer;opacity:0"
} ;
var styledScrollBars = function styledScrollBars(_ref4) {
  var theme = _ref4.theme;
  return /*#__PURE__*/react.css("scrollbar-width:thin;&::-webkit-scrollbar{width:6px;height:6px;}&::-webkit-scrollbar-thumb{background-color:", theme.darkTheme ? '#ffffff38' : '#686868', ";}" + ("" ), "" );
};

var _ref$E = {
  name: "aspdd",
  styles: "line-height:1.2em;&>span:after{font-style:normal;content:' \u276F ';font-size:80%;color:#ccc;display:inline-block;padding:0 3px;}&>span:last-of-type:after{display:none;}.gbif-classification-unknown{opacity:0.5;}"
} ;

var classification$1 = function classification(_ref5) {
  _extends__default["default"]({}, _ref5);

  return _ref$E;
};
var root$9 = function root(_ref6) {
  var appRoot = _ref6.appRoot,
      _ref6$theme = _ref6.theme,
      theme = _ref6$theme === void 0 ? {} : _ref6$theme;
  return /*#__PURE__*/react.css("*{font-family:", theme.fontFamily || 'BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif', ";}color:", theme.color900 || '#4a4a4a', ";font-size:", theme.fontSize || '1em', ";font-weight:400;line-height:1.2em;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);background:", appRoot ? theme.background : null, ";*,*::before,*::after,strong{box-sizing:inherit;}-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;" + ("" ), "" );
};
var tooltip$1 = function tooltip(props) {
  return /*#__PURE__*/react.css("&:hover{position:relative;&[tip]:before{border-radius:2px;background-color:", props.theme.darkPaperBackground, ";color:#fff;content:attr(tip);font-size:12px;padding:5px 7px;position:absolute;white-space:nowrap;z-index:25;line-height:1.2em;pointer-events:none;}&[direction=\"right\"]:before{top:50%;left:120%;transform:translateY(-50%);}&[direction=\"left\"]:before{top:50%;right:120%;transform:translateY(-50%);}&[direction=\"top\"]:before{right:50%;bottom:120%;transform:translateX(50%);}&[direction=\"bottom\"]:before{right:50%;top:120%;transform:translateX(50%);}}" + ("" ), "" );
};
var skeletonLoading = react.keyframes(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral__default["default"](["\n  from {\n    background-color: #88888830;\n  }\n  50% {\n    background-color: #88888830;\n  }\n  75% {\n    background-color: #afafaf30;\n  }\n  to {\n    background-color: #88888830;\n  }\n"])));
var bulletList = {
  name: "1dmc845",
  styles: "margin:0;padding:0;list-style:none;&>li{display:inline-block;&:after{font-style:normal;content:'\u25CF';font-size:80%;padding:0 3px;}:last-of-type:after{display:none;}}"
} ;
var discreetLink = {
  name: "1dmofro",
  styles: "text-decoration:none;color:inherit!important;&:hover{text-decoration:underline;color:inherit!important;}"
} ;

var checkbox = function checkbox(props) {
  return /*#__PURE__*/react.css("position:relative;top:-0.09em;display:inline-block;line-height:1;white-space:nowrap;vertical-align:middle;outline:none;cursor:pointer;input{", transparentInputOverlay, ";}& input+span{position:relative;top:0;left:0;display:block;width:1em;height:1em;background-color:", props.theme.darkTheme ? props.theme.paperBackground700 : null, ";border:1px solid #88888855;border-radius:", Math.min(2, props.theme.borderRadius), "px;transition:all 0.1s;&:after{position:absolute;top:50%;left:30%;display:table;width:40%;height:60%;border:2px solid #fff;border-top:0;border-left:0;transform:rotate(45deg) scale(0) translate(-50%, -50%);opacity:0;transition:all 0.1s cubic-bezier(0.71, -0.46, 0.88, 0.6),opacity 0.1s;content:' ';}}& input:checked+span{background-color:#1890ff;border-color:#1890ff;&:after{transform:rotate(45deg) scale(1) translate(-50%, -50%);opacity:1;transition:all 0.1s cubic-bezier(0.12, 0.4, 0.29, 1.46) 0.1s;}}& input:focus+span{box-shadow:0 0 0 0.125em rgba(50, 115, 220, 0.25);}" + ("" ), "" );
};

var _excluded$29 = ["as", "className", "style"];
var Checkbox = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as,
      Span = _ref$as === void 0 ? 'span' : _ref$as,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$29);

  var theme = React.useContext(ThemeContext);
  return react.jsx(Span, {
    style: style,
    className: className,
    css: checkbox({
      theme: theme
    })
  }, react.jsx("input", _extends__default["default"]({
    type: "checkbox",
    ref: ref
  }, props)), react.jsx("span", null));
});
Checkbox.displayName = 'Checkbox';

var Test = function Test(props) {
  return react.jsx("h1", null, "TEST");
};

var Input = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var props = _extends__default["default"]({}, _ref);

  React.useContext(ThemeContext); // return <button ref={ref} {...props} css={styles.input({theme})} />

  return react.jsx("button", _extends__default["default"]({
    ref: ref
  }, props));
});
Input.displayName = 'Input'; // export const FilterInput2 = React.forwardRef(({
//   suffix,
//   ...props
// }, ref) => {
//   const theme = useContext(ThemeContext);
//   return <Input {...props} 
//     style={{flex: '1 1 auto'}}
//     addonAfter={<Button appearance="outline" style={{ flex: '0 0 auto' }} >
//       <MdClose style={{ verticalAlign: 'middle' }} />
//     </Button>}
//     />
// });
// export const FilterInput = React.forwardRef(({
//   isApplied,
//   onClearRequest = () => { },
//   ...props
// }, ref) => {
//   const theme = useContext(ThemeContext);
//   return <div css={styles.inputGroup({theme})}>
//     <Input {...props} style={{flex: '1 1 auto'}} css={styles.inputGroupChild({theme})}/>
//     {/* <select {...props} style={{flex: '1 1 auto'}} css={{...styles.inputGroupChild({theme}), ...styles.input({theme})}}>
//       <option>sdf</option>
//       <option>sdf</option>
//       <option>sdf</option>
//       <option>sdf</option>
//     </select> */}
//     {/* <Example {...props} style={{flex: '1 1 auto'}}/> */}
//     <Button appearance="outline" style={{ flex: '0 0 auto' }} css={styles.inputGroupChild({theme})}>
//       <MdClose style={{ verticalAlign: 'middle' }} />
//     </Button>
//   </div>
// });

var _excluded$28 = ["as", "appRoot", "style"];

function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$r(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Root = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as,
      Rt = _ref$as === void 0 ? 'div' : _ref$as,
      _ref$appRoot = _ref.appRoot,
      appRoot = _ref$appRoot === void 0 ? false : _ref$appRoot,
      style = _ref.style,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$28);

  var theme = React.useContext(ThemeContext);
  var _theme$cssVariables = theme.cssVariables,
      cssVariables = _theme$cssVariables === void 0 ? {} : _theme$cssVariables;
  return react.jsx(Rt, _extends__default["default"]({
    ref: ref
  }, props, {
    style: _objectSpread$r(_objectSpread$r({}, cssVariables), style),
    css: root$9({
      theme: theme,
      appRoot: appRoot
    })
  }));
});
Root.displayName = 'Root';

var _excluded$27 = ["trigger", "placement", "visible", "modal", "onClickOutside", "children"];

var Popover$9 = function Popover(_ref2) {
  var trigger = _ref2.trigger;
      _ref2.placement;
      var visible = _ref2.visible,
      modal = _ref2.modal,
      onClickOutside = _ref2.onClickOutside,
      children = _ref2.children,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded$27);

  var theme = React.useContext(ThemeContext);
  var popover = Popover$a.usePopoverState({
    modal: modal || false,
    unstable_preventOverflow: true,
    // placement: placement || "bottom-start", 
    placement: 'auto',
    // annoyingly, only auto will prevent vertical overflow and there is no option to set alt-axis in reakit. See issue https://github.com/reakit/reakit/issues/606
    visible: visible,
    altAxis: true,
    altBoundary: true
  });
  var ref = React__default["default"].useRef();
  React__default["default"].useEffect(function () {
    if (popover.visible) {
      if (ref && ref.current) {
        ref.current.focus();
      }
    }
  }, [popover.visible]);
  return react.jsx(React__default["default"].Fragment, null, react.jsx(Popover$a.PopoverDisclosure, _extends__default["default"]({}, popover, trigger.props), function (disclosureProps) {
    return /*#__PURE__*/React__default["default"].cloneElement(trigger, disclosureProps);
  }), react.jsx(Popover$a.PopoverBackdrop, _extends__default["default"]({}, popover, {
    css: backdrop(theme),
    onClick: function onClick() {
      return onClickOutside ? onClickOutside(popover) : undefined;
    }
  })), react.jsx(Popover$a.Popover, _extends__default["default"]({
    dir: theme.dir
  }, popover, props, {
    hideOnClickOutside: false,
    hideOnEsc: true,
    preventBodyScroll: false
  }), function (props) {
    return popover.visible && react.jsx(Root, _extends__default["default"]({}, props, {
      css: dialog(theme)
    }), react.jsx(Popover$a.PopoverArrow, _extends__default["default"]({
      className: "arrow"
    }, popover)), react.jsx("div", {
      css: dialogContent()
    }, typeof children === 'function' ? children({
      hide: popover.hide,
      focusRef: ref
    }) : /*#__PURE__*/React__default["default"].cloneElement(children, {
      hide: popover.hide,
      focusRef: ref
    })));
  }));
};

var backdrop = function backdrop(theme) {
  return /*#__PURE__*/react.css("background-color:", theme.darkTheme ? '#0000006b' : '#00000040', ";position:fixed;top:0px;right:0px;bottom:0px;left:0px;z-index:999;" + ("" ), "" );
};

var _ref$D = {
  name: "zdqm6i",
  styles: "max-height:calc(100vh - 100px)"
} ;

var dialogContent = function dialogContent(theme) {
  return _ref$D;
};

var dialog = function dialog(theme) {
  return /*#__PURE__*/react.css("background-color:", theme.paperBackground500, ";top:28px;left:50%;transform:translateX(-50%);z-index:999;border-radius:", theme.borderRadius, "px;outline:0px;border:1px solid ", theme.paperBorderColor, ";&:focus{outline:none;}&>.arrow{background-color:transparent;& .stroke{fill:", theme.paperBorderColor, ";}& .fill{fill:", theme.paperBackground500, ";}}" + ("" ), "" );
};

var _excluded$26 = ["active", "error", "className"];

var _templateObject;
var loading = react.keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral__default["default"](["\n  from {\n    left: -200,\n    width: 30% \n  }\n  50% {\n    width: 30%\n  }\n  70% {\n    width: 70%\n  }\n  80% {\n    left: 50%\n  }\n  95% {\n    left: 120%\n  }\n  to {\n    left: 100%\n  }\n"])));

var _ref$C = {
  name: "8fnkdg",
  styles: "background-color:tomato;left:0;animation:none;width:100%"
} ;

var errorStyle = function errorStyle(theme) {
  return _ref$C;
};

var before = function before(_ref2) {
  var error = _ref2.error,
      theme = _ref2.theme;
  return /*#__PURE__*/react.css("display:block;position:absolute;content:'';left:-200px;width:200px;height:1px;background-color:", theme.primary, ";animation:", loading, " 1.5s linear infinite;", error ? errorStyle() : null, ";" + ("" ), "" );
};

function StripeLoader(_ref3) {
  var active = _ref3.active,
      error = _ref3.error,
      className = _ref3.className;
      _objectWithoutProperties__default["default"](_ref3, _excluded$26);

  var theme = React.useContext(ThemeContext);

  var _getClasses = getClasses(theme.prefix, 'stripeLoader', {
    active: active,
    error: error
  }, className),
      classNames = _getClasses.classNames;

  return react.jsx("div", _extends__default["default"]({}, classNames, {
    css: /*#__PURE__*/react.css("height:1px;width:100%;position:relative;overflow:hidden;&:before{", active ? before({
      error: error,
      theme: theme
    }) : null, ";}" + ("" ), "" )
  }));
}

var _excluded$25 = ["theme"],
    _excluded2$j = ["theme"];
var wrapper$1 = function wrapper(_ref2) {
  var theme = _ref2.theme,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded$25);

  return /*#__PURE__*/react.css("display:inline-block;margin:0;padding:0;font-variant:tabular-nums;line-height:1.5;list-style:none;box-sizing:border-box;font-size:14px;font-variant:initial;background-color:", theme.paperBackground500, ";border-radius:", theme.borderRadius, "px;outline:none;box-shadow:0 2px 8px rgba(0, 0, 0, 0.15);width:100%;position:absolute;transform:translateY(", props.isOpen ? 5 : 0, "px);opacity:", props.isOpen ? 1 : 0, ";z-index:", props.isOpen ? 10 : null, ";transition:opacity .1s linear,transform .1s ease-in-out;" + ("" ), "" );
};

var _ref$B = {
  name: "kxlq2a",
  styles: "position:relative;display:block;padding:5px 12px;overflow:hidden;font-weight:normal;line-height:22px;cursor:pointer;transition:background 0.3s ease"
} ;

var item = function item(_ref3) {
  _ref3.theme;
      _objectWithoutProperties__default["default"](_ref3, _excluded2$j);

  return _ref$B;
};
var menu = function menu(props) {
  return /*#__PURE__*/react.css("max-height:450px;margin:0;padding:4px 0;padding-left:0;overflow:auto;list-style:none;outline:none;", styledScrollBars(props), ";" + ("" ), "" );
};
var styles$9 = {
  wrapper: wrapper$1,
  menu: menu,
  item: item
};

var _excluded$24 = ["onSuggestionsFetchRequested", "renderSuggestion", "getSuggestionValue", "onSuggestionSelected", "inputProps", "defaultIsOpen", "isLoading", "suggestions", "loadingError", "style", "listCss", "menuCss", "delay"];

function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$q(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Autocomplete = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var onSuggestionsFetchRequested = _ref.onSuggestionsFetchRequested,
      renderSuggestion = _ref.renderSuggestion,
      getSuggestionValue = _ref.getSuggestionValue,
      onSuggestionSelected = _ref.onSuggestionSelected,
      inputProps = _ref.inputProps,
      defaultIsOpen = _ref.defaultIsOpen,
      isLoading = _ref.isLoading,
      suggestions = _ref.suggestions,
      loadingError = _ref.loadingError,
      style = _ref.style,
      listCss = _ref.listCss,
      menuCss = _ref.menuCss,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 300 : _ref$delay;
      _objectWithoutProperties__default["default"](_ref, _excluded$24);

  var theme = React.useContext(ThemeContext);
  var menuStyle = listCss || styles$9.menu;
  var wrapperStyle = menuCss || styles$9.wrapper;

  var _useDebounce = useDebounce.useDebounce(inputProps.value, delay),
      _useDebounce2 = _slicedToArray__default["default"](_useDebounce, 1),
      debouncedText = _useDebounce2[0];

  React.useEffect(function () {
    if (typeof debouncedText === 'string') {
      onSuggestionsFetchRequested({
        value: debouncedText
      });
    }
  }, [debouncedText, onSuggestionsFetchRequested]);

  var itemToString = function itemToString(item) {
    if (typeof item === 'undefined' || item === null) return undefined;
    return getSuggestionValue(item);
  };

  var hasSuggestions = suggestions && suggestions.length > 0;
  return react.jsx(Downshift__default["default"], {
    defaultIsOpen: defaultIsOpen,
    onChange: function onChange(selection) {
      onSuggestionSelected({
        item: selection,
        value: itemToString(selection)
      });
    },
    defaultHighlightedIndex: 0,
    itemToString: itemToString
  }, function (_ref2) {
    var getInputProps = _ref2.getInputProps,
        getItemProps = _ref2.getItemProps;
        _ref2.getLabelProps;
        var getMenuProps = _ref2.getMenuProps,
        isOpen = _ref2.isOpen;
        _ref2.inputValue;
        var highlightedIndex = _ref2.highlightedIndex,
        selectedItem = _ref2.selectedItem,
        getRootProps = _ref2.getRootProps;
    return react.jsx("div", {
      style: _objectSpread$q({
        position: 'relative',
        display: 'inline-block'
      }, style)
    }, react.jsx("div", getRootProps({}, {
      suppressRefError: true
    }), react.jsx(Input, getInputProps(_objectSpread$q(_objectSpread$q({
      ref: ref
    }, inputProps), {}, {
      onChange: function onChange(event) {
        return inputProps.onChange(event, {
          newValue: event.target.value
        });
      },
      onKeyDown: function onKeyDown(event) {
        if (event.key === 'Escape') {
          // If the suggestions are not open and escape is pressed, then do not prevent default
          if (!isOpen) {
            event.nativeEvent.preventDownshiftDefault = true;
          }
        }
      }
    })))), react.jsx("div", {
      css: wrapperStyle({
        theme: theme,
        isOpen: isOpen
      })
    }, isOpen && react.jsx(React__default["default"].Fragment, null, react.jsx(StripeLoader, {
      active: isLoading || loadingError,
      error: loadingError
    }), react.jsx("ul", _extends__default["default"]({}, getMenuProps(), {
      css: menuStyle({
        theme: theme
      })
    }), !isLoading && !hasSuggestions && !loadingError && react.jsx("li", {
      css: styles$9.item({
        theme: theme
      }),
      style: {
        color: '#aaa'
      }
    }, "No suggestions provided"), !isLoading && !hasSuggestions && loadingError && react.jsx("li", {
      css: styles$9.item({
        theme: theme
      }),
      style: {
        color: '#aaa'
      }
    }, "Failed to load suggestions"), hasSuggestions && suggestions.map(function (item, index) {
      return (// eslint-disable-next-line react/jsx-key
        react.jsx("li", _extends__default["default"]({
          css: styles$9.item({
            theme: theme
          })
        }, getItemProps({
          key: index,
          index: index,
          item: item,
          style: {
            backgroundColor: highlightedIndex === index ? theme.paperBackground800 : theme.paperBackground500,
            fontWeight: selectedItem === item ? 'bold' : 'normal'
          }
        })), renderSuggestion(item, {
          debouncedText: debouncedText,
          isHighlighted: highlightedIndex === index
        }))
      );
    })))));
  });
});
Autocomplete.displayName = 'Autocomplete';

/** Detect free variable `global` from Node.js. */

var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal$1;

var freeGlobal = _freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$8 = freeGlobal || freeSelf || Function('return this')();

var _root = root$8;

var root$7 = _root;

/** Built-in value references. */
var Symbol$6 = root$7.Symbol;

var _Symbol = Symbol$6;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

function arrayMap$6(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

var _arrayMap = arrayMap$6;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray$e = Array.isArray;

var isArray_1 = isArray$e;

var Symbol$5 = _Symbol;

/** Used for built-in method references. */
var objectProto$g = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$d = objectProto$g.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$g.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$5 ? Symbol$5.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag$1(value) {
  var isOwn = hasOwnProperty$d.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

var _getRawTag = getRawTag$1;

/** Used for built-in method references. */

var objectProto$f = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$f.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}

var _objectToString = objectToString$1;

var Symbol$4 = _Symbol,
    getRawTag = _getRawTag,
    objectToString = _objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$4 ? Symbol$4.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag$6(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

var _baseGetTag = baseGetTag$6;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike$9(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike$9;

var baseGetTag$5 = _baseGetTag,
    isObjectLike$8 = isObjectLike_1;

/** `Object#toString` result references. */
var symbolTag$3 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$4(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$8(value) && baseGetTag$5(value) == symbolTag$3);
}

var isSymbol_1 = isSymbol$4;

var Symbol$3 = _Symbol,
    arrayMap$5 = _arrayMap,
    isArray$d = isArray_1,
    isSymbol$3 = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY$2 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto$2 = Symbol$3 ? Symbol$3.prototype : undefined,
    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString$1(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray$d(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap$5(value, baseToString$1) + '';
  }
  if (isSymbol$3(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
}

var _baseToString = baseToString$1;

var baseToString = _baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString$5(value) {
  return value == null ? '' : baseToString(value);
}

var toString_1 = toString$5;

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */

function baseSlice$1(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

var _baseSlice = baseSlice$1;

var baseSlice = _baseSlice;

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice$1(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

var _castSlice = castSlice$1;

/** Used to compose unicode character classes. */

var rsAstralRange$2 = '\\ud800-\\udfff',
    rsComboMarksRange$3 = '\\u0300-\\u036f',
    reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsVarRange$2 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ$2 = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ$2 + rsAstralRange$2  + rsComboRange$3 + rsVarRange$2 + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode$2(string) {
  return reHasUnicode.test(string);
}

var _hasUnicode = hasUnicode$2;

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

function asciiToArray$1(string) {
  return string.split('');
}

var _asciiToArray = asciiToArray$1;

/** Used to compose unicode character classes. */

var rsAstralRange$1 = '\\ud800-\\udfff',
    rsComboMarksRange$2 = '\\u0300-\\u036f',
    reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
    rsVarRange$1 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange$1 + ']',
    rsCombo$2 = '[' + rsComboRange$2 + ']',
    rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
    rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ$1 = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$1 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsSymbol = '(?:' + [rsNonAstral$1 + rsCombo$2 + '?', rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol + rsSeq$1, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray$1(string) {
  return string.match(reUnicode) || [];
}

var _unicodeToArray = unicodeToArray$1;

var asciiToArray = _asciiToArray,
    hasUnicode$1 = _hasUnicode,
    unicodeToArray = _unicodeToArray;

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray$1(string) {
  return hasUnicode$1(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

var _stringToArray = stringToArray$1;

var castSlice = _castSlice,
    hasUnicode = _hasUnicode,
    stringToArray = _stringToArray,
    toString$4 = toString_1;

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst$1(methodName) {
  return function(string) {
    string = toString$4(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

var _createCaseFirst = createCaseFirst$1;

var createCaseFirst = _createCaseFirst;

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst$1 = createCaseFirst('toUpperCase');

var upperFirst_1 = upperFirst$1;

var toString$3 = toString_1,
    upperFirst = upperFirst_1;

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */
function capitalize$1(string) {
  return upperFirst(toString$3(string).toLowerCase());
}

var capitalize_1 = capitalize$1;

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */

function arrayReduce$1(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

var _arrayReduce = arrayReduce$1;

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */

function basePropertyOf$1(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

var _basePropertyOf = basePropertyOf$1;

var basePropertyOf = _basePropertyOf;

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter$1 = basePropertyOf(deburredLetters);

var _deburrLetter = deburrLetter$1;

var deburrLetter = _deburrLetter,
    toString$2 = toString_1;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange$1 = '\\u0300-\\u036f',
    reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;

/** Used to compose unicode capture groups. */
var rsCombo$1 = '[' + rsComboRange$1 + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo$1, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr$1(string) {
  string = toString$2(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

var deburr_1 = deburr$1;

/** Used to match words composed of alphanumeric characters. */

var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords$1(string) {
  return string.match(reAsciiWord) || [];
}

var _asciiWords = asciiWords$1;

/** Used to detect strings that need a more robust regexp to match words. */

var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord$1(string) {
  return reHasUnicodeWord.test(string);
}

var _hasUnicodeWord = hasUnicodeWord$1;

/** Used to compose unicode character classes. */

var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos$1 = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords$1(string) {
  return string.match(reUnicodeWord) || [];
}

var _unicodeWords = unicodeWords$1;

var asciiWords = _asciiWords,
    hasUnicodeWord = _hasUnicodeWord,
    toString$1 = toString_1,
    unicodeWords = _unicodeWords;

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words$1(string, pattern, guard) {
  string = toString$1(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

var words_1 = words$1;

var arrayReduce = _arrayReduce,
    deburr = deburr_1,
    words = words_1;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder$1(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

var _createCompounder = createCompounder$1;

var capitalize = capitalize_1,
    createCompounder = _createCompounder;

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */
var camelCase = createCompounder(function(result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize(word) : word);
});

var camelCase_1 = camelCase;

var opposite = {
  left: 'right',
  right: 'left',
  top: 'bottom',
  bottom: 'top'
};

var border = function border(width, color, dir, isActive) {
  var _ref2;

  return _ref2 = {
    border: '0 solid transparent'
  }, _defineProperty__default["default"](_ref2, camelCase_1("border-".concat(dir)), "".concat(width, "px solid ").concat(isActive ? color : 'transparent')), _defineProperty__default["default"](_ref2, camelCase_1("border-".concat(opposite[dir])), "".concat(width, "px solid transparent")), _ref2;
};

var tab$1 = function tab(_ref3) {
  var theme = _ref3.theme,
      _ref3$direction = _ref3.direction,
      direction = _ref3$direction === void 0 ? 'bottom' : _ref3$direction,
      isActive = _ref3.isActive;
  return /*#__PURE__*/react.css(border(3, theme.primary500, direction, isActive), " padding:10px 10px;flex:0 1 auto;cursor:pointer;&:hover,&:focus{outline:none;background:rgba(0,0,0,.05);}::-moz-focus-inner{border-style:none;}" + ("" ), "" );
};
var routerTab$1 = function routerTab(_ref4) {
  var theme = _ref4.theme,
      _ref4$direction = _ref4.direction,
      direction = _ref4$direction === void 0 ? 'bottom' : _ref4$direction,
      isActive = _ref4.isActive;
  return /*#__PURE__*/react.css(border(3, theme.primary500, direction, isActive), " flex:0 1 auto;&:hover,&:focus{outline:none;background:rgba(0,0,0,.05);}a{padding:10px 10px;display:inline-block;color:inherit;text-decoration:none;::-moz-focus-inner{border-style:none;}}" + ("" ), "" );
};
var tabList = function tabList(_ref5) {
  _ref5.theme;
      var vertical = _ref5.vertical;
  return /*#__PURE__*/react.css("padding:0;margin:0;list-style:none;display:flex;flex-direction:", vertical ? 'column' : 'row', ";flex-wrap:nowrap;" + ("" ), "" );
};
var tabSeperator = function tabSeperator(_ref6) {
  _ref6.theme;
      var vertical = _ref6.vertical;
  return /*#__PURE__*/react.css(vertical ? 'height: 1px' : 'width: 1px', ";margin:", vertical ? '0 5px' : '5px 0', ";flex:0 1 auto;border-", vertical ? 'top' : 'left', ":1px solid #ddd;" + ("" ), "" );
};

var _ref$A = {
  name: "mkkf9p",
  styles: "flex:1 1 auto"
} ;

var tabSpacer = function tabSpacer(_ref7) {
  _ref7.theme;
      _ref7.vertical;
  return _ref$A;
};

var _excluded$23 = ["activeId", "onChange"],
    _excluded2$i = ["vertical"],
    _excluded3$a = ["direction", "label", "to", "exact", "className"],
    _excluded4$5 = ["tabId", "direction"],
    _excluded5$1 = ["tabId", "lazy"];
var TabsContext = /*#__PURE__*/React__default["default"].createContext({});

var ControlledTabs = function ControlledTabs(_ref) {
  var activeId = _ref.activeId,
      onChange = _ref.onChange,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$23);

  return react.jsx(TabsContext.Provider, _extends__default["default"]({
    value: {
      activeId: activeId,
      onChange: onChange
    }
  }, props));
};

var TapSeperator$2 = function TapSeperator(_ref2) {
  var vertical = _ref2.vertical,
      props = _ref2.props;
  var theme = React.useContext(ThemeContext);
  return react.jsx("li", _extends__default["default"]({
    css: tabSeperator({
      theme: theme,
      vertical: vertical
    })
  }, props), "\xA0");
};
var TapSpacer = function TapSpacer(props) {
  var theme = React.useContext(ThemeContext);
  return react.jsx("li", _extends__default["default"]({
    css: tabSpacer({
      theme: theme
    })
  }, props));
};
var Tabs = uncontrollable.uncontrollable(ControlledTabs, {
  activeId: 'onChange'
});
var TabList$5 = function TabList(_ref3) {
  var _ref3$vertical = _ref3.vertical,
      vertical = _ref3$vertical === void 0 ? false : _ref3$vertical,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded2$i);

  var theme = React.useContext(ThemeContext);
  return react.jsx("ul", _extends__default["default"]({
    css: tabList({
      theme: theme,
      vertical: vertical
    })
  }, props));
};
TabList$5.displayName = 'TabList'; // now that this is being used as links with routes it seems less interesting?
// TabList.propTypes = {
//   ['aria-label']: oneOfMany(['aria-label', 'aria-labelledby'])
// };

var RouterTab$3 = function RouterTab(_ref4) {
  var direction = _ref4.direction,
      label = _ref4.label,
      to = _ref4.to,
      exact = _ref4.exact,
      className = _ref4.className,
      props = _objectWithoutProperties__default["default"](_ref4, _excluded3$a);

  var theme = React.useContext(ThemeContext);
  var isActive = reactRouterDom.useRouteMatch({
    path: to,
    exact: exact
  });
  return react.jsx("li", {
    css: routerTab$1({
      theme: theme,
      isActive: isActive,
      direction: direction
    }),
    className: className
  }, react.jsx(reactRouterDom.Link, _extends__default["default"]({
    to: to
  }, props), label));
};
var Tab$2 = function Tab(_ref5) {
  var tabId = _ref5.tabId,
      direction = _ref5.direction,
      props = _objectWithoutProperties__default["default"](_ref5, _excluded4$5);

  var theme = React.useContext(ThemeContext);
  var tabContext = React.useContext(TabsContext);
  var isActive = tabContext.activeId === tabId;
  var tabProps = {
    'aria-selected': isActive ? true : false,
    'aria-controls': "".concat(tabId, "_panel"),
    'role': 'button',
    'id': "".concat(tabId, "_tab"),
    'onClick': function onClick() {
      return tabContext.onChange(tabId);
    }
  };
  return react.jsx("li", _extends__default["default"]({
    tabIndex: "0",
    css: tab$1({
      theme: theme,
      isActive: isActive,
      direction: direction
    })
  }, tabProps, props));
};
Tab$2.displayName = 'Tab';
var TabPanel$2 = function TabPanel(_ref6) {
  var tabId = _ref6.tabId,
      lazy = _ref6.lazy,
      props = _objectWithoutProperties__default["default"](_ref6, _excluded5$1);

  // const theme = useContext(ThemeContext);
  var tabContext = React.useContext(TabsContext);
  var isActive = tabContext.activeId === tabId;
  if (lazy && !isActive) return null;
  return react.jsx("div", _extends__default["default"]({
    id: "".concat(tabId, "_panel"),
    "aria-labelledby": "".concat(tabId, "_tab") // css={styles.tabs({theme})}
    ,
    hidden: !isActive
  }, props));
};
TabPanel$2.displayName = 'TabPanel';
Tabs.Tab = Tab$2;
Tabs.TabList = TabList$5;
Tabs.TabPanel = TabPanel$2;
Tabs.TapSeperator = TapSeperator$2;
Tabs.TapSpacer = TapSpacer;
Tabs.RouterTab = RouterTab$3;

var _excluded$22 = ["shrink", "grow", "basis", "xs"];

var row = function row(props) {
  return /*#__PURE__*/react.css("display:flex;flex-direction:", props.direction || null, ";flex-wrap:", props.wrap ? props.wrap : 'wrap', ";align-items:", props.alignItems ? props.alignItems : null, ";margin:", props.halfGutter ? -props.halfGutter + 'px' : null, ";justify-content:", props.justifyContent ? props.justifyContent : null, ";>*{padding:", props.halfGutter ? props.halfGutter + 'px' : null, ";}" + ("" ), "" );
};

var asFlexValue = function asFlexValue() {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return bool ? 1 : 0;
};

var getFlexSize = function getFlexSize(size, breakpoint) {
  return /*#__PURE__*/react.css("@media (min-width: ", breakpoint, "px){flex-basis:", size ? size * 100 / 24 + '%' : null, ";}" + ("" ), "" );
};

var col = function col(_ref) {
  var shrink = _ref.shrink,
      grow = _ref.grow,
      basis = _ref.basis,
      xs = _ref.xs,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$22);

  return /*#__PURE__*/react.css("flex-grow:", asFlexValue(grow), ";flex-shrink:", asFlexValue(shrink), ";flex-basis:", basis ? typeof basis === 'number' ? basis + '%' : basis : 'auto', ";flex-basis:", xs ? xs * 100 / 24 + '%' : null, ";", getFlexSize(props.sm, 600), ";", getFlexSize(props.md, 700), ";", getFlexSize(props.lg, 800), ";", getFlexSize(props.xl, 1000), ";" + ("" ), "" );
};

var _excluded$21 = ["as", "className", "style", "wrap", "direction", "alignItems", "justifyContent", "halfGutter", "gridGutter", "shrink", "grow", "basis", "xs", "sm", "md", "lg", "xl"];

var GetComponent = function GetComponent(rowComponentStyle) {
  return /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
    var _ref$as = _ref.as,
        As = _ref$as === void 0 ? 'div' : _ref$as,
        _ref$className = _ref.className,
        className = _ref$className === void 0 ? '' : _ref$className,
        _ref$style = _ref.style,
        style = _ref$style === void 0 ? {} : _ref$style,
        wrap = _ref.wrap,
        direction = _ref.direction,
        alignItems = _ref.alignItems,
        justifyContent = _ref.justifyContent,
        halfGutter = _ref.halfGutter,
        gridGutter = _ref.gridGutter,
        shrink = _ref.shrink,
        grow = _ref.grow,
        basis = _ref.basis,
        xs = _ref.xs,
        sm = _ref.sm,
        md = _ref.md,
        lg = _ref.lg,
        xl = _ref.xl,
        props = _objectWithoutProperties__default["default"](_ref, _excluded$21);

    return react.jsx(As, _extends__default["default"]({
      ref: ref,
      style: style,
      className: className
    }, props, {
      css: rowComponentStyle({
        wrap: wrap,
        direction: direction,
        alignItems: alignItems,
        justifyContent: justifyContent,
        halfGutter: halfGutter,
        gridGutter: gridGutter,
        shrink: shrink,
        grow: grow,
        basis: basis,
        xs: xs,
        sm: sm,
        md: md,
        lg: lg,
        xl: xl
      })
    }));
  });
};

var Row = GetComponent(row);
var Col = GetComponent(col);

var _excluded$20 = ["trigger", "placement", "items"],
    _excluded2$h = ["children", "onChange", "className", "style"],
    _excluded3$9 = ["children"];
var Menu = /*#__PURE__*/React__default["default"].memo(function (_ref2) {
  var trigger = _ref2.trigger,
      placement = _ref2.placement,
      items = _ref2.items,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded$20);

  var theme = React.useContext(ThemeContext);
  var menu = Menu$1.useMenuState({
    placement: placement || theme.dir === 'rtl' ? 'bottom-start' : 'bottom-end'
  });
  return react.jsx(Root, null, react.jsx(Menu$1.MenuButton, _extends__default["default"]({}, menu, trigger.props), function (disclosureProps) {
    return /*#__PURE__*/React__default["default"].cloneElement(trigger, disclosureProps);
  }), react.jsx(Menu$1.Menu, _extends__default["default"]({}, menu, props, {
    css: focus(),
    style: {
      zIndex: 999
    }
  }), react.jsx("div", {
    css: menuContainer({
      theme: theme
    })
  }, (typeof items === 'function' ? items(menu) : items).map(function (item, i) {
    return react.jsx(Menu$1.MenuItem, _extends__default["default"]({}, menu, item.props, {
      key: i
    }), function (itemProps) {
      return /*#__PURE__*/React__default["default"].cloneElement(item, itemProps);
    });
  }))));
});
var MenuToggle = /*#__PURE__*/React__default["default"].forwardRef(function (_ref3, ref) {
  var children = _ref3.children,
      onChange = _ref3.onChange,
      className = _ref3.className,
      style = _ref3.style,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded2$h);

  var theme = React.useContext(ThemeContext);
  return react.jsx("label", {
    className: className,
    css: menuOption(theme),
    ref: ref,
    style: style
  }, react.jsx("div", null, children), react.jsx("div", null, react.jsx(Switch, _extends__default["default"]({
    className: "gb-menuOption-inner-switch",
    onChange: onChange ? onChange : null
  }, props))));
});
var MenuAction = /*#__PURE__*/React__default["default"].forwardRef(function (_ref4, ref) {
  var children = _ref4.children,
      props = _objectWithoutProperties__default["default"](_ref4, _excluded3$9);

  var theme = React.useContext(ThemeContext);
  return react.jsx("button", _extends__default["default"]({
    ref: ref,
    css: menuAction(theme)
  }, props), react.jsx("span", null, children));
});

var _ref$z = {
  name: "pim2nj",
  styles: "&:focus{outline:none;box-shadow:0 0 0 0.125em #00000005;}"
} ;

var focus = function focus(theme) {
  return _ref$z;
};

var menuOption = function menuOption(theme) {
  return /*#__PURE__*/react.css("padding:8px 8px;display:block;display:flex;width:100%;justify-content:space-between;overflow:hidden;font-size:13px;&>*{margin:0 8px;}&:focus,:focus-within{outline:none;background:", theme.darkTheme ? '#00000050' : '#00000010', ";}" + ("" ), "" );
};

var menuAction = function menuAction(theme) {
  return /*#__PURE__*/react.css(menuOption(theme), ";background:none;border:none;background:none;outline:none;color:", theme.color900, ";" + ("" ), "" );
};

var menuContainer = function menuContainer(_ref5) {
  var theme = _ref5.theme;
  return /*#__PURE__*/react.css("min-width:180px;max-width:100%;background-color:", theme.paperBackground100, ";z-index:999;outline:0px;border:1px solid rgba(33, 33, 33, 0.15);box-shadow:3px 3px 2px rgba(0, 0, 0, 0.05);" + ("" ), "" );
};

var tooltip = function tooltip(props) {
  return /*#__PURE__*/react.css(root$9(props), " font-size:12px;background-color:rgba(33, 33, 33, 0.9);padding:4px 8px;border-radius:", props.theme.borderRadius, "px;color:white;z-index:1000;" + ("" ), "" );
};
var styles$8 = {
  tooltip: tooltip
};

var _excluded$1$ = ["children", "title", "placement"];
function Tooltip(_ref) {
  var children = _ref.children,
      title = _ref.title,
      placement = _ref.placement,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1$);

  var tooltip = Tooltip$1.useTooltipState({
    placement: placement
  });
  var theme = React.useContext(ThemeContext);
  return react.jsx(React__default["default"].Fragment, null, react.jsx(Tooltip$1.TooltipReference, _extends__default["default"]({}, tooltip, {
    ref: children.ref
  }, children.props), function (referenceProps) {
    return /*#__PURE__*/React__default["default"].cloneElement(children, referenceProps);
  }), react.jsx(Tooltip$1.Tooltip, _extends__default["default"]({}, tooltip, props, {
    css: styles$8.tooltip({
      theme: theme
    })
  }), title));
}

function Content(props) {
  var theme = React.useContext(ThemeContext);
  return react.jsx(Tooltip$1.Tooltip, _extends__default["default"]({}, props, {
    css: styles$8.tooltip({
      theme: theme
    })
  }));
}

Tooltip.Content = Content;
Tooltip.Reference = Tooltip$1.TooltipReference;
Tooltip.useTooltipState = Tooltip$1.useTooltipState;

var skeleton = function skeleton(_ref) {
  var width = _ref.width;
  return /*#__PURE__*/react.css("width:", width, ";display:inline-block;height:1em;animation:", skeletonLoading, " 3s linear infinite;" + ("" ), "" );
};

var _excluded$1_ = ["width"];
var Skeleton = function Skeleton(_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === void 0 ? '100%' : _ref$width,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1_);

  var theme = React.useContext(ThemeContext);
  var w;

  if (width === 'random') {
    w = "".concat(Math.floor(Math.random() * 50 + 50), "%");
  } else if (typeof w === 'number') {
    w = "".concat(Math.floor(Math.random() * 50 + 50), "px");
  } else {
    w = width;
  }

  return react.jsx("span", _extends__default["default"]({
    css: skeleton({
      theme: theme,
      width: w
    })
  }, props), "\xA0");
};
Skeleton.displayName = 'Skeleton';

var _excluded$1Z = ["noWrap"];
var wrapper = function wrapper(props) {
  return /*#__PURE__*/react.css("border:1px solid ", props.theme.paperBorderColor, ";" + ("" ), "" );
};
var occurrenceTable = function occurrenceTable(_ref5) {
  var theme = _ref5.theme;
  return /*#__PURE__*/react.css("width:100%;height:calc(100% - 30px);overflow:auto;position:relative;background:", theme.paperBackground, ";flex:1 1 auto;" + ("" ), "" );
};
var footer$1 = function footer(_ref6) {
  var theme = _ref6.theme;
  return /*#__PURE__*/react.css("height:30px;display:flex;flex-direction:row;padding:0 10px;background:", theme.paperBackground500, ";border-radius:0 0 ", theme.borderRadius, "px ", theme.borderRadius, "px;border-top:1px solid ", theme.paperBorderColor, ";" + ("" ), "" );
};

var _ref4$7 = {
  name: "7rew41",
  styles: "flex:0 0 auto;padding:0 10px;height:30px;line-height:30px;width:30px;padding:0;text-align:center;border:1px solid transparent"
} ;

var footerItemBase = function footerItemBase(_ref7) {
  _ref7.theme;
  return _ref4$7;
};
var footerItem$1 = function footerItem(props) {
  return /*#__PURE__*/react.css(footerItemBase(props), ";&:hover{border-color:", props.theme.paperBorderColor, ";}&:active{background:#f0f2f3;}", tooltip$1(props), ";" + ("" ), "" );
};
var table$1 = function table(props) {
  return /*#__PURE__*/react.css("position:relative;min-width:100%;border-collapse:separate;background:", props.theme.background, ";border-spacing:0;font-size:85%;& th,td{border-right:1px solid ", props.theme.paperBorderColor, ";transition:background-color 200ms ease;border-bottom:1px solid ", props.theme.paperBorderColor, ";text-align:left;}& thead th{position:sticky;top:0;border-bottom-width:2px;background:", props.theme.paperBackground500, ";color:", props.theme.color600, ";padding:8px 12px;}& td{padding:12px;background:", props.theme.paperBackground500, ";}& tbody>tr>td:first-of-type{border-right:1px solid ", props.theme.paperBorderColor, ";background:", props.theme.paperBackground500, ";}", props.stickyColumn ? stickyColumn() : '', ";", props.scrolled ? scrolled(props) : '', ";" + ("" ), "" );
};

var _ref3$c = {
  name: "1fnpr55",
  styles: "& thead th:first-of-type{left:0;z-index:1;}& tbody>tr>td:first-of-type{position:sticky;left:0;}"
} ;

var stickyColumn = function stickyColumn(props) {
  return _ref3$c;
}; // export const scrollEnd = props => css`
//   & thead th:last-of-type {
//     background: tomato;
//   }
// `;

var scrolled = function scrolled(_ref8) {
  var theme = _ref8.theme;
  return /*#__PURE__*/react.css("& td{background-color:", theme.paperBackground600, ";}& thead th{background:", theme.paperBackground700, ";}& thead th:first-of-type{background:", theme.paperBackground500, ";}" + ("" ), "" );
};
var footerText = function footerText(props) {
  return /*#__PURE__*/react.css(footerItemBase(props), ";width:auto;font-size:12px;text-align:center;flex:1 1 auto;" + ("" ), "" );
};

var _ref2$i = {
  name: "11lls6c",
  styles: "display:flex;word-break:break-word"
} ;

var cell = function cell(props) {
  return _ref2$i;
};
var dataCell = function dataCell(_ref9) {
  var noWrap = _ref9.noWrap;
      _objectWithoutProperties__default["default"](_ref9, _excluded$1Z);

  return /*#__PURE__*/react.css(noWrap ? 'white-space: nowrap;' : '', ";" + ("" ), "" );
};
var wide = function wide(props) {
  return /*#__PURE__*/react.css("min-width:20em;", cell(), ";" + ("" ), "" );
};

var _ref$y = {
  name: "1bmnxg7",
  styles: "white-space:nowrap"
} ;

var noWrap = function noWrap(props) {
  return _ref$y;
};
var tbodyLoading = function tbodyLoading(_ref10) {
  var theme = _ref10.theme;
  return /*#__PURE__*/react.css("td>*{background-color:", theme.color100, "55;color:transparent;}" + ("" ), "" );
};
var paper$6 = function paper(_ref11) {
  var theme = _ref11.theme,
      color = _ref11.color;
  return /*#__PURE__*/react.css("background-color:", theme['paperBackground' + color], ";" + ("" ), "" );
};
var ink = function ink(_ref12) {
  var theme = _ref12.theme,
      color = _ref12.color;
  return /*#__PURE__*/react.css("color:", theme['color' + color], ";" + ("" ), "" );
};
var styles$6 = {
  wrapper: wrapper,
  occurrenceTable: occurrenceTable,
  footer: footer$1,
  footerItem: footerItem$1,
  table: table$1,
  stickyColumn: stickyColumn,
  scrolled: scrolled,
  footerText: footerText,
  wide: wide,
  tbodyLoading: tbodyLoading
};

var styles$7 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  wrapper: wrapper,
  occurrenceTable: occurrenceTable,
  footer: footer$1,
  footerItemBase: footerItemBase,
  footerItem: footerItem$1,
  table: table$1,
  stickyColumn: stickyColumn,
  scrolled: scrolled,
  footerText: footerText,
  cell: cell,
  dataCell: dataCell,
  wide: wide,
  noWrap: noWrap,
  tbodyLoading: tbodyLoading,
  paper: paper$6,
  ink: ink,
  'default': styles$6
});

var _excluded$1Y = ["loading", "columnCount", "rowCount"],
    _excluded2$g = ["children", "width", "toggle", "locked"],
    _excluded3$8 = ["children", "width", "noWrap"],
    _excluded4$4 = ["intl", "loading", "theme", "children", "first", "prev", "next", "size", "from", "total", "fixedColumn", "style"];

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf__default["default"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default["default"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default["default"](this, result); }; }

function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var TBody = function TBody(_ref) {
  var loading = _ref.loading,
      columnCount = _ref.columnCount,
      rowCount = _ref.rowCount,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1Y);

  var theme = React.useContext(ThemeContext); // if not loading, then simply show the content as is

  if (!loading) return react.jsx("tbody", props); // if loading and there is already content in the table, then display that content in a skeleton style.
  // content that do not support this styling, will have to manage their own load style.

  if (React__default["default"].Children.count(props.children) > 0) {
    return react.jsx("tbody", _extends__default["default"]({}, props, {
      css: tbodyLoading({
        theme: theme
      })
    }));
  } // if loading and there is no content in the table, then display a bunch of skeleton rows


  return react.jsx("tbody", props, Array(rowCount || 10).fill().map(function (e, i) {
    return react.jsx("tr", {
      key: i
    }, Array(columnCount || 5).fill().map(function (e, i) {
      return react.jsx("td", {
        key: i
      }, react.jsx(Skeleton, null));
    }));
  }));
};
var Th = function Th(_ref2) {
  var children = _ref2.children,
      width = _ref2.width,
      toggle = _ref2.toggle,
      locked = _ref2.locked,
      rest = _objectWithoutProperties__default["default"](_ref2, _excluded2$g);

  return react.jsx("th", rest, react.jsx("div", {
    style: {
      display: 'flex',
      alignItems: 'center',
      wrap: 'no-wrap'
    },
    css: styles$7[width] ? styles$7[width]() : ''
  }, react.jsx("div", {
    style: {
      flex: '1 1 auto'
    }
  }, children), toggle && react.jsx(Tooltip, {
    title: react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
      id: "search.table.lockColumn",
      defaultMessage: "Lock column"
    })),
    placement: "auto"
  }, react.jsx(Button, {
    appearance: "text",
    onClick: toggle,
    style: {
      display: 'flex',
      marginLeft: 5
    }
  }, locked ? react.jsx(md.MdLock, null) : react.jsx(md.MdLockOpen, null)))));
};
var Td = function Td(_ref3) {
  var children = _ref3.children,
      width = _ref3.width,
      noWrap = _ref3.noWrap,
      rest = _objectWithoutProperties__default["default"](_ref3, _excluded3$8);

  return react.jsx("td", rest, react.jsx("span", {
    css: dataCell({
      width: width,
      noWrap: noWrap
    })
  }, children));
};

var DataTableCore = /*#__PURE__*/function (_Component) {
  _inherits__default["default"](DataTableCore, _Component);

  var _super = _createSuper$7(DataTableCore);

  function DataTableCore(props) {
    var _this;

    _classCallCheck__default["default"](this, DataTableCore);

    _this = _super.call(this, props);
    _this.bodyScroll = _this.bodyScroll.bind(_assertThisInitialized__default["default"](_this));
    _this.scrollToTop = _this.scrollToTop.bind(_assertThisInitialized__default["default"](_this));
    _this.myRef = /*#__PURE__*/React__default["default"].createRef();
    _this.state = {};
    return _this;
  }

  _createClass__default["default"](DataTableCore, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.loading !== this.props.loading) {
        this.scrollToTop();
      }
    }
  }, {
    key: "bodyScroll",
    value: function bodyScroll() {
      // const nearEnd = Math.abs(this.myRef.current.offsetWidth + this.myRef.current.scrollLeft - this.myRef.current.scrollWidth) < 20;
      this.setState({
        scrolled: this.myRef.current.scrollLeft !== 0
      });
    }
  }, {
    key: "scrollToTop",
    value: function scrollToTop() {
      this.myRef.current.scrollTop = 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          intl = _this$props.intl;
          _this$props.loading;
          var theme = _this$props.theme,
          children = _this$props.children,
          first = _this$props.first,
          prev = _this$props.prev,
          next = _this$props.next,
          size = _this$props.size,
          from = _this$props.from,
          total = _this$props.total,
          fixedColumn = _this$props.fixedColumn,
          style = _this$props.style,
          props = _objectWithoutProperties__default["default"](_this$props, _excluded4$4);

      var page = 1 + Math.floor(from / size);
      var totalPages = Math.ceil(total / size);
      return react.jsx(React__default["default"].Fragment, null, react.jsx("div", _extends__default["default"]({
        css: wrapper({
          theme: theme
        }),
        style: style
      }, props), react.jsx("div", {
        css: occurrenceTable({
          theme: theme
        }),
        onScroll: this.bodyScroll,
        ref: this.myRef
      }, react.jsx("table", {
        css: table$1({
          theme: theme,
          stickyColumn: fixedColumn,
          scrolled: this.state.scrolled && fixedColumn
        })
      }, children)), next && react.jsx("div", {
        css: footer$1({
          theme: theme
        })
      }, first && page > 2 && react.jsx(Button, {
        appearance: "text",
        css: footerItem$1({
          theme: theme
        }),
        direction: "right",
        tip: intl.formatMessage({
          id: 'pagination.first'
        }),
        onClick: first
      }, react.jsx(md.MdFirstPage, null)), prev && page > 1 && react.jsx(Button, {
        appearance: "text",
        css: footerItem$1({
          theme: theme
        }),
        direction: "right",
        tip: intl.formatMessage({
          id: 'pagination.previous'
        }),
        onClick: prev
      }, react.jsx(md.MdChevronLeft, null)), total > 0 && react.jsx("span", {
        css: footerText({
          theme: theme
        })
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "pagination.pageXofY",
        defaultMessage: 'Loading',
        values: {
          current: react.jsx(reactIntl.FormattedNumber, {
            value: page
          }),
          total: react.jsx(reactIntl.FormattedNumber, {
            value: totalPages
          })
        }
      })), next && page < totalPages && react.jsx(Button, {
        appearance: "text",
        css: footerItem$1({
          theme: theme
        }),
        direction: "left",
        tip: intl.formatMessage({
          id: 'pagination.next'
        }),
        onClick: next
      }, react.jsx(md.MdChevronRight, null)))));
    }
  }]);

  return DataTableCore;
}(React.Component);

function DataTable(props) {
  var theme = React.useContext(ThemeContext);
  var intl = reactIntl.useIntl();
  return react.jsx(DataTableCore, _extends__default["default"]({
    theme: theme,
    intl: intl
  }, props));
}

var _excluded$1X = ["src", "w", "h"];
var getImageSrc = function getImageSrc(_ref) {
  var src = _ref.src,
      _ref$w = _ref.w,
      w = _ref$w === void 0 ? '' : _ref$w,
      _ref$h = _ref.h,
      h = _ref$h === void 0 ? '' : _ref$h;
  return "https://api.gbif.org/v1/image/unsafe/".concat(w, "x").concat(h, "/").concat(encodeURIComponent(src));
};
var Image$1 = /*#__PURE__*/React__default["default"].forwardRef(function (_ref2, ref) {
  var src = _ref2.src,
      _ref2$w = _ref2.w,
      w = _ref2$w === void 0 ? '' : _ref2$w,
      _ref2$h = _ref2.h,
      h = _ref2$h === void 0 ? '' : _ref2$h,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded$1X);

  return react.jsx("img", _extends__default["default"]({
    src: getImageSrc({
      src: src,
      w: w,
      h: h
    }),
    ref: ref
  }, props));
});
Image$1.getImageSrc = getImageSrc;

var _ref11$1 = {
  name: "gpfvns",
  styles: "display:flex;flex-wrap:wrap;justify-content:flex-start;padding:0;margin:-6px"
} ;

var gallery = function gallery(props) {
  return _ref11$1;
};
var galleryTileImage = function galleryTileImage(_ref12) {
  _ref12.theme;
      var _ref12$height = _ref12.height,
      height = _ref12$height === void 0 ? 150 : _ref12$height;
  return /*#__PURE__*/react.css("height:", height, "px;width:100%;background:#88888822;background-size:contain;background-repeat:no-repeat;background-position:center;&:hover{box-shadow:0 0 1px 1px rgba(0, 0, 0, 0.3);}" + ("" ), "" );
};

var _ref10$4 = {
  name: "f6v012",
  styles: "flex:1 1 auto;width:150px;margin:6px;display:block;overflow:hidden;& img{display:none;}"
} ;

var galleryTile = function galleryTile(_ref13) {
  _ref13.height;
  return _ref10$4;
};

var _ref9$3 = {
  name: "19a2npw",
  styles: "font-size:.80em;font-weight:600;padding-top:2px"
} ;

var caption = function caption(props) {
  return _ref9$3;
};
var more$1 = function more(props) {
  return /*#__PURE__*/react.css("flex:100 1 auto;display:flex;height:", props.height || 150, "px;align-items:center;color:#888;min-width:100px;padding-left:30px;" + ("" ), "" );
}; // export const slideIn = props => css`
//   opacity: 1;
//   transform: translateX(0);
// `;

var _ref8$4 = {
  name: "kyhf4w",
  styles: "position:fixed;top:0;left:0;right:0;bottom:0;background:#00000010"
} ;

var detailPage = function detailPage(props) {
  return _ref8$4;
};
var skeletonTile = function skeletonTile(props) {
  return /*#__PURE__*/react.css("height:", props.height, "px;width:", props.height * 1.2, "px;flex:1 1 auto;margin:6px;animation:", skeletonLoading, " 3s linear infinite;" + ("" ), "" );
};

var _ref2$h = {
  name: "bjn8wh",
  styles: "position:relative"
} ;

var zoomableImage = function zoomableImage(_ref3) {
  _ref3.src;
  return _ref2$h;
};
var image = function image(_ref4) {
  var src = _ref4.src,
      blur = _ref4.blur;
  return /*#__PURE__*/react.css("height:100%;width:100%;background:url(", src, ");background-position:center;background-size:contain;background-repeat:no-repeat;position:relative;text-align:center;", blur ? 'filter: blur(8px)' : '', ";" + ("" ), "" );
};

var _ref$x = {
  name: "1ej3ex3",
  styles: "position:absolute;bottom:20px;right:20px;background:rgba(0,0,0,.8);color:white;padding:0;display:flex"
} ;

var toolBar = function toolBar() {
  return _ref$x;
};
var styles$5 = {
  zoomableImage: zoomableImage,
  toolBar: toolBar,
  image: image
};

var _excluded$1W = ["src", "thumbnail"];
var ZoomableImage = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var src = _ref.src,
      thumbnail = _ref.thumbnail,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1W);

  var theme = React.useContext(ThemeContext);

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      isFullscreen = _useState2[0],
      setFullscreen = _useState2[1];

  var _useState3 = React.useState(thumbnail),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      imageSrc = _useState4[0],
      setImageSrc = _useState4[1];

  var wrapperRef = React.useRef(null);
  React.useEffect(function () {
    setImageSrc(thumbnail);

    if (Image) {
      var downloadingImage = new Image();

      downloadingImage.onload = function () {
        setImageSrc(this.src);
      };

      downloadingImage.src = src;
    }
  }, [src, thumbnail]);
  var handleFullScreenChange = React.useCallback(function (event) {
    // Surprisingly the only way to tell if full screen is to compare.
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange
    setFullscreen(document.fullscreenElement === wrapperRef.current);
  });
  React.useEffect(function () {
    wrapperRef.current.onfullscreenchange = handleFullScreenChange;
    return function () {
      wrapperRef.current.onfullscreenchange = undefined;
    };
  }, [handleFullScreenChange]);
  return react.jsx("div", _extends__default["default"]({
    ref: wrapperRef,
    css: styles$5.zoomableImage({
      theme: theme
    })
  }, props), react.jsx("div", {
    css: styles$5.image({
      theme: theme,
      src: imageSrc,
      blur: imageSrc === thumbnail
    })
  }), react.jsx("div", {
    css: styles$5.toolBar({
      theme: theme,
      src: src
    })
  }, react.jsx(Button, {
    style: {
      padding: 10
    },
    appearance: "text",
    ref: ref,
    onClick: function onClick() {
      if (isFullscreen) document.exitFullscreen();else wrapperRef.current.requestFullscreen();
    }
  }, isFullscreen ? react.jsx(md.MdFullscreenExit, null) : react.jsx(md.MdFullscreen, null))));
});
ZoomableImage.displayName = 'ZoomableImage';

var _excluded$1V = ["closeRequest", "item", "title", "subtitle", "details", "previous", "next", "imageSrc"];
Tabs.TabList;
    Tabs.Tab;
    Tabs.TabPanel;
var GalleryDetails = function GalleryDetails(_ref) {
  _ref.closeRequest;
      var item = _ref.item;
      _ref.title;
      _ref.subtitle;
      var details = _ref.details,
      previous = _ref.previous,
      next = _ref.next,
      imageSrc = _ref.imageSrc,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1V);

  var _useState = React.useState({
    src: imageSrc(item)
  }),
      _useState2 = _slicedToArray__default["default"](_useState, 2);
      _useState2[0];
      var setImage = _useState2[1];

  React.useContext(ThemeContext);
  React.useEffect(function () {
    function handleKeypress(e) {
      switch (e.which) {
        case keyCodes.LEFT_ARROW:
          previous();
          return;

        case keyCodes.RIGHT_ARROW:
          next();
          return;

        default:
          return;
      }
    }

    if (document) document.addEventListener("keydown", handleKeypress, false);
    return function cleanup() {
      if (document) document.removeEventListener("keydown", handleKeypress, false);
    };
  }, [next, previous]);
  React.useEffect(function () {
    setImage({
      src: imageSrc(item)
    });
  }, [item, imageSrc]);
  return react.jsx(Root, null, react.jsx(Row, _extends__default["default"]({
    as: "section",
    direction: "row",
    wrap: "nowrap"
  }, props, {
    css: detailPage()
  }), react.jsx(Col, {
    shrink: true,
    basis: "100%",
    style: {
      background: '#00000005'
    }
  }), react.jsx(Row, null, details && details({
    item: item,
    onImageChange: setImage
  }))));
};
GalleryDetails.displayName = 'Gallery'; // Gallery.propTypes = {
// };

var _excluded$1U = ["height"],
    _excluded2$f = ["src", "onSelect", "height", "minWidth", "children", "style"],
    _excluded3$7 = ["onSelect", "caption", "title", "subtitle", "details", "items", "loading", "loadMore", "imageSrc", "size"],
    _excluded4$3 = ["children"];

function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$p(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var GalleryTileSkeleton = function GalleryTileSkeleton(_ref) {
  var _ref$height = _ref.height,
      height = _ref$height === void 0 ? 150 : _ref$height,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1U);

  return react.jsx("div", _extends__default["default"]({
    css: skeletonTile({
      height: height
    })
  }, props));
};
var GalleryTile = function GalleryTile(_ref2) {
  var src = _ref2.src,
      onSelect = _ref2.onSelect,
      _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? 150 : _ref2$height,
      minWidth = _ref2.minWidth,
      children = _ref2.children,
      style = _ref2.style,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded2$f);

  var theme = React.useContext(ThemeContext);

  var _useState = React.useState(1),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      ratio = _useState2[0],
      setRatio = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray__default["default"](_useState3, 2);
      _useState4[0];
      var setValid = _useState4[1];

  var onLoad = React.useCallback(function (event) {
    setValid(true);
    var ratio = event.target.naturalWidth / event.target.naturalHeight;
    setRatio(ratio);
  }, []);
  var sizeStyle = {
    width: ratio * height
  };
  var imageStyle = {
    backgroundImage: "url('".concat(Image$1.getImageSrc({
      src: src,
      h: height
    }), "')")
  };
  if (ratio > 3) sizeStyle.width = height * 3;
  if (ratio < .3) sizeStyle.width = height * .3;
  if (minWidth) sizeStyle.width = Math.max(minWidth, sizeStyle.width);
  return react.jsx("div", {
    css: galleryTile({
      theme: theme,
      height: height
    }),
    style: _objectSpread$p(_objectSpread$p({}, sizeStyle), style)
  }, react.jsx(Button, _extends__default["default"]({
    appearance: "text",
    css: galleryTileImage({
      theme: theme,
      height: height
    }),
    style: imageStyle,
    onClick: onSelect
  }, props, {
    title: "View details"
  }), src && react.jsx(Image$1, {
    src: src,
    width: height,
    h: height,
    onLoad: onLoad,
    alt: "Occurrence evidence"
  })), children);
};
var GalleryCaption = function GalleryCaption(props) {
  React.useContext(ThemeContext);
  return react.jsx("div", _extends__default["default"]({
    css: caption()
  }, props));
};
var Gallery = function Gallery(_ref3) {
  var onSelect = _ref3.onSelect,
      caption = _ref3.caption,
      title = _ref3.title,
      subtitle = _ref3.subtitle,
      details = _ref3.details,
      _ref3$items = _ref3.items,
      items = _ref3$items === void 0 ? [] : _ref3$items,
      loading = _ref3.loading,
      loadMore = _ref3.loadMore,
      imageSrc = _ref3.imageSrc,
      _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? 20 : _ref3$size,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded3$7);

  var theme = React.useContext(ThemeContext);
  var dialog = Dialog.useDialogState({
    animated: true,
    modal: false
  });

  var _useState5 = React.useState(),
      _useState6 = _slicedToArray__default["default"](_useState5, 2),
      activeId = _useState6[0],
      setActive = _useState6[1];

  var _useState7 = React.useState(),
      _useState8 = _slicedToArray__default["default"](_useState7, 2),
      activeItem = _useState8[0],
      setActiveItem = _useState8[1];

  React.useEffect(function () {
    setActiveItem(items[activeId]);
  }, [activeId, items]);
  var next = React.useCallback(function () {
    setActive(Math.min(items.length - 1, activeId + 1));
  }, [items, activeId]);
  var prev = React.useCallback(function () {
    setActive(Math.max(0, activeId - 1));
  }, [activeId]);
  return react.jsx(React__default["default"].Fragment, null, !onSelect && react.jsx(Dialog.Dialog, _extends__default["default"]({}, dialog, {
    tabIndex: 0,
    "aria-label": "Welcome"
  }), activeItem && react.jsx(GalleryDetails, {
    closeRequest: function closeRequest() {
      return dialog.hide();
    },
    item: activeItem,
    title: title ? title(activeItem) : 'Unknown',
    subtitle: title ? subtitle(activeItem) : null,
    details: details,
    imageSrc: imageSrc,
    next: next,
    previous: prev
  })), react.jsx(GalleryTiles, props, items.map(function (e, i) {
    return react.jsx(GalleryTile, {
      height: 150,
      key: i,
      src: imageSrc(e),
      onSelect: onSelect ? function () {
        return onSelect({
          item: e
        });
      } : function () {
        setActive(i);
        dialog.show();
      }
    }, caption && caption({
      item: e,
      index: i
    }));
  }), loading ? Array(size).fill().map(function (e, i) {
    return react.jsx(GalleryTileSkeleton, {
      key: i
    });
  }) : null, react.jsx("div", {
    css: more$1({
      theme: theme,
      height: 150
    })
  }, loadMore && !loading && react.jsx(Button, {
    appearance: "outline",
    onClick: loadMore
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "search.loadMore",
    defaultMessage: "Load more"
  })))));
};
var GalleryTiles = function GalleryTiles(_ref4) {
  var children = _ref4.children,
      props = _objectWithoutProperties__default["default"](_ref4, _excluded4$3);

  React.useContext(ThemeContext);
  return react.jsx("div", _extends__default["default"]({
    css: gallery()
  }, props), children, react.jsx("div", {
    css: more$1({
      height: 1
    })
  }));
};
Gallery.displayName = 'Gallery'; // Gallery.propTypes = {
// };

var _excluded$1T = ["size", "color"],
    _excluded2$e = ["size", "color"],
    _excluded3$6 = ["theme"];
var arrowDown = function arrowDown(_ref2) {
  var _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? 5 : _ref2$size,
      _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? '#88888855' : _ref2$color;
      _objectWithoutProperties__default["default"](_ref2, _excluded$1T);

  return /*#__PURE__*/react.css("width:0;height:0;border-left:", size, "px solid transparent;border-right:", size, "px solid transparent;border-top:", size, "px solid ", color, ";" + ("" ), "" );
};
var arrowUp = function arrowUp(_ref3) {
  var _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? 5 : _ref3$size,
      _ref3$color = _ref3.color,
      color = _ref3$color === void 0 ? '#88888855' : _ref3$color;
      _objectWithoutProperties__default["default"](_ref3, _excluded2$e);

  return /*#__PURE__*/react.css("width:0;height:0;border-left:", size, "px solid transparent;border-right:", size, "px solid transparent;border-bottom:", size, "px solid ", color, ";" + ("" ), "" );
};

var _ref$w = {
  name: "1nuhno9",
  styles: "padding-top:8px"
} ;

var content$1 = function content(_ref4) {
  _extends__default["default"]({}, _ref4);

  return _ref$w;
};
var accordion = function accordion(_ref5) {
  _extends__default["default"]({}, _ref5);

  return /*#__PURE__*/react.css("" , "" );
};
var summary$5 = function summary(_ref6) {
  _ref6.theme;
      _objectWithoutProperties__default["default"](_ref6, _excluded3$6);

  return /*#__PURE__*/react.css(">div{display:flex;flex-wrap:nowrap;align-items:center;}padding:12px 0 8px 0;list-style:none;list-style-type:none;", focusStyle(), " ", noUserSelect(), " &::-webkit-details-marker{display:none;}" + ("" ), "" );
};
var styles$4 = {
  accordion: accordion,
  summary: summary$5,
  content: content$1,
  arrowDown: arrowDown,
  arrowUp: arrowUp
};

var _excluded$1S = ["summary", "summaryStyle", "open", "onToggle", "children"];

function AccordionControlled(_ref) {
  var summary = _ref.summary,
      summaryStyle = _ref.summaryStyle,
      open = _ref.open,
      onToggle = _ref.onToggle,
      children = _ref.children,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1S);

  var theme = React.useContext(ThemeContext);
  return react.jsx("details", _extends__default["default"]({
    css: styles$4.accordion({
      theme: theme
    })
  }, props, {
    open: open
  }), react.jsx("summary", {
    style: summaryStyle,
    css: styles$4.summary({
      theme: theme
    }),
    onClick: function onClick(e) {
      if (e.target.href) return;
      e.preventDefault();
      onToggle(!open);
    }
  }, react.jsx("div", null, react.jsx("div", {
    style: {
      flex: '1 1 auto'
    }
  }, summary), react.jsx("div", {
    style: {
      flex: '0 0 auto'
    },
    css: open ? styles$4.arrowUp({}) : styles$4.arrowDown({})
  }))), react.jsx("div", {
    css: styles$4.content({
      theme: theme
    })
  }, children));
} // Accordion.propTypes = {
// };


var Accordion = uncontrollable.uncontrollable(AccordionControlled, {
  open: 'onToggle'
});
Accordion.displayName = 'Accordion';

function useBelow() {
  var breakpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 800;

  // Initialize state with undefined width/height so server and client renders match
  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/
  var _useState = React.useState(false),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      isBelow = _useState2[0],
      setBoolean = _useState2[1];

  React.useEffect(function () {
    // Handler to call on window resize
    function handleResize() {
      setBoolean(window.innerWidth < breakpoint);
    } // Add event listener


    window.addEventListener("resize", handleResize); // Call handler right away so state gets updated with initial window size

    handleResize(); // Remove event listener on cleanup

    return function () {
      return window.removeEventListener("resize", handleResize);
    };
  }, []); // Empty array ensures that effect is only run on mount

  return isBelow;
}

var _excluded$1R = ["horizontal", "dense"],
    _excluded2$d = ["horizontal", "theme"];

function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$o(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var _ref3$b = {
  name: "10gfs5p",
  styles: "display:grid;grid-template-columns:minmax(75px, 150px) 1fr;>dt{margin-bottom:12px;&:last-of-type{margin-bottom:0;}}"
} ;

var horizontalProperties = function horizontalProperties() {
  return _ref3$b;
};

var _ref2$g = {
  name: "e49x6v",
  styles: ">dt{margin-bottom:.1em;}"
} ;

var notHorizontalProperties = function notHorizontalProperties() {
  return _ref2$g;
};
var dl = function dl(_ref4) {
  var horizontal = _ref4.horizontal,
      dense = _ref4.dense,
      props = _objectWithoutProperties__default["default"](_ref4, _excluded$1R);

  return /*#__PURE__*/react.css(horizontal ? horizontalProperties(_objectSpread$o({}, props)) : notHorizontalProperties(), ";margin-top:0;margin-bottom:0;>*{margin-bottom:", horizontal && dense ? 4 : 12, "px;}" + ("" ), "" );
};
var dt = function dt(_ref5) {
  var horizontal = _ref5.horizontal,
      theme = _ref5.theme;
      _objectWithoutProperties__default["default"](_ref5, _excluded2$d);

  return /*#__PURE__*/react.css("color:", theme.color400, ";margin-bottom :", horizontal ? 20 : 0, "px;word-break:break-word;&:last-of-type{margin-bottom:", horizontal ? 0 : '.1em', ";}" + ("" ), "" );
};

var _ref$v = {
  name: "1hxhtqb",
  styles: "margin-left:0;line-height:1.4em;word-break:break-word;&:last-of-type{margin-bottom:0;}"
} ;

var dd = function dd(_ref6) {
  _extends__default["default"]({}, _ref6);

  return _ref$v;
};

var _excluded$1Q = ["as", "breakpoint", "horizontal", "dense"],
    _excluded2$c = ["as"],
    _excluded3$5 = ["as"];
function Properties(_ref) {
  var _ref$as = _ref.as,
      Dl = _ref$as === void 0 ? 'dl' : _ref$as,
      breakpoint = _ref.breakpoint,
      horizontal = _ref.horizontal,
      _ref$dense = _ref.dense,
      dense = _ref$dense === void 0 ? false : _ref$dense,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1Q);

  var isBelow = useBelow(breakpoint);
  var theme = React.useContext(ThemeContext);
  return react.jsx(Dl, _extends__default["default"]({
    css: dl({
      theme: theme,
      horizontal: typeof horizontal !== 'undefined' ? horizontal : !isBelow,
      dense: dense
    })
  }, props));
}
function Term$1(_ref2) {
  var _ref2$as = _ref2.as,
      Dt = _ref2$as === void 0 ? 'dt' : _ref2$as,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded2$c);

  var theme = React.useContext(ThemeContext);
  return react.jsx(Dt, _extends__default["default"]({
    css: dt({
      theme: theme,
      props: props
    })
  }, props));
}
function Value$1(_ref3) {
  var _ref3$as = _ref3.as,
      Dd = _ref3$as === void 0 ? 'dd' : _ref3$as,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded3$5);

  var theme = React.useContext(ThemeContext);
  return react.jsx(Dd, _extends__default["default"]({
    css: dd({
      theme: theme
    })
  }, props));
}
Properties.Term = Term$1;
Properties.Value = Value$1;

var radio = function radio(props) {
  return /*#__PURE__*/react.css("position:relative;top:-0.09em;display:inline-block;line-height:1;white-space:nowrap;vertical-align:middle;outline:none;cursor:pointer;input{", transparentInputOverlay, ";}& input+span{position:relative;top:0;left:0;display:block;width:1em;height:1em;border:1px solid #d9d9d9;border-radius:100px;transition:all 0.1s;&:after{position:absolute;top:0px;left:0px;display:table;width:100%;height:100%;border:3px solid #1890ff;border-radius:100px;opacity:0;transition:all .2s cubic-bezier(.78,.14,.15,.86);content:' ';}}& input:checked+span{border-color:#1890ff;&:after{opacity:1;}}& input:focus+span{box-shadow:0 0 0 0.125em rgba(50, 115, 220, 0.25);}" + ("" ), "" );
};
var styles$3 = {
  radio: radio
};

var _excluded$1P = ["as", "className", "style"];
var Radio = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as,
      Span = _ref$as === void 0 ? 'span' : _ref$as,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1P);

  var theme = React.useContext(ThemeContext);

  var _getClasses = getClasses(theme.prefix, 'radio', {
    /*modifiers goes here*/
  }, className),
      classNames = _getClasses.classNames;

  return react.jsx(Span, _extends__default["default"]({
    style: style
  }, classNames, {
    css: styles$3.radio({
      theme: theme
    })
  }), react.jsx("input", _extends__default["default"]({
    type: "radio",
    ref: ref
  }, props)), react.jsx("span", null));
});
Radio.displayName = 'Radio';

var _excluded$1O = ["theme"];

var _ref$u = {
  name: "1gha2rb",
  styles: "position:fixed;bottom:0;top:0;right:0;max-width:100%;transform:translateX(100%);overflow:hidden;transition:transform 200ms ease-in-out;&[data-enter]{transform:translateX(0%);}&:focus{outline:none;}"
} ;

var drawer = function drawer(_ref4) {
  _extends__default["default"]({}, _ref4);

  return _ref$u;
};
var detailsBackdrop = function detailsBackdrop(_ref5) {
  var theme = _ref5.theme;
      _objectWithoutProperties__default["default"](_ref5, _excluded$1O);

  return /*#__PURE__*/react.css("position:fixed;bottom:0;top:0;right:0;left:0;background:", theme.darkTheme ? '#00000075' : '#00000050', ";z-index:", theme.drawerZIndex || 100, ";transition:opacity 50ms ease-in-out;opacity:0;&[data-enter]{opacity:1;}" + ("" ), "" );
};
var footerBar = function footerBar(_ref6) {
  var theme = _ref6.theme;
  return /*#__PURE__*/react.css("display:flex;justify-content:space-between;flex:0 0 auto;background:", theme.paperBackground500, ";border-top:1px solid ", theme.paperBorderColor, ";padding:8px 12px;" + ("" ), "" );
};
var footerItem = function footerItem(props) {
  return /*#__PURE__*/react.css("border:1px solid transparent;&:hover{border-color:#88888844;}&:active{background:#88888888;}", tooltip$1(props), ";" + ("" ), "" );
};

// https://github.com/react-icons/react-icons/issues/238
var clusterJson = {
  "tag": "svg",
  "attr": {
    "version": "1.1",
    "id": "Capa_1",
    "x": "0px",
    "y": "0px",
    "viewBox": "-202.4 314.1 200.8 201.2",
    "style": "enable-background:new -202.4 314.1 200.8 201.2;"
  },
  "child": [{
    "tag": "path",
    "attr": {
      "d": "M-35.7,469.5c8.6-10.4,14.7-22.9,17.7-36l14.6,3.3c-3.4,15.4-10.6,30-20.8,42.3L-35.7,469.5z M-40.5,334.9\n\tc-12.6-9.7-27.5-16.3-43-19.1l-2.7,14.8c13.2,2.4,25.9,8.1,36.6,16.3L-40.5,334.9z M-198.2,385.6l14.4,4.4\n\tc3.9-12.9,10.9-24.8,20.3-34.5l-10.8-10.4C-185.3,356.4-193.6,370.5-198.2,385.6z M-168.8,490c11.8,10.6,26.2,18.3,41.5,22.3\n\tl3.8-14.5c-13-3.4-25.2-10-35.3-19L-168.8,490z M-189.7,464l13.1-7.3c-6.6-11.7-10.3-25.1-10.8-38.6l-15,0.6\n\tC-201.9,434.5-197.4,450.2-189.7,464z M-140.7,338.5c12.1-6.2,25.2-9.4,39-9.4v-15c-15.9,0-31.7,3.8-45.8,11L-140.7,338.5z\n\t M-1.7,403.5c-1.8-15.7-7.3-31-16.1-44.3l-12.5,8.3c7.5,11.2,12.2,24.3,13.7,37.6L-1.7,403.5z M-94.2,515.3\n\tc15.8-1.2,31.3-6.2,44.8-14.4l-7.8-12.8c-11.5,7-24.7,11.3-38.1,12.3L-94.2,515.3z"
    },
    "child": []
  }, {
    "tag": "g",
    "attr": {},
    "child": [{
      "tag": "circle",
      "attr": {
        "cx": "-119.9",
        "cy": "451.9",
        "r": "27"
      },
      "child": []
    }, {
      "tag": "circle",
      "attr": {
        "cx": "-84.2",
        "cy": "377.5",
        "r": "27"
      },
      "child": []
    }]
  }]
};
var cluster = reactIcons.GenIcon(clusterJson);
var ClusterIcon = function ClusterIcon(props) {
  return cluster(props);
};
var gbifLogoJson = {
  "tag": "svg",
  "attr": {
    "viewBox": "90 239.1 539.7 523.9"
  },
  "child": [{
    "tag": "path",
    "attr": {
      "d": "M325.5,495.4c0-89.7,43.8-167.4,174.2-167.4C499.6,417.9,440.5,495.4,325.5,495.4"
    },
    "child": []
  }, {
    "tag": "path",
    "attr": {
      "d": "M534.3,731c24.4,0,43.2-3.5,62.4-10.5c0-71-42.4-121.8-117.2-158.4c-57.2-28.7-127.7-43.6-192.1-43.6\n\tc28.2-84.6,7.6-189.7-19.7-247.4c-30.3,60.4-49.2,164-20.1,248.3c-57.1,4.2-102.4,29.1-121.6,61.9c-1.4,2.5-4.4,7.8-2.6,8.8\n\tc1.4,0.7,3.6-1.5,4.9-2.7c20.6-19.1,47.9-28.4,74.2-28.4c60.7,0,103.4,50.3,133.7,80.5C401.3,704.3,464.8,731.2,534.3,731"
    },
    "child": []
  }]
};
var gbifLogo = reactIcons.GenIcon(gbifLogoJson);
var GbifLogoIcon = function GbifLogoIcon(props) {
  return gbifLogo(props);
};
var sampleEventJson = {
  "tag": "svg",
  "attr": {
    "version": "1.1",
    "id": "Layer_1",
    "x": "0px",
    "y": "0px",
    "viewBox": "0 0 35.7 35.7",
    "style": "enable-background:new 0 0 35.7 35.7;"
  },
  "child": [{
    "tag": "circle",
    "attr": {
      "cx": "17.6",
      "cy": "17.7",
      "r": "4.2"
    },
    "child": []
  }, {
    "tag": "path",
    "attr": {
      "d": "M3.4,3.6v28.3h28.3V3.6H3.4z M27.6,27.8H7.5V7.7h20.1V27.8z"
    },
    "child": []
  }]
};
reactIcons.GenIcon(sampleEventJson);

var _excluded$1N = ["dialog", "nextItem", "previousItem", "href", "children"];
function DetailsDrawer(_ref) {
  var dialog = _ref.dialog,
      nextItem = _ref.nextItem,
      previousItem = _ref.previousItem,
      href = _ref.href,
      children = _ref.children;
      _objectWithoutProperties__default["default"](_ref, _excluded$1N);

  var theme = React.useContext(ThemeContext);
  React.useEffect(function () {
    function handleKeypress(e) {
      if (!dialog.visible) return;

      switch (e.which) {
        case keyCodes.LEFT_ARROW:
          previousItem ? previousItem() : null;
          return;

        case keyCodes.RIGHT_ARROW:
          nextItem ? nextItem() : null;
          return;

        default:
          return;
      }
    }

    if (document) {
      document.addEventListener("keydown", handleKeypress, false);
    }

    return function cleanup() {
      if (document) document.removeEventListener("keydown", handleKeypress, false);
    };
  }, [nextItem, previousItem, dialog.visible]);
  return react.jsx(React__default["default"].Fragment, null, react.jsx(Dialog.DialogBackdrop, _extends__default["default"]({}, dialog, {
    css: detailsBackdrop({
      theme: theme
    })
  }), react.jsx(Dialog.Dialog, _extends__default["default"]({}, dialog, {
    "aria-label": "Details",
    css: drawer()
  }), dialog.visible && react.jsx(Root, {
    style: {
      height: '100%',
      display: 'flex',
      flexDirection: 'column'
    }
  }, react.jsx("div", {
    style: {
      flex: '1 1 auto',
      overflow: 'auto'
    }
  }, children), (previousItem || nextItem) && react.jsx("div", {
    css: footerBar({
      theme: theme
    })
  }, previousItem && react.jsx(Button, {
    css: footerItem({
      theme: theme
    }),
    appearance: "text",
    direction: "right",
    tip: "previous (left arrow)",
    onClick: previousItem
  }, react.jsx(md.MdChevronLeft, null)), href && react.jsx(Button, {
    as: "a",
    target: "_blank",
    href: href,
    css: footerItem({
      theme: theme
    }),
    appearance: "text",
    direction: "top",
    tip: "View on GBIF.org"
  }, react.jsx(GbifLogoIcon, null)), nextItem && react.jsx(Button, {
    css: footerItem({
      theme: theme
    }),
    appearance: "text",
    direction: "left",
    tip: "next (right arrow)",
    onClick: nextItem
  }, react.jsx(md.MdChevronRight, null)))))));
}

// import { css } from '@emotion/react';
var classification = classification$1;

var _excluded$1M = ["as", "className"];
function Classification(_ref) {
  var _ref$as = _ref.as,
      Div = _ref$as === void 0 ? 'div' : _ref$as,
      className = _ref.className,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1M);

  var theme = React.useContext(ThemeContext);

  var _getClasses = getClasses(theme.prefix, 'classification', {
    /*modifiers goes here*/
  }, className),
      classNames = _getClasses.classNames;

  return react.jsx(Div, _extends__default["default"]({
    className: classNames,
    css: classification({
      theme: theme
    })
  }, props));
}

var _excluded$1L = ["as", "taxon", "rank", "showUnknownRanks"];
function MajorRanks(_ref) {
  _ref.as;
      var taxon = _ref.taxon,
      rank = _ref.rank,
      showUnknownRanks = _ref.showUnknownRanks,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1L);

  React.useContext(ThemeContext);
  var ranks = ['kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species'];
  var taxonRank = (rank || taxon.rank).toUpperCase();
  return react.jsx(Classification, _extends__default["default"]({
    as: "span"
  }, props), ranks.map(function (rank) {
    if (taxonRank !== rank.toUpperCase()) {
      if (taxon[rank]) return react.jsx("span", {
        key: rank
      }, taxon[rank]);
      if (showUnknownRanks) return react.jsx("span", {
        key: rank,
        className: "gbif-classification-unknown"
      }, "Unknown ", rank);
    }

    return null;
  }));
}

var _ref$t = {
  name: "1o39hrb",
  styles: "display:flex;align-items:center;flex:0 0 auto;align-items:flex-start;svg{flex:0 0 auto;height:1.2em;}>span,>div{margin:0 0.75em;}"
} ;

var iconFeature = function iconFeature(_ref2) {
  _extends__default["default"]({}, _ref2);

  return _ref$t;
};
var iconFeatures = function iconFeatures(_ref4) {
  var props = _extends__default["default"]({}, _ref4);

  return /*#__PURE__*/react.css("display:flex;flex-wrap:wrap;align-items:center;margin:-.25em -1em;div{", iconFeature(props), " margin:.25em 1em;}" + ("" ), "" );
};

var _excluded$1K = ["isSequenced", "isTreament", "isSpecimen", "isClustered", "isSamplingEvent", "formattedCoordinates", "eventDate", "stillImageCount", "movingImageCount", "soundCount", "typeStatus", "basisOfRecord", "countryCode", "locality", "issueCount", "children", "iconsOnly"];
function IconFeatures(_ref) {
  var isSequenced = _ref.isSequenced,
      isTreament = _ref.isTreament,
      isSpecimen = _ref.isSpecimen,
      isClustered = _ref.isClustered,
      isSamplingEvent = _ref.isSamplingEvent,
      formattedCoordinates = _ref.formattedCoordinates,
      eventDate = _ref.eventDate,
      stillImageCount = _ref.stillImageCount,
      movingImageCount = _ref.movingImageCount,
      soundCount = _ref.soundCount,
      typeStatusString = _ref.typeStatus,
      basisOfRecord = _ref.basisOfRecord,
      countryCode = _ref.countryCode,
      locality = _ref.locality,
      issueCount = _ref.issueCount,
      children = _ref.children,
      iconsOnly = _ref.iconsOnly,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1K);

  var theme = React.useContext(ThemeContext);
  var typeStyle;
  var typeStatus = typeStatusString === 'NOTATYPE' ? null : typeStatusString;

  if (typeStatus) {
    // Someone will ask at some point. 
    // https://bugguide.net/node/view/359346
    // I've added SYNTYPE on the level of PARALECTOTYPE based on a comment in the link
    // Looking at shared images of types, the majority use nothing or red for any type.
    // But yellow is often used for paratypes though (e.g. AntWeb does so a lot)
    // how about 'EPITYPE', 'ISOTYPE', 'SYNTYPE' they seem to be on the level of paratype?
    if (['HOLOTYPE', 'LECTOTYPE', 'NEOTYPE'].includes(typeStatus)) typeStyle = {
      background: '#e2614a',
      color: 'white',
      padding: '0 8px',
      borderRadius: 2
    };
    if (['PARATYPE', 'PARALECTOTYPE', 'SYNTYPE'].includes(typeStatus)) typeStyle = {
      background: '#f1eb0b',
      padding: '0 8px',
      borderRadius: 2
    };
    if (['ALLOTYPE'].includes(typeStatus)) typeStyle = {
      background: '#7edaff',
      color: 'white',
      padding: '0 8px',
      borderRadius: 2
    };
  }

  return react.jsx("div", _extends__default["default"]({
    css: iconFeatures({
      theme: theme
    })
  }, props), children && react.jsx("div", null, children), eventDate && react.jsx("div", null, react.jsx(md.MdEvent, null), react.jsx("span", null, react.jsx(reactIntl.FormattedDate, {
    value: eventDate,
    year: "numeric",
    month: "long",
    day: "2-digit"
  }))), formattedCoordinates && react.jsx("div", null, react.jsx(md.MdLocationOn, null), !iconsOnly && react.jsx("span", null, formattedCoordinates)), countryCode && react.jsx("div", null, react.jsx(fa.FaGlobeAfrica, null), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "enums.countryCode.".concat(countryCode)
  }), locality)), isSpecimen && react.jsx("div", null, react.jsx(md.MdLabel, null), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "enums.basisOfRecord.".concat(basisOfRecord)
  }))), stillImageCount > 0 && react.jsx("div", null, stillImageCount > 1 ? react.jsx(md.MdPhotoLibrary, null) : react.jsx(md.MdImage, null), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "counts.nImages",
    values: {
      total: stillImageCount
    }
  }))), movingImageCount > 0 && react.jsx("div", null, react.jsx(md.MdVideocam, null), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "counts.nVideos",
    values: {
      total: movingImageCount
    }
  }))), soundCount > 0 && react.jsx("div", null, react.jsx(ai.AiFillAudio, null), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "counts.nAudioFiles",
    values: {
      total: soundCount
    }
  }))), isSequenced && react.jsx("div", null, react.jsx(gi.GiDna1, null), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.features.isSequenced"
  }))), isTreament && react.jsx("div", null, react.jsx(md.MdInsertDriveFile, null), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.features.isTreatment"
  }))), typeStatus && react.jsx("div", null, react.jsx(md.MdStar, null), !iconsOnly && react.jsx("span", {
    style: typeStyle
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "enums.typeStatus.".concat(typeStatus)
  }))), isSamplingEvent && react.jsx("div", null, react.jsx(md.MdGridOn, null), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.features.isSamplingEvent"
  }))), isClustered && react.jsx("div", null, react.jsx(ClusterIcon, null), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.features.isClustered"
  }))), issueCount > 0 && react.jsx("div", null, react.jsx(bs.BsLightningFill, {
    style: {
      color: 'orange'
    }
  }), !iconsOnly && react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "counts.nQualityFlags",
    values: {
      total: issueCount
    }
  }))));
}

var identifierBadge = {
  name: "16w7lvv",
  styles: "display:inline-block;font-size:0.85em;&:hover{text-decoration:none;>span:first-of-type,>div:first-of-type{background-color:var(--primary700);}}>*{padding:0 5px;display:inline-block;border:1px solid #dbe3e7;}>span:first-of-type,>div:first-of-type{transition:all .3s ease;background-color:var(--primary500);border-color:var(--primary600);padding:0 4px;border-radius:var(--borderRadiusPx) 0 0 var(--borderRadiusPx);color:#fff;border-right-width:0;}>*:last-child{padding:0 7px;border-radius:0 var(--borderRadiusPx) var(--borderRadiusPx) 0;border-left-width:0;color:var(--color);text-decoration:none;}"
} ;

var _excluded$1J = ["as", "className"],
    _excluded2$b = ["id"];
var IdentifierBadge = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var _ref$as = _ref.as,
      Div = _ref$as === void 0 ? 'div' : _ref$as,
      className = _ref.className,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1J);

  var theme = React.useContext(ThemeContext);

  var _getClasses = getClasses(theme.prefix, 'identifierBadge', {
    /*modifiers goes here*/
  }, className),
      classNames = _getClasses.classNames;

  return react.jsx(Div, _extends__default["default"]({
    ref: ref
  }, classNames, {
    css: identifierBadge
  }, props));
});
function Doi(_ref2) {
  var _ref2$id = _ref2.id,
      id = _ref2$id === void 0 ? '' : _ref2$id,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded2$b);

  var sanitizedId = id.replace(/^(.*doi.org\/)?(doi:)?(10\.)/, '10.');
  return react.jsx(IdentifierBadge, _extends__default["default"]({
    as: "a",
    href: "https://doi.org/".concat(sanitizedId)
  }, props), react.jsx("span", null, "DOI"), react.jsx("span", null, sanitizedId));
}

var _ref$s = {
  name: "1qel8bw",
  styles: "text-decoration:none;>img{margin-right:4px;vertical-align:middle;}"
} ;

var orcid = function orcid() {
  return _ref$s;
};

var Orcid = (function (_ref) {
  var href = _ref.href;
  return react.jsx("a", {
    dir: "ltr",
    href: href,
    css: orcid()
  }, react.jsx("img", {
    src: "https://www.gbif.org/img/orcid_16x16.png"
  }), href);
});

var _ref$r = {
  name: "1f28o8h",
  styles: "font-size:12px;text-decoration:none;display:inline-block;>span{border:1px solid #dbe3e7;}>span:first-of-type{transition:all 300ms ease;background:var(--primary500);padding:0 4px;border-radius:5px 0 0 5px;color:white;border-right-width:0;border-color:#218084;}>span:last-of-type{color:#333;background:white;text-decoration:none;padding:0 7px;border-radius:0 5px 5px 0;border-left-width:0;}"
} ;

var lsid = function lsid() {
  return _ref$r;
};

var Lsid = (function (_ref) {
  var identifier = _ref.identifier;
  return react.jsx("a", {
    dir: "ltr",
    href: "http://lsid.info/".concat(identifier),
    css: lsid()
  }, react.jsx("span", null, "URN:LSID:"), react.jsx("span", null, identifier.replace('urn:lsid:', '')));
});

/**
 * Widget for boolean value representation with color indicator and Yes/No text transcription
 * @param value
 * @returns {*}
 * @constructor
 */

var BooleanValue = function BooleanValue(_ref) {
  var value = _ref.value;
  return value === false || value === true ? value ? "Yes" : "No" : null;
};

var _ref$q = {
  name: "dbpu1g",
  styles: "a{text-decoration:none;}"
} ;

var content = function content() {
  return _ref$q;
};

var _excluded$1I = ["text"];
var autolinker = new Autolinker__default["default"]({
  truncate: {
    length: 64,
    location: 'middle'
  },
  stripPrefix: false,
  email: false,
  phone: false
});

var getLsid = function getLsid(text) {
  if (typeof text !== "string" || /\s/.test(text.trim())) {
    return null;
  } else {
    var trimmed = text.trim();

    if (trimmed.startsWith('urn:lsid:')) {
      return trimmed;
    } else {
      return null;
    }
  }
};

var getOrcid = function getOrcid(text) {
  if (typeof text !== "string" || /\s/.test(text.trim())) {
    return null;
  } else {
    var trimmed = text.trim();

    if (trimmed.startsWith('orcid.org/')) {
      return 'https://' + trimmed;
    } else if (trimmed.startsWith('https://orcid.org/') || trimmed.startsWith('http://orcid.org/')) {
      return trimmed;
    } else {
      return null;
    }
  }
};

var getDoi = function getDoi(text) {
  if (typeof text !== "string" || /\s/.test(text.trim())) {
    return null;
  } else {
    var _text$trim$match;

    var doi = (_text$trim$match = text.trim().match(doiRegex__default["default"]())) === null || _text$trim$match === void 0 ? void 0 : _text$trim$match[0];

    if (doi) {
      return 'https://doi.org/' + doi;
    } else {
      return null;
    }
  }
};

var HyperText = function HyperText(_ref) {
  var text = _ref.text,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1I);

  if (text === false || text === true) {
    return react.jsx(BooleanValue, _extends__default["default"]({
      value: text
    }, props));
  }

  if (typeof text === "undefined") {
    return null;
  }

  if (typeof text !== "string") {
    return react.jsx("span", props, text);
  }

  var sanitized = DOMPurify__default["default"].sanitize(text);
  var doi = getDoi(sanitized);

  if (doi) {
    return react.jsx(Doi, _extends__default["default"]({
      id: doi
    }, props));
  }

  var orcid = getOrcid(sanitized);

  if (orcid) {
    return react.jsx(Orcid, _extends__default["default"]({
      href: orcid
    }, props));
  }

  var lsid = getLsid(sanitized);

  if (lsid) {
    return react.jsx(Lsid, _extends__default["default"]({
      identifier: lsid
    }, props));
  }

  return react.jsx("div", _extends__default["default"]({
    css: content(),
    dangerouslySetInnerHTML: {
      __html: autolinker.link(sanitized)
    }
  }, props));
};

var _ref$p = {
  name: "14xqvxi",
  styles: "background:#eee;border-radius:2px;height:4px;>div{transition:width 300ms;height:4px;border-radius:2px;background:#68daa8;max-width:100%;}"
} ;

var progress$1 = function progress(_ref2) {
  _extends__default["default"]({}, _ref2);

  return _ref$p;
};
var styles$2 = {
  progress: progress$1
};

var _excluded$1H = ["className", "percent"];
function Progress(_ref) {
  var className = _ref.className,
      percent = _ref.percent,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1H);

  var theme = React.useContext(ThemeContext);

  getClasses(theme.prefix, 'progress', {
    /*modifiers goes here*/
  }, className);

  return react.jsx("div", _extends__default["default"]({
    css: styles$2.progress({
      theme: theme
    })
  }, props), react.jsx("div", {
    style: {
      width: "".concat(percent, "%")
    }
  }));
}

var _excluded$1G = ["type"];

var _ref8$3 = {
  name: "1k5rxc7",
  styles: "margin:-2px;display:inline-block;>*{margin:2px;display:inline-block;}"
} ;

var tags = function tags(_ref9) {
  _extends__default["default"]({}, _ref9);

  return _ref8$3;
};
var tag = function tag(_ref10) {
  var type = _ref10.type,
      props = _objectWithoutProperties__default["default"](_ref10, _excluded$1G);

  return /*#__PURE__*/react.css("align-items:center;background-color:#f5f5f5;border-radius:4px;color:#4a4a4a;display:inline-flex;font-size:.85em;justify-content:center;line-height:1.5;padding-left:.75em;padding-right:.75em;white-space:nowrap;", types[type] ? types[type]({
    props: props
  }) : null, ";" + ("" ), "" );
};

var _ref$o = {
  name: "1ip6jqu",
  styles: "background-color:#363636;color:#fff"
} ;

var _ref2$f = {
  name: "1fdzt1u",
  styles: "background-color:#f5f5f5;color:rgba(0,0,0,.7)"
} ;

var _ref3$a = {
  name: "ubz1br",
  styles: "background-color:#fff;color:rgba(0,0,0,.7)"
} ;

var _ref4$6 = {
  name: "o79qdv",
  styles: "background-color:#48c774;color:#ffffff"
} ;

var _ref5$5 = {
  name: "1n1me5v",
  styles: "background-color:#3298dc;color:#fff"
} ;

var _ref6$6 = {
  name: "1mnj8tj",
  styles: "background-color:#ffbf4b;color:#5f4515"
} ;

var _ref7$4 = {
  name: "ye6ucc",
  styles: "background-color:#ff6c4b;color:#fff"
} ;

var types = {
  error: function error(props) {
    return _ref7$4;
  },
  warning: function warning(props) {
    return _ref6$6;
  },
  info: function info(props) {
    return _ref5$5;
  },
  success: function success(props) {
    return _ref4$6;
  },
  white: function white(props) {
    return _ref3$a;
  },
  light: function light(props) {
    return _ref2$f;
  },
  dark: function dark(props) {
    return _ref$o;
  }
};

var _excluded$1F = ["as", "className"],
    _excluded2$a = ["as", "type", "outline", "className"];
function Tags(_ref) {
  var _ref$as = _ref.as,
      Div = _ref$as === void 0 ? 'div' : _ref$as,
      className = _ref.className,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1F);

  var theme = React.useContext(ThemeContext);

  var _getClasses = getClasses(theme.prefix, 'tags', {
    /*modifiers goes here*/
  }, className),
      classNames = _getClasses.classNames;

  return react.jsx(Div, _extends__default["default"]({
    css: tags({
      theme: theme
    })
  }, classNames, props));
}
function Tag(_ref2) {
  var _ref2$as = _ref2.as,
      Span = _ref2$as === void 0 ? 'span' : _ref2$as,
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? 'light' : _ref2$type,
      _ref2$outline = _ref2.outline,
      outline = _ref2$outline === void 0 ? false : _ref2$outline,
      className = _ref2.className,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded2$a);

  var theme = React.useContext(ThemeContext);

  var _getClasses2 = getClasses(theme.prefix, 'tag', {
    type: type,
    outline: outline
  }, className),
      classNames = _getClasses2.classNames;

  return react.jsx(Span, _extends__default["default"]({
    css: tag({
      theme: theme,
      type: type,
      outline: outline
    })
  }, classNames, props));
}

var _excluded$1E = ["gadm", "className"];
function GadmClassification(_ref) {
  var gadm = _ref.gadm,
      className = _ref.className,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1E);

  var theme = React.useContext(ThemeContext);
  if (!gadm) return react.jsx("span", null, "Unknown");

  var _getClasses = getClasses(theme.prefix, 'gadmClassification', {
    /*modifiers goes here*/
  }, className),
      classNames = _getClasses.classNames;

  return react.jsx(Classification, _extends__default["default"]({}, classNames, props), [0, 1, 2, 3, 4].map(function (n) {
    var level = gadm["level".concat(n)];
    return level ? react.jsx("span", {
      key: n
    }, level.name) : null;
  }));
}

react.jsx(Classification, null, react.jsx("span", null, "higher"), react.jsx("span", null, "middle"), react.jsx("span", null, "lower"));

var _ref$n = {
  name: "16qcs66",
  styles: "display:flex;justify-content:start;align-items:center;white-space:nowrap"
} ;

var eyebrow = function eyebrow(_ref2) {
  _extends__default["default"]({}, _ref2);

  return _ref$n;
};
var suffix = {
  name: "nq5m8v",
  styles: "margin-left:6px;padding-left:8px"
} ;

var _excluded$1D = ["as", "prefix", "suffix", "className"];
function Eyebrow(_ref) {
  var _ref$as = _ref.as,
      Div = _ref$as === void 0 ? 'div' : _ref$as,
      prefix = _ref.prefix,
      suffix$1 = _ref.suffix,
      className = _ref.className,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1D);

  var theme = React.useContext(ThemeContext);

  getClasses(theme.prefix, 'eyebrow', {
    /*modifiers goes here*/
  }, className);

  return react.jsx(Div, _extends__default["default"]({
    css: eyebrow({
      theme: theme
    })
  }, props), react.jsx("div", null, prefix), suffix$1 && react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    css: suffix
  }, suffix$1)));
}

var jazzIcon = function jazzIcon(_ref) {
  _extends__default["default"]({}, _ref);

  return /*#__PURE__*/react.css("" , "" );
};
var styles$1 = {
  jazzIcon: jazzIcon
};

var _excluded$1C = ["className", "children", "seed"];
function JazzIcon(_ref) {
  var className = _ref.className;
      _ref.children;
      var seed = _ref.seed,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1C);

  var theme = React.useContext(ThemeContext);

  getClasses(theme.prefix, 'jazzIcon', {
    /*modifiers goes here*/
  }, className);

  return react.jsx("div", _extends__default["default"]({
    css: styles$1.jazzIcon({
      theme: theme
    })
  }, props, {
    dangerouslySetInnerHTML: {
      __html: getJazzicon(seed)
    }
  }));
}

//actual used
function getJazzicon(seed, diameter) {
  diameter = diameter || 100;
  seed = seed || Math.random() * Number.MAX_SAFE_INTEGER;
  if (typeof seed !== 'number') seed = hash(seed);
  var colors = ['#01888C', // teal
  '#FC7500', // bright orange
  '#034F5D', // dark teal
  '#F73F01', // orangered
  '#FC1960', // magenta
  '#C7144C', // raspberry
  '#F3C100', // goldenrod
  '#1598F2', // lightning blue
  '#2465E1', // sail blue
  '#F19E02' // gold
  ];
  var random = mulberry32(seed);

  function getRectangle(remainingColors, total, i) {
    var center = diameter / 2;
    var firstRot = random();
    var angle = Math.PI * 2 * firstRot;
    var velocity = diameter / total * random() + i * diameter / total;
    var tx = Math.cos(angle) * velocity;
    var ty = Math.sin(angle) * velocity;
    var translate = 'translate(' + tx + ' ' + ty + ')'; // Third random is a shape rotation on top of all of that.

    var secondRot = random();
    var rot = firstRot * 360 + secondRot * 180;
    var rotate = 'rotate(' + rot.toFixed(1) + ' ' + center + ' ' + center + ')';
    var transform = translate + ' ' + rotate;
    var fill = genColor(remainingColors, random);
    return "<rect x=\"0\" y=\"0\" width=\"".concat(diameter, "\" height=\"").concat(diameter, "\" transform=\"").concat(transform, "\" fill=\"").concat(fill, "\"></rect>");
  }

  var jazzicon = "<div style=\"border-radius: 100%; overflow: hidden;width: ".concat(diameter, "px;height: ").concat(diameter, "px;display: inline-block;background: ").concat(genColor(colors, random), ";\">\n\t\t<svg x=\"0\" y=\"0\" viewBox=\"0 0 ").concat(diameter, " ").concat(diameter, "\">\n\t\t\t").concat(getRectangle(colors, 3, 0), "\n\t\t\t").concat(getRectangle(colors, 3, 1), "\n\t\t\t").concat(getRectangle(colors, 3, 2), "\n\t\t</svg>\n\t</div>");
  return jazzicon;
} //a hash value based on the username could be used as the seed value


var hash = function hash(str) {
  var hash = 0,
      i,
      chr;
  if (str.length === 0) return hash;

  for (i = 0; i < str.length; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0; // Convert to 32bit integer
  }

  return hash;
};

function mulberry32(a) {
  return function () {
    var t = a += 0x6D2B79F5;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  };
}

var genColor = function genColor(colors, random) {
  var idx = Math.floor(colors.length * random());
  var color = colors.splice(idx, 1)[0];
  return color;
};

var _excluded$1B = ["as"],
    _excluded2$9 = ["as"];
var Prose = function Prose(_ref5) {
  var _ref5$as = _ref5.as,
      Div = _ref5$as === void 0 ? 'div' : _ref5$as,
      props = _objectWithoutProperties__default["default"](_ref5, _excluded$1B);

  var theme = React.useContext(ThemeContext);
  return react.jsx(Div, _extends__default["default"]({}, props, {
    css: prose({
      theme: theme
    })
  }));
};

function getTag$6(tagName, styleFn) {
  return function (_ref6) {
    var _ref6$as = _ref6.as,
        Tag = _ref6$as === void 0 ? tagName : _ref6$as,
        props = _objectWithoutProperties__default["default"](_ref6, _excluded2$9);

    var theme = React.useContext(ThemeContext);
    return react.jsx(Tag, _extends__default["default"]({}, props, {
      css: styleFn(theme)
    }));
  };
}

var _ref4$5 = {
  name: "mpobiz",
  styles: "div>p:first-child{margin-top:0;}ol{counter-reset:listitem;list-style:none;}ol>li{position:relative;margin:4px 0;padding-left:32px;}ol>li:before{counter-increment:listitem;content:counter(listitem);background:#e3e8ee;color:#697386;font-size:12px;font-weight:500;line-height:10px;text-align:center;padding:5px 0;height:20px;width:20px;border-radius:10px;position:absolute;left:0;}"
} ;

var ol = function ol(theme) {
  return _ref4$5;
};

var _ref3$9 = {
  name: "197zp3p",
  styles: "font-size:10px;line-height:18px;text-transform:uppercase;letter-spacing:1.2px;font-weight:600"
} ;

var h6 = function h6(theme) {
  return _ref3$9;
};

var _ref2$e = {
  name: "1ijbcz8",
  styles: "font-size:12px;line-height:24px;text-transform:uppercase;letter-spacing:1px;font-weight:500;color:#32536a"
} ;

var h5 = function h5(theme) {
  return _ref2$e;
};

var _ref$m = {
  name: "1dryz4b",
  styles: "font-size:18px;line-height:24px"
} ;

var h4 = function h4(theme) {
  return _ref$m;
};
var h3 = function h3(theme) {
  return /*#__PURE__*/react.css("font-size:20px;line-height:24px;font-family:", theme.headerFontFamily, ";" + ("" ), "" );
};
var h2 = function h2(theme) {
  return /*#__PURE__*/react.css("font-size:28px;line-height:36px;font-family:", theme.headerFontFamily, ";" + ("" ), "" );
};
var h1 = function h1(theme) {
  return /*#__PURE__*/react.css("font-size:36px;line-height:48px;font-family:", theme.headerFontFamily, ";" + ("" ), "" );
};
var a = function a(theme) {
  return /*#__PURE__*/react.css("color:", theme.linkColor, ";" + ("" ), "" );
};
var prose = function prose(_ref7) {
  var _ref7$theme = _ref7.theme,
      theme = _ref7$theme === void 0 ? {} : _ref7$theme;
  return /*#__PURE__*/react.css("-webkit-font-smoothing:antialiased;line-height:1.3em;h1,h2,h3,h4,h5,h6{font-weight:500;}h1{", h1(theme), ";}h2{", h2(theme), ";}h3{", h3(theme), ";}h4{", h4(), ";}h5{", h5(), ";}h6{", h6(), ";}", ol(), ";ul{padding-inline-start:1em;li{margin-bottom:.5em;}}p{margin-bottom:8px;}" + ("" ), "" );
};
Prose.H1 = getTag$6('h1', h1);
Prose.H2 = getTag$6('h2', h2);
Prose.H3 = getTag$6('h3', h3);
Prose.A = getTag$6('a', a);
Prose.css = {
  a: a,
  h1: h1,
  h2: h2,
  h3: h3,
  h4: h4,
  h5: h5
};

var _ref$l = {
  name: "1g34e2g",
  styles: "padding:8px 12px;line-height:1em;display:block;color:inherit;width:100%;text-align:left;text-decoration:none;&.isActive{background:#e0e7ee;font-weight:500;}"
} ;

var navItem$1 = function navItem(_ref2) {
  _extends__default["default"]({}, _ref2);

  return _ref$l;
};

var lodash = {exports: {}};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

(function (module, exports) {
(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined$1;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.21';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function',
	      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading whitespace. */
	  var reTrimStart = /^\s+/;

	  /** Used to match a single whitespace character. */
	  var reWhitespace = /\s/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /**
	   * Used to validate the `validate` option in `_.template` variable.
	   *
	   * Forbids characters which could potentially change the meaning of the function argument definition:
	   * - "()," (modification of function parameters)
	   * - "=" (default value)
	   * - "[]{}" (destructuring of function parameters)
	   * - "/" (beginning of a comment)
	   * - whitespace
	   */
	  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports = exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      // Use `util.types` for Node.js 10+.
	      var types = freeModule && freeModule.require && freeModule.require('util').types;

	      if (types) {
	        return types;
	      }

	      // Legacy `process.binding('util')` for Node.js < 10.
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined$1) {
	        result = result === undefined$1 ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.trim`.
	   *
	   * @private
	   * @param {string} string The string to trim.
	   * @returns {string} Returns the trimmed string.
	   */
	  function baseTrim(string) {
	    return string
	      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	      : string;
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined$1 : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedEndIndex(string) {
	    var index = string.length;

	    while (index-- && reWhitespace.test(string.charAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined$1,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
	        symIterator = Symbol ? Symbol.iterator : undefined$1,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined$1;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined$1;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined$1 : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined$1 : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined$1 && !eq(object[key], value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined$1 : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined$1) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined$1) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined$1) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (isSet(value)) {
	        value.forEach(function(subValue) {
	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	        });
	      } else if (isMap(value)) {
	        value.forEach(function(subValue, key) {
	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });
	      }

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined$1 : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined$1
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined$1;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined$1 ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined$1;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined$1 : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);

	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;

	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined$1 && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined$1
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined$1 && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        stack || (stack = new Stack);
	        if (isObject(srcValue)) {
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	            : undefined$1;

	          if (newValue === undefined$1) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = safeGet(object, key),
	          srcValue = safeGet(source, key),
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined$1;

	      var isCommon = newValue === undefined$1;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || isFunction(objValue)) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined$1;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      if (iteratees.length) {
	        iteratees = arrayMap(iteratees, function(iteratee) {
	          if (isArray(iteratee)) {
	            return function(value) {
	              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
	            }
	          }
	          return iteratee;
	        });
	      } else {
	        iteratees = [identity];
	      }

	      var index = -1;
	      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	          return object;
	        }

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
	          if (newValue === undefined$1) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      var low = 0,
	          high = array == null ? 0 : array.length;
	      if (high === 0) {
	        return 0;
	      }

	      value = iteratee(value);
	      var valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined$1;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined$1,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined$1;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined$1 ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined$1,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined$1,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined$1;

	        if (newValue === undefined$1) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined$1,
	            guard = length > 2 ? sources[2] : undefined$1;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined$1;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined$1 : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined$1;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
	            args, holders, undefined$1, undefined$1, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined$1 : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined$1 && other === undefined$1) {
	          return defaultValue;
	        }
	        if (value !== undefined$1) {
	          result = value;
	        }
	        if (other !== undefined$1) {
	          if (result === undefined$1) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined$1;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined$1) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined$1,
	          newHoldersRight = isCurry ? undefined$1 : holders,
	          newPartials = isCurry ? partials : undefined$1,
	          newPartialsRight = isCurry ? undefined$1 : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined$1, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision && nativeIsFinite(number)) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined$1;
	      }
	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined$1 ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined$1;
	      }
	      var data = isBindKey ? undefined$1 : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined$1
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined$1, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined$1 ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined$1 : value;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Check that cyclic values are equal.
	      var arrStacked = stack.get(array);
	      var othStacked = stack.get(other);
	      if (arrStacked && othStacked) {
	        return arrStacked == other && othStacked == array;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined$1) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Check that cyclic values are equal.
	      var objStacked = stack.get(object);
	      var othStacked = stack.get(other);
	      if (objStacked && othStacked) {
	        return objStacked == other && othStacked == object;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined$1
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined$1, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined$1;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined$1;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined$1,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return new Ctor;

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return new Ctor;

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      var type = typeof value;
	      length = length == null ? MAX_SAFE_INTEGER : length;

	      return !!length &&
	        (type == 'number' ||
	          (type != 'symbol' && reIsUint.test(value))) &&
	            (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined$1 || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
	      }
	      return array;
	    }

	    /**
	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to get.
	     * @returns {*} Returns the property value.
	     */
	    function safeGet(object, key) {
	      if (key === 'constructor' && typeof object[key] === 'function') {
	        return;
	      }

	      if (key == '__proto__') {
	        return;
	      }

	      return object[key];
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined$1, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined$1 ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (string.charCodeAt(0) === 46 /* . */) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, subString) {
	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined$1;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined$1;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined$1;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined$1, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined$1 ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined$1, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined$1
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined$1);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined$1) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined$1 : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined$1;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined$1
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     *
	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
	     * // => objects for ['fred', 'barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined$1 : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 30 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined$1 : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined$1;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined$1;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            timeWaiting = wait - timeSinceLastCall;

	        return maxing
	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	          : timeWaiting;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined$1;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined$1;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined$1) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
	      }

	      function flush() {
	        return timerId === undefined$1 ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined$1) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            clearTimeout(timerId);
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined$1) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined$1 ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      var result = customizer ? customizer(value, other) : undefined$1;
	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined$1;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = baseTrim(value);
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(object, sources) {
	      object = Object(object);

	      var index = -1;
	      var length = sources.length;
	      var guard = length > 2 ? sources[2] : undefined$1;

	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	        length = 1;
	      }

	      while (++index < length) {
	        var source = sources[index];
	        var props = keysIn(source);
	        var propsIndex = -1;
	        var propsLength = props.length;

	        while (++propsIndex < propsLength) {
	          var key = props[propsIndex];
	          var value = object[key];

	          if (value === undefined$1 ||
	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	            object[key] = source[key];
	          }
	        }
	      }

	      return object;
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined$1, customDefaultsMerge);
	      return apply(mergeWith, undefined$1, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined$1 : baseGet(object, path);
	      return result === undefined$1 ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined$1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined$1 : object[toKey(path[index])];
	        if (value === undefined$1) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined$1) {
	        upper = lower;
	        lower = undefined$1;
	      }
	      if (upper !== undefined$1) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined$1) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined$1) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined$1;
	      }
	      if (floating === undefined$1) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined$1;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined$1;
	        }
	      }
	      if (lower === undefined$1 && upper === undefined$1) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined$1) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined$1
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined$1;
	      }
	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);

	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined$1;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      // The sourceURL gets injected into the source that's eval-ed, so be careful
	      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
	      // and escape the comment, thus injecting code that gets evaled.
	      var sourceURL = '//# sourceURL=' +
	        (hasOwnProperty.call(options, 'sourceURL')
	          ? (options.sourceURL + '').replace(/\s/g, ' ')
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Throw an error if a forbidden character was found in `variable`, to prevent
	      // potential command injection attacks.
	      else if (reForbiddenIdentifierChars.test(variable)) {
	        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
	      }

	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined$1, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return baseTrim(string);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.slice(0, trimmedEndIndex(string) + 1);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined$1) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined$1 : pattern;

	      if (pattern === undefined$1) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined$1, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     *
	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined$1 : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined$1;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined$1;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();

	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined$1) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name + '';
	        if (!hasOwnProperty.call(realNames, key)) {
	          realNames[key] = [];
	        }
	        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined$1
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(commonjsGlobal));
} (lodash, lodash.exports));

var _$1 = lodash.exports;

var useEventListener = function useEventListener(eventName, handler) {
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;
  // Create a ref that stores handler
  var savedHandler = React.useRef(); // Update ref.current value if handler changes.
  // This allows our effect below to always get latest handler ...
  // ... without us needing to pass it in effect deps array ...
  // ... and potentially cause effect to re-run every render.

  React.useEffect(function () {
    savedHandler.current = handler;
  }, [handler]);
  React.useEffect(function () {
    // Make sure element supports addEventListener
    // On
    var isSupported = element && element.addEventListener;
    if (!isSupported) return; // Create event listener that calls handler function stored in ref

    var eventListener = function eventListener(event) {
      return savedHandler.current(event);
    }; // Add event listener


    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup

    return function () {
      element.removeEventListener(eventName, eventListener);
    };
  }, [eventName, element] // Re-run if eventName or element changes
  );
};

function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$n(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var scrollToSection = function scrollToSection(elmn) {
  if (elmn) {
    elmn.scrollIntoView();
  }
};

var useToc = function useToc() {
  var location = reactRouterDom.useLocation();
  var history = reactRouterDom.useHistory();

  var _useState = React.useState({}),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      sections = _useState2[0],
      setSections = _useState2[1];

  var _useState3 = React.useState(location.hash ? location.hash.substring(1) : null),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      activeSection = _useState4[0],
      setActiveSection = _useState4[1];

  var _useState5 = React.useState({}),
      _useState6 = _slicedToArray__default["default"](_useState5, 2),
      clickHandlers = _useState6[0],
      setClickHandlers = _useState6[1];

  var handleScroll = React.useCallback(function (e) {
    var top = window.pageYOffset || document.documentElement.scrollTop;

    if (top > 200) {
      Object.keys(sections).forEach(function (hash) {
        var elm = sections[hash];

        if (elm) {
          var rect = elm.getBoundingClientRect();

          if (rect.top > 0 && rect.top < 150 && "#" + hash !== location.hash) {
            history.replace(_objectSpread$n(_objectSpread$n({}, location), {}, {
              hash: hash
            }));
            setActiveSection(hash);
          }
        }
      });
    } else {
      history.replace(_objectSpread$n(_objectSpread$n({}, location), {}, {
        hash: null
      }));
      setActiveSection(null);
    }
  }, [sections]);
  useEventListener("scroll", handleScroll, document);

  var setRefs = function setRefs(refs) {
    // If theres an initial hash, scroll
    if (location.hash && refs[location.hash.substring(1)]) {
      scrollToSection(refs[location.hash.substring(1)]);
    }

    setSections(refs);
    setClickHandlers(Object.keys(refs).reduce(function (obj, key) {
      return obj[key] = function (e) {
        e.preventDefault();
        history.replace(_objectSpread$n(_objectSpread$n({}, location), {}, {
          key: key
        }));
        setActiveSection(key);
        scrollToSection(refs[key]);
      }, obj;
    }, {}));
  };

  return [activeSection, clickHandlers, setRefs];
};

var _excluded$1A = ["refs"];
var Toc = function Toc(_ref) {
  var refs = _ref.refs;
      _objectWithoutProperties__default["default"](_ref, _excluded$1A);

  var theme = React.useContext(ThemeContext);

  var _useState = React.useState({}),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      sections = _useState2[0],
      setSections = _useState2[1];

  var _useToc = useToc(),
      _useToc2 = _slicedToArray__default["default"](_useToc, 3),
      activeSection = _useToc2[0],
      clickHandlers = _useToc2[1],
      setRefs = _useToc2[2];

  React.useEffect(function () {
    setRefs(refs);
    setSections(refs);
  }, [refs]);
  return react.jsx("ul", null, Object.keys(sections).map(function (hash) {
    return react.jsx("li", {
      key: hash
    }, react.jsx("a", {
      href: "#".concat(hash),
      onClick: clickHandlers[hash],
      className: activeSection === hash ? "isActive" : null,
      css: navItem$1({
        theme: theme
      })
    }, _$1.startCase(hash)));
  }));
};

function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$m(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var CancelToken$1 = axios__default["default"].CancelToken;

function get$2(url, options) {
  var cancel;
  options = options || {};
  options.cancelToken = options.cancelToken || new CancelToken$1(function executor(c) {
    cancel = c;
  });
  var p = axios__default["default"].get(url, options);
  return {
    promise: p,
    cancel: cancel
  };
}

function post(url, body, options) {
  var cancel;
  options = options || {};
  options.cancelToken = options.cancelToken || new CancelToken$1(function executor(c) {
    cancel = c;
  });
  var p = axios__default["default"].post(url, body, options);
  return {
    promise: p,
    cancel: cancel
  };
}

var axios = _objectSpread$m(_objectSpread$m({}, axios__default["default"]), {}, {
  get: get$2,
  post: post
});

var _excluded$1z = ["doi"];
function AltmetricDonut(_ref) {
  var doi = _ref.doi,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1z);

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      donut = _useState2[0],
      setDonut = _useState2[1];

  React.useEffect(function () {
    if (typeof doi !== 'string') return;
    var response = axios.get("https://api.altmetric.com/v1/doi/".concat(doi));
    response.promise.then(function (response) {
      setDonut(response.data);
    })["catch"](function (err) {
      if (err.__CANCEL__) ; else {
        console.error(err);
      }
    });
    return function cleanup() {
      response.cancel();
    };
  }, [doi]);
  if (typeof doi !== 'string') return null;
  if (!doi || !donut) return null;
  return react.jsx("a", _extends__default["default"]({
    href: donut.details_url
  }, props), react.jsx("img", {
    src: donut.images.medium,
    width: 50
  }));
}

var _excluded$1y = ["allowNewLines", "allowedTags", "allowedAttr", "textComponent", "isHTML", "values"];

function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$l(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function Message(_ref) {
  var allowNewLines = _ref.allowNewLines,
      allowedTags = _ref.allowedTags,
      allowedAttr = _ref.allowedAttr,
      textComponent = _ref.textComponent,
      isHTML = _ref.isHTML,
      _ref$values = _ref.values,
      values = _ref$values === void 0 ? {} : _ref$values,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1y);

  var _useIntl = reactIntl.useIntl(),
      formatMessage = _useIntl.formatMessage;

  if (isHTML || allowedTags) {
    var Comp = textComponent || 'div';
    var dirty = formatMessage(_objectSpread$l(_objectSpread$l({}, props), {}, {
      values: values
    }));
    var options = {
      ALLOWED_TAGS: allowedTags || ['i', 'br', 'a'],
      ALLOWED_ATTR: allowedAttr || ['href']
    };
    var sanitized = DOMPurify__default["default"].sanitize(dirty, options);
    return react.jsx(Comp, {
      dangerouslySetInnerHTML: {
        __html: sanitized
      }
    });
  } else {
    if (allowNewLines) {
      values.br = react.jsx("br", null);
    } // if (allowedTags) {
    //   allowedTags.forEach(t => {
    //     const Tag = t;
    //     values[t] = chunks => <Tag>{chunks}</Tag>
    //   });
    // }

  }

  return react.jsx(reactIntl.FormattedMessage, _extends__default["default"]({}, props, {
    values: values
  }));
}

var gbifOrg = 'https://www.gbif.org';
var defaultContext$1 = {
  occurrenceSearch: {
    url: function url(_ref) {
      var route = _ref.route,
          queryString = _ref.queryString,
          basename = _ref.basename;
      return "".concat(basename ? "/".concat(basename) : '').concat(route).concat(queryString ? "?".concat(queryString) : '');
    },
    route: '/occurrence/search',
    isHref: true
  },
  collectionKey: {
    // url: ({key}) => `/collection/${key}`,
    url: function url(_ref2) {
      var key = _ref2.key;
      return "".concat(gbifOrg, "/grscicoll/collection/").concat(key);
    },
    isHref: true,
    route: '/collection/:key'
  },
  collectionSearch: {
    url: function url(_ref3) {
      _ref3.queryString;
          var basename = _ref3.basename;
      return "".concat(basename ? "/".concat(basename) : '', "/collection/search");
    },
    isHref: true,
    route: '/collection/search'
  },
  collectionSpecimens: {
    url: function url(_ref4) {
      var key = _ref4.key;
      return "/collection/".concat(key, "/specimens");
    },
    isHref: true
  },
  institutionKey: {
    // url: ({key}) => `/institution/${key}`,
    url: function url(_ref5) {
      var key = _ref5.key;
      return "".concat(gbifOrg, "/grscicoll/institution/").concat(key);
    },
    isHref: true,
    route: '/institution/:key'
  },
  institutionSearch: {
    url: function url(_ref6) {
      _ref6.queryString;
          var basename = _ref6.basename;
      return "".concat(basename ? "/".concat(basename) : '', "/institution/search");
    },
    isHref: true,
    route: '/institution/search'
  },
  datasetKey: {
    // url: ({key}) => `/dataset/${key}`,
    url: function url(_ref7) {
      var key = _ref7.key,
          gbifOrgLocalePrefix = _ref7.gbifOrgLocalePrefix;
      return "".concat(gbifOrg).concat(gbifOrgLocalePrefix, "/dataset/").concat(key);
    },
    isHref: true,
    route: '/dataset/:key'
  },
  datasetSearch: {
    url: function url(_ref8) {
      _ref8.queryString;
          var basename = _ref8.basename;
      return "".concat(basename ? "/".concat(basename) : '', "/dataset/search");
    },
    isHref: true,
    route: '/dataset/search'
  },
  publisherKey: {
    // url: ({key}) => `/publisher/${key}`,
    url: function url(_ref9) {
      var key = _ref9.key;
      return "".concat(gbifOrg, "/publisher/").concat(key);
    },
    isHref: true,
    route: '/publisher/:key'
  },
  publisherSearch: {
    url: function url(_ref10) {
      _ref10.queryString;
          var basename = _ref10.basename;
      return "".concat(basename ? "/".concat(basename) : '', "/publisher/search");
    },
    isHref: true,
    route: '/publisher/search'
  },
  literatureSearch: {
    url: function url(_ref11) {
      _ref11.queryString;
          var basename = _ref11.basename;
      return "".concat(basename ? "/".concat(basename) : '', "/literature/search");
    },
    isHref: true,
    route: '/literature/search'
  }
};
var RouteContext = /*#__PURE__*/React__default["default"].createContext(defaultContext$1);

var LocaleContext = /*#__PURE__*/React__default["default"].createContext({
  en: {
    gbifLocale: ''
  },
  es: {
    gbifLocale: 'es',
    vocabularyLocale: 'es'
  },
  'en-DK': {
    vocabularyLocale: 'es'
  }
});

var _excluded$1x = ["queryString", "type", "discreet"],
    _excluded2$8 = ["id", "type", "discreet"];
var ResourceSearchLink = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var queryString = _ref.queryString,
      type = _ref.type,
      discreet = _ref.discreet,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1x);

  var routeContext = React.useContext(RouteContext);
  var basename = routeContext.basename;
  var _routeContext$type = routeContext[type],
      url = _routeContext$type.url,
      isHref = _routeContext$type.isHref,
      route = _routeContext$type.route;
  var to = url({
    queryString: queryString,
    basename: basename,
    route: route
  });
  var style = discreet ? isDiscreet : null;

  if (isHref) {
    return react.jsx("a", _extends__default["default"]({
      href: to,
      css: style,
      ref: ref
    }, props));
  } else {
    return react.jsx(reactRouterDom.Link, _extends__default["default"]({
      to: to,
      css: style,
      ref: ref
    }, props));
  }
});
var ResourceLink = /*#__PURE__*/React__default["default"].forwardRef(function (_ref2, ref) {
  var _localeSettings$local;

  var id = _ref2.id,
      type = _ref2.type,
      discreet = _ref2.discreet,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded2$8);

  var localeSettings = React.useContext(LocaleContext);
  var routeContext = React.useContext(RouteContext);
  var basename = routeContext.basename;
  var gbifOrgLocale = localeSettings === null || localeSettings === void 0 ? void 0 : (_localeSettings$local = localeSettings.localeMap) === null || _localeSettings$local === void 0 ? void 0 : _localeSettings$local.gbif_org;
  var _routeContext$type2 = routeContext[type],
      url = _routeContext$type2.url,
      isHref = _routeContext$type2.isHref,
      route = _routeContext$type2.route;
  var to = url({
    key: id,
    route: route,
    basename: basename,
    gbifOrgLocalePrefix: gbifOrgLocale ? "/".concat(gbifOrgLocale) : ''
  });
  var style = discreet ? isDiscreet : null;

  if (isHref) {
    return react.jsx("a", _extends__default["default"]({
      href: to,
      css: style
    }, props));
  } else {
    return react.jsx(reactRouterDom.Link, _extends__default["default"]({
      to: to,
      css: style
    }, props));
  }
});
function PublisherKeyLink(props) {
  return react.jsx(ResourceLink, _extends__default["default"]({
    type: "publisherKey"
  }, props));
}
function DatasetKeyLink(props) {
  return react.jsx(ResourceLink, _extends__default["default"]({
    type: "datasetKey"
  }, props));
}
var isDiscreet = {
  name: "1r0pe6c",
  styles: "color:inherit;text-decoration:none;:hover{text-decoration:underline;}"
} ;

var routerOption = function routerOption(_ref) {
  var theme = _ref.theme,
      isActive = _ref.isActive;
  return /*#__PURE__*/react.css("border-left:3px solid ", isActive ? theme.primary500 : 'transparent', ";display:block;color:inherit;text-decoration:none;padding:12px 12px;white-space:nowrap;::-moz-focus-inner{border-style:none;}&:hover,&:focus{outline:none;background:rgba(0,0,0,.05);}&:focus,:focus-within{outline:none;background:", theme.darkTheme ? '#00000050' : '#00000010', ";}" + ("" ), "" );
};
var routerTab = function routerTab(_ref2) {
  var theme = _ref2.theme,
      isActive = _ref2.isActive;
  return /*#__PURE__*/react.css("border-bottom:3px solid ", isActive ? theme.primary500 : 'transparent', ";flex:0 1 auto;white-space:nowrap;&:hover,&:focus{outline:none;background:rgba(0,0,0,.05);}a,span{cursor:pointer;padding:10px 10px;display:inline-block;color:inherit;text-decoration:none;::-moz-focus-inner{border-style:none;}}" + ("" ), "" );
};
var visible = {
  name: "1qd1z99",
  styles: "order:0;visibility:visible;opacity:1"
} ;
var invisible = {
  name: "m4reme",
  styles: "order:100;visibility:hidden;pointer-events:none"
} ;
var toolbarWrapper = {
  name: "1qvcdag",
  styles: "display:flex;margin:0;padding:0;list-style:none"
} ;
var overflowStyle = {
  name: "1ck59u8",
  styles: "order:99;display:flex;align-items:center"
} ;

var _excluded$1w = ["label", "to", "icon", "exact", "className", "data-targetid", "data-inmenu", "isActive"],
    _excluded2$7 = ["label", "to", "icon", "exact", "className", "data-targetid", "isActive"];
var NavTab = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var label = _ref.label,
      to = _ref.to,
      icon = _ref.icon,
      exact = _ref.exact,
      className = _ref.className,
      targetId = _ref['data-targetid'],
      inMenu = _ref['data-inmenu'],
      isActive = _ref.isActive,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1w);

  var theme = React.useContext(ThemeContext);
  var activeRoute = reactRouterDom.useRouteMatch({
    path: to,
    exact: exact
  });
  var Comp = to ? reactRouterDom.Link : 'span';
  return react.jsx("li", {
    ref: ref,
    "data-targetid": targetId,
    "data-inmenu": inMenu,
    css: routerTab({
      theme: theme,
      isActive: activeRoute || isActive
    }),
    className: className
  }, react.jsx(Comp, _extends__default["default"]({
    to: to
  }, props), icon, label));
});
var MenuRouteOption = /*#__PURE__*/React__default["default"].forwardRef(function (_ref2, ref) {
  var label = _ref2.label,
      to = _ref2.to,
      icon = _ref2.icon,
      exact = _ref2.exact,
      className = _ref2.className,
      targetId = _ref2['data-targetid'],
      isActive = _ref2.isActive,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded2$7);

  var theme = React.useContext(ThemeContext);
  var activeRoute = reactRouterDom.useRouteMatch({
    path: to,
    exact: exact
  });
  var Comp = to ? reactRouterDom.Link : 'span';
  return react.jsx(Comp, _extends__default["default"]({
    to: to,
    ref: ref,
    "data-targetid": targetId,
    css: routerOption({
      theme: theme,
      isActive: activeRoute || isActive
    }),
    className: className
  }, props), icon, label);
});

var _excluded$1v = ["children", "visibilityMap"],
    _excluded2$6 = ["onClick"];
function OverflowMenu(_ref) {
  var children = _ref.children,
      visibilityMap = _ref.visibilityMap,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1v);

  var shouldShowMenu = React.useMemo(function () {
    return Object.values(visibilityMap).some(function (v) {
      return v === false;
    });
  }, [visibilityMap]);

  var moreLabel = react.jsx(md.MdMoreHoriz, {
    style: {
      fontSize: '1.5em'
    }
  });

  var activeSubMenu = false;
  React__default["default"].Children.map(children, function (child) {
    if (!visibilityMap[child.props["data-targetid"]]) {
      var isActive = reactRouterDom.useRouteMatch({
        path: child.props.to,
        exact: true
      });

      if (isActive) {
        moreLabel = child.props.label;
        activeSubMenu = true;
      }
    }
  });

  if (!shouldShowMenu) {
    return null;
  }

  return react.jsx("li", props, react.jsx(Menu, {
    "aria-label": "Custom menu",
    trigger: react.jsx(Button, {
      isIcon: true,
      appearance: activeSubMenu ? 'primary' : 'text',
      truncate: true,
      style: {
        maxWidth: 120
      }
    }, moreLabel),
    items: function items(menuState) {
      return React__default["default"].Children.map(children, function (child) {
        if (!visibilityMap[child.props["data-targetid"]]) {
          var _child$props = child.props,
              _child$props$onClick = _child$props.onClick,
              _onClick = _child$props$onClick === void 0 ? function () {} : _child$props$onClick,
              p = _objectWithoutProperties__default["default"](_child$props, _excluded2$6);

          return react.jsx(MenuRouteOption, _extends__default["default"]({}, p, {
            onClick: function onClick() {
              _onClick();

              menuState.hide();
            }
          }));
        }

        return null;
      });
    }
  }));
}

var _excluded$1u = ["children"];

function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$k(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function NavItem(props) {
  react.jsx("li", props);
}
function NavBar(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1u);

  var navRef = React.useRef(null);

  var _useState = React.useState({}),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      visibilityMap = _useState2[0],
      setVisibilityMap = _useState2[1];

  var handleIntersection = function handleIntersection(entries) {
    var updatedEntries = {};
    entries.forEach(function (entry) {
      var targetid = entry.target.dataset.targetid;

      if (entry.isIntersecting && !entry.target.dataset.inmenu) {
        updatedEntries[targetid] = true;
      } else {
        updatedEntries[targetid] = false;
      }
    });
    setVisibilityMap(function (prev) {
      return _objectSpread$k(_objectSpread$k({}, prev), updatedEntries);
    });
  };

  React.useEffect(function () {
    var observer = new IntersectionObserver(handleIntersection, {
      root: navRef.current,
      threshold: 1,
      rootMargin: '0px -100px 0px 0px'
    }); // We are addting observers to child elements of the container div
    // with ref as navRef. Notice that we are adding observers
    // only if we have the data attribute observerid on the child elemeent

    Array.from(navRef.current.children).forEach(function (item) {
      if (item.dataset.targetid) {
        observer.observe(item);
      }
    });
    return function () {
      return observer.disconnect();
    };
  }, []);
  return react.jsx("ol", _extends__default["default"]({
    css: toolbarWrapper,
    ref: navRef
  }, props), React__default["default"].Children.map(children, function (child) {
    return react.jsx(NavTab, _extends__default["default"]({}, child.props, {
      css: !!visibilityMap[child.props["data-targetid"]] ? visible : invisible
    })); // return cloneElement(child, {
    //   css: !!visibilityMap[child.props["data-targetid"]] ? visible : invisible
    // });
  }), react.jsx(OverflowMenu, {
    visibilityMap: visibilityMap,
    css: overflowStyle
  }, children));
}

var _ref$k = {
  name: "1mtmxjr",
  styles: "display:flex;flex-direction:row;flex-wrap:nowrap;align-items:center"
} ;

var dataHeader = function dataHeader(_ref2) {
  _extends__default["default"]({}, _ref2);

  return _ref$k;
};
var styles = {
  dataHeader: dataHeader
};

var _excluded$1t = ["as", "className", "availableCatalogues", "label"];
function CatalogueSelector(_ref) {
  var _ref$as = _ref.as,
      Div = _ref$as === void 0 ? 'div' : _ref$as,
      className = _ref.className,
      _ref$availableCatalog = _ref.availableCatalogues,
      availableCatalogues = _ref$availableCatalog === void 0 ? ['OCCURRENCE', 'DATASET', 'PUBLISHER', 'LITERATURE', 'COLLECTION', 'INSTITUTION'] : _ref$availableCatalog,
      label = _ref.label;
      _objectWithoutProperties__default["default"](_ref, _excluded$1t);

  var theme = React.useContext(ThemeContext);
  var routeContext = React.useContext(RouteContext);
  var location = reactRouterDom.useLocation();

  var _getClasses = getClasses(theme.prefix, 'catalogueSelector', {
    /*modifiers goes here*/
  }, className),
      classNames = _getClasses.classNames;

  var options = {
    OCCURRENCE: {
      link: react.jsx(ResourceSearchLink, {
        type: "occurrenceSearch",
        discreet: true
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "catalogues.occurrences"
      })),
      route: routeContext.occurrenceSearch.route || '/occurrence/search',
      translationId: 'catalogues.occurrences'
    },
    PUBLISHER: {
      link: react.jsx(ResourceSearchLink, {
        type: "publisherSearch",
        discreet: true
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "catalogues.publishers"
      })),
      route: routeContext.publisherSearch.route || '/publisher/search',
      translationId: 'catalogues.publishers'
    },
    DATASET: {
      link: react.jsx(ResourceSearchLink, {
        type: "datasetSearch",
        discreet: true
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "catalogues.datasets"
      })),
      route: routeContext.datasetSearch.route || '/dataset/search',
      translationId: 'catalogues.datasets'
    },
    LITERATURE: {
      link: react.jsx(ResourceSearchLink, {
        type: "literatureSearch",
        discreet: true
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "catalogues.literature"
      })),
      route: routeContext.literatureSearch.route || '/literature/search',
      translationId: 'catalogues.literature'
    },
    COLLECTION: {
      link: react.jsx(ResourceSearchLink, {
        type: "collectionSearch",
        discreet: true
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "catalogues.collections"
      })),
      route: routeContext.collectionSearch.route || '/collection/search',
      translationId: 'catalogues.collections'
    },
    INSTITUTION: {
      link: react.jsx(ResourceSearchLink, {
        type: "institutionSearch",
        discreet: true
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "catalogues.institutions"
      })),
      route: routeContext.institutionSearch.route || '/institution/search',
      translationId: 'catalogues.institutions'
    }
  };
  var activeType = Object.keys(options).find(function (type) {
    return options[type].route === location.pathname;
  });
  var active = options[activeType];
  return react.jsx(Div, classNames, react.jsx(Menu, {
    placement: "bottom-start",
    "aria-label": "Custom menu",
    trigger: react.jsx(Button, {
      appearance: "text"
    }, react.jsx(md.MdApps, null), react.jsx("span", {
      style: {
        marginLeft: 6
      }
    }, label || (active ? react.jsx(reactIntl.FormattedMessage, {
      id: active.translationId
    }) : null))),
    items: function items(menuState) {
      return availableCatalogues.map(function (name) {
        return react.jsx("div", {
          key: name,
          css: menuOption(theme),
          style: {
            fontSize: '1em',
            background: location.pathname === options[name].route ? '#eee' : null
          }
        }, options[name].link);
      });
    }
  }));
}

var _excluded$1s = ["as", "className", "left", "catalogueLabel", "availableCatalogues", "right", "children"];
function DataHeader(_ref) {
  var _ref$as = _ref.as,
      Div = _ref$as === void 0 ? 'div' : _ref$as,
      className = _ref.className,
      left = _ref.left,
      catalogueLabel = _ref.catalogueLabel,
      availableCatalogues = _ref.availableCatalogues,
      right = _ref.right,
      children = _ref.children,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1s);

  var theme = React.useContext(ThemeContext);
  var showCatalogue = availableCatalogues && availableCatalogues.length > 1;
  var hasLeftPart = left || catalogueLabel || showCatalogue; // if there is nothing configured, then do not show at all

  if (!hasLeftPart && !children && !right) return null;

  getClasses(theme.prefix, 'dataHeader', {
    /*modifiers goes here*/
  }, className);

  return react.jsx(Div, _extends__default["default"]({
    css: styles.dataHeader({
      theme: theme
    })
  }, props), hasLeftPart && react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    style: {
      flex: '0 0 auto',
      position: 'relative',
      margin: '0 12px',
      display: 'flex',
      alignItems: 'center'
    }
  }, left || react.jsx(CatalogueSelector, {
    label: catalogueLabel,
    availableCatalogues: availableCatalogues
  })), children && react.jsx(Separator, null)), react.jsx("div", {
    style: {
      flex: '1 1 auto',
      overflow: 'hidden'
    }
  }, children || react.jsx(NavBar, {
    "aria-hidden": "true",
    style: {
      visibility: 'hidden',
      width: 0
    }
  }, react.jsx(NavItem, {
    label: "Table",
    "data-targetid": "table"
  }))), right && react.jsx(React__default["default"].Fragment, null, react.jsx(Separator, null), react.jsx("div", {
    style: {
      flex: '0 0 auto'
    }
  }, right)));
}
function Separator() {
  return react.jsx("div", {
    style: {
      flex: '0 0 1px',
      borderRight: '1px solid #aaa',
      height: '1.5em',
      margin: '0 6px'
    }
  });
}

var _ref2$d = {
  name: "zasaf2",
  styles: "padding:0;margin:0;list-style:none;li{border-bottom:1px solid #f0f0f0;margin-bottom:0!important;&:last-of-type{border:none;}}"
} ;

var contactList = function contactList(_ref3) {
  _extends__default["default"]({}, _ref3);

  return _ref2$d;
};

var _ref$j = {
  name: "ka1oxj",
  styles: "padding:8px 0;h4{font-size:inherit;margin:0;}display:flex;align-items:center;>h4,>div{flex:1 1 33%;padding:0 8px;}a{color:inherit;}.gb-contactListImage{width:48px;height:48px;flex:0 0 auto;border-radius:4px;background-size:contain;background-repeat:no-repeat;background-position:center;padding:0;}.gb-discreet{color:#555;}.gb-expandRow{flex:0 0 auto;}"
} ;

var contactListItem = function contactListItem(_ref4) {
  _extends__default["default"]({}, _ref4);

  return _ref$j;
};

var _excluded$1r = ["contacts", "className"],
    _excluded2$5 = ["contact"],
    _excluded3$4 = ["field", "contact", "value"],
    _excluded4$2 = ["field", "contact", "value"];
var T$g = Properties.Term,
    V$g = Properties.Value;
function ContactList(_ref) {
  var _ref$contacts = _ref.contacts,
      contacts = _ref$contacts === void 0 ? [] : _ref$contacts,
      className = _ref.className,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1r);

  var theme = React.useContext(ThemeContext);

  getClasses(theme.prefix, 'contactList', {
    /*modifiers goes here*/
  }, className);

  return react.jsx("ul", _extends__default["default"]({
    css: contactList({
      theme: theme
    })
  }, props), contacts.map(function (c, i) {
    return react.jsx("li", {
      key: "".concat(c.key || i)
    }, react.jsx(Contact, {
      contact: c
    }));
  }));
}

function Contact(_ref2) {
  var _contact$email;

  var contact = _ref2.contact;
      _objectWithoutProperties__default["default"](_ref2, _excluded2$5);

  var theme = React.useContext(ThemeContext);
  var name = contact.firstName || contact.lastName ? "".concat(contact.firstName || '', " ").concat(contact.lastName || '').trim() : undefined;
  var roles = contact.roles || (contact.type ? [contact.type] : undefined);

  var Roles = react.jsx(React__default["default"].Fragment, null, roles.map(function (r) {
    return react.jsx(React__default["default"].Fragment, {
      key: r
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "enums.role.".concat(r),
      defaultMessage: r
    }), react.jsx("br", null));
  }));

  var userId = contact.userId || [];
  var orcid = userId.find(function (x) {
    return x.indexOf('orcid.org') != -1;
  });

  var summary = react.jsx("div", {
    css: contactListItem({
      theme: theme
    })
  }, react.jsx("div", null, react.jsx("div", null, react.jsx("h4", null, name || contact.organization))), react.jsx("div", {
    className: "gb-discreet"
  }, roles && Roles), react.jsx("div", {
    style: {
      display: 'flex',
      justifyContent: 'flex-end'
    }
  }, react.jsx("div", null, orcid && react.jsx("a", {
    href: orcid,
    style: {
      marginRight: 16,
      width: 16,
      height: 16,
      display: 'inline-block'
    }
  }, react.jsx("img", {
    style: {
      pointerEvents: 'none'
    },
    src: "https://www.gbif.org/img/orcid_16x16.gif"
  })), (contact === null || contact === void 0 ? void 0 : (_contact$email = contact.email) === null || _contact$email === void 0 ? void 0 : _contact$email.length) > 0 && react.jsx("a", {
    href: "mailto:".concat(contact.email[0])
  }, react.jsx(md.MdMail, {
    style: {
      pointerEvents: 'none'
    }
  })))));

  return react.jsx(Accordion, {
    summary: summary
  }, react.jsx("div", {
    style: {
      marginLeft: 8,
      marginBottom: 32
    }
  }, react.jsx(Properties, null, ['organization', 'position', 'address', 'city', 'province', 'postalCode'].map(function (f) {
    return react.jsx(Field$1, {
      field: f,
      contact: contact,
      key: f
    });
  }), contact.country && react.jsx(Field$1, {
    field: "country",
    contact: contact,
    value: react.jsx(reactIntl.FormattedMessage, {
      id: "enums.countryCode.".concat(contact.country),
      defaultMessage: contact.country
    })
  }), roles && react.jsx(Field$1, {
    field: "roles",
    contact: contact,
    value: Roles
  }), ['homepage', 'email', 'phone', 'userId'].map(function (f) {
    return react.jsx(ArrayField, {
      isHyperText: true,
      field: f,
      contact: contact,
      key: f
    });
  }))));
}

function Field$1(_ref3) {
  var field = _ref3.field,
      _ref3$contact = _ref3.contact,
      contact = _ref3$contact === void 0 ? {} : _ref3$contact,
      value = _ref3.value,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded3$4);

  if (!value && Array.isArray(contact[field])) return react.jsx(ArrayField, _extends__default["default"]({
    field: field,
    contact: contact
  }, props));
  if (!value && !contact[field]) return null;
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$g, null, react.jsx(reactIntl.FormattedMessage, {
    id: "contact.".concat(field),
    defaultMessage: field
  })), value && react.jsx(V$g, null, value), !value && react.jsx(V$g, null, contact[field]));
}

function ArrayField(_ref4) {
  var _contact$field;

  var field = _ref4.field,
      _ref4$contact = _ref4.contact,
      contact = _ref4$contact === void 0 ? {} : _ref4$contact;
      _ref4.value;
      _objectWithoutProperties__default["default"](_ref4, _excluded4$2);

  if (!contact[field] || ((_contact$field = contact[field]) === null || _contact$field === void 0 ? void 0 : _contact$field.length) === 0) return null;
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$g, null, react.jsx(reactIntl.FormattedMessage, {
    id: "contact.".concat(field),
    defaultMessage: field
  })), react.jsx(V$g, null, contact[field].map(function (v, i) {
    return react.jsx(React__default["default"].Fragment, {
      key: i
    }, react.jsx(HyperText, {
      text: v
    }), react.jsx("br", null));
  })));
} // function Contact({ contact, ...props }) {
//   const theme = useContext(ThemeContext);
//   const name = (contact.firstName || contact.lastName) ? `${contact.firstName} ${contact.lastName}`.trim() : undefined;
//   return <details css={styles.contactListItem({ theme })}>
//     <summary>
//       <div className="gb-contactListImage" style={{ backgroundImage: 'url(https://upload.wikimedia.org/wikipedia/commons/b/b4/Insigne_musei_Bergense.png)' }}></div>
//       <div>
//         <h4>{name || contact.organization}</h4>
//         <div className="gb-discreet">Data administrator, Metadata author, Data administrator, Metadata author</div>
//       </div>
//       <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
//         <span>
//           <span style={{ marginRight: 16, background: 'tomato', borderRadius: '50%', width: 16, height: 16, display: 'inline-block' }}></span>
//           <span style={{ marginRight: 16, background: 'pink', borderRadius: '50%', width: 16, height: 16, display: 'inline-block' }}></span>
//           <span style={{ marginRight: 16, background: 'deepskyblue', borderRadius: '50%', width: 16, height: 16, display: 'inline-block' }}></span>
//         </span>
//         <a href="mailto:jdoe@gmail.com">jdoe@gmail.com</a>
//       </div>
//       <div className="gb-expandRow"><MdExpandMore /></div>
//     </summary>
//     <div style={{ marginLeft: 56, marginTop: 16 }}>
//       <Properties>
//         <T>Organization</T>
//         <V>Norsk institutt for naturforskning</V>
//         <T>Address</T>
//         <V>Postboks 5685 Sluppen</V>
//         <T>City</T>
//         <V>Trondheim</V>
//         <T>Country</T>
//         <V>Norway</V>
//       </Properties>
//     </div>
//   </details>
// }
// export const ContactAccordion = uncontrollable(AccordionControlled, {
//   open: 'onToggle'
// });

var license = [
	"CC0_1_0",
	"CC_BY_4_0",
	"CC_BY_NC_4_0",
	"UNSPECIFIED",
	"UNSUPPORTED"
];

var _excluded$1q = ["value", "className"];
var url2enum = {
  '//creativecommons.org/publicdomain/zero/1.0/legalcode': 'CC0_1_0',
  '//creativecommons.org/licenses/by/4.0/legalcode': 'CC_BY_4_0',
  '//creativecommons.org/licenses/by-nc/4.0/legalcode': 'CC_BY_NC_4_0'
};
var enum2url = {
  'CC0_1_0': '//creativecommons.org/publicdomain/zero/1.0/legalcode',
  'CC_BY_4_0': '//creativecommons.org/licenses/by/4.0/legalcode',
  'CC_BY_NC_4_0': '//creativecommons.org/licenses/by-nc/4.0/legalcode'
};
function LicenseTag(_ref) {
  var value = _ref.value;
      _ref.className;
      var props = _objectWithoutProperties__default["default"](_ref, _excluded$1q);

  React.useContext(ThemeContext);
  var val = value.replace(/http(s)?:/, '');
  var licenceEnum = url2enum[val] || value;
  if (license.indexOf(licenceEnum) === -1) licenceEnum = 'UNSUPPORTED';
  var url = enum2url[licenceEnum]; // if (url) {
  //   return <a href={url} css={styles.licenseTag({theme})} {...props}>
  //   <FormattedMessage id={`enums.license.${licenceEnum}`} />
  // </a>
  // }
  // return <span css={styles.licenseTag({theme})} {...props}>
  //   <FormattedMessage id={`enums.license.${licenceEnum}`} />
  // </span>

  var licenseProps = url ? {
    as: 'a',
    href: url
  } : {};
  return react.jsx(IdentifierBadge, _extends__default["default"]({}, licenseProps, props), react.jsx("span", null, "License"), react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
    id: "enums.license.".concat(licenceEnum)
  })));
}

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf__default["default"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default["default"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default["default"](this, result); }; }

function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var QueryError = /*#__PURE__*/function (_Error) {
  _inherits__default["default"](QueryError, _Error);

  var _super = _createSuper$6(QueryError);

  function QueryError(_ref) {
    var _this;

    var message = _ref.message,
        graphQLErrors = _ref.graphQLErrors,
        networkError = _ref.networkError,
        isCanceled = _ref.isCanceled;

    _classCallCheck__default["default"](this, QueryError);

    _this = _super.call(this, message);
    _this.graphQLErrors = graphQLErrors || [];
    _this.networkError = networkError || null;
    _this.isCanceled = isCanceled || false; // Generate an error message based on errors if no explicit message is provided

    var generateErrorMessage = function generateErrorMessage(err) {
      var message = ''; // If we have GraphQL errors present, add that to the error message.

      if (isArray_1(err.graphQLErrors)) {
        err.graphQLErrors.forEach(function (graphQLError) {
          var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';
          message += "GraphQL error: ".concat(errorMessage, "\n");
        });
      }

      if (err.networkError) {
        message += 'Network error: ' + err.networkError.message + '\n';
      } // strip newline from the end of the message


      message = message.replace(/\n$/, '');
      return message;
    };

    _this.message = message ? message : generateErrorMessage(_assertThisInitialized__default["default"](_this));
    return _this;
  }

  return _createClass__default["default"](QueryError);
}( /*#__PURE__*/_wrapNativeSuper__default["default"](Error));

var CancelToken = axios__default["default"].CancelToken;
var maxGETLength = 1000;

function query(query, _ref) {
  var variables = _ref.variables,
      client = _ref.client;
  var graphqlEndpoint = client === null || client === void 0 ? void 0 : client.endpoint;
  var headers = client === null || client === void 0 ? void 0 : client.headers;
  var queryId = hash__default["default"](query);
  var queryParams = {
    queryId: queryId,
    strict: true
  };
  var variablesTooLongForGET = variables && encodeURIComponent(JSON.stringify(variables)).length > maxGETLength; // this is a bit silly. why serialize and then hash the object. would be cheaper to simply hash the serialized

  if (variablesTooLongForGET) {
    queryParams.variablesId = hash__default["default"](variables);
  } else {
    queryParams.variables = variables;
  }

  var _cancel;

  return {
    promise: new Promise(function (resolve, reject) {
      axios__default["default"].get(graphqlEndpoint, {
        params: queryParams,
        headers: headers,
        cancelToken: new CancelToken(function executor(c) {
          _cancel = c;
        })
      }).then(function (response) {
        return resolve(formatResponse(response.data));
      })["catch"](function (error) {
        var _error$response, _error$response$data, _error$response2, _error$response2$data;

        var unknownQueryId = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.unknownQueryId;
        var unknownVariablesId = error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.unknownVariablesId;

        if (axios__default["default"].isCancel(error)) {
          resolve(canceledResponse(error.message));
        } else if (unknownQueryId || unknownVariablesId) {
          axios__default["default"].post(graphqlEndpoint, {
            query: query,
            variables: variables
          }, {
            headers: headers,
            cancelToken: new CancelToken(function executor(c) {
              _cancel = c;
            })
          }).then(function (response) {
            return resolve(formatResponse(response.data));
          })["catch"](function (innerError) {
            if (axios__default["default"].isCancel(innerError)) {
              resolve(canceledResponse(innerError.message));
            } else {
              resolve(netWorkErrorResponse(innerError));
            }
          });
        } else {
          resolve(netWorkErrorResponse(error));
        }
      });
    }),
    cancel: function cancel(reason) {
      return _cancel(reason || 'CANCELED');
    }
  };
}

function formatResponse(response) {
  var data = response.data,
      errors = response.errors;
  return {
    data: data,
    error: errors ? new QueryError({
      graphQLErrors: errors
    }) : void 0
  };
}

function netWorkErrorResponse(err) {
  var _err$response, _err$response2, _err$response3;

  return {
    data: undefined,
    error: new QueryError({
      networkError: {
        message: (err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.statusText) || 'Network error',
        statusCode: err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status,
        data: err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data
      }
    })
  };
}

function canceledResponse(reason) {
  return {
    data: null,
    error: new QueryError({
      message: 'Canceled',
      isCanceled: {
        message: reason
      }
    })
  };
}
// query fetch($limit: Int){
//   datasetSearch(limit: $limit) {
//     results {
//       title
//     }
//   }
// }
// `;
// const { promise: dataPromise, cancel } = query(graphqlQuery, { variables: { limit: 2, otherValues: '23945876239487562938475692873456982u3ihrgejwfo87324wytuiregfhkjso87q34wtiyruegfshjdo9w78iuerhsfw948iuershdfw98eruishgdfkjwoeiruysghfdkw98iuershgkfdweirsulgfdhksiulfdkghj' } });
// setTimeout(() => cancel(), 500);
// dataPromise
//   .then(x => console.log('success', JSON.stringify(x, null, 2)))
//   .catch(x => console.log('error returned', x));

var ApiClient = /*#__PURE__*/function () {
  function ApiClient(config) {
    _classCallCheck__default["default"](this, ApiClient);

    this.gql = config.gql;
    this.v1 = config.v1;
    this.request;
  }

  _createClass__default["default"](ApiClient, [{
    key: "query",
    value: function query$1(_ref) {
      var _query = _ref.query,
          variables = _ref.variables;

      if (!this.gql) {
        return console.error('No configuration has been provided to the GraphQLClient');
      }

      return query(_query, {
        variables: variables,
        client: this.gql
      });
    }
  }, {
    key: "get",
    value: function get(url, options) {
      return axios.get(url, options);
    }
  }, {
    key: "v1Get",
    value: function v1Get(url, options) {
      return this.get(this.v1.endpoint + url, options);
    }
  }]);

  return ApiClient;
}();

var API_V1 = "https://api.gbif.org/v1";
var API_V2 = "https://api.gbif.org/v2";
var GRAPH_API = "https://graphql.gbif-staging.org/graphql";
var TILE_API = "https://hp-maps.gbif-staging.org";
var MAPBOX_KEY = "pk.eyJ1IjoiZ2JpZiIsImEiOiJja3VmZm50Z3kxcm1vMnBtdnBmeGd5cm9hIn0.M2z2n9QP9fRHZUCw9vbgOA";
var DOMAIN = "react-components.gbif-staging.org";
var GBIF_ORG = "https://www.gbif.org";
var TRANSLATIONS = "https://react-components.gbif-staging.org/lib/translations";
var LOCALES = [
	"en-developer",
	"en-pseudo",
	"en",
	"da",
	"ar",
	"da",
	"de",
	"es",
	"fa",
	"fj",
	"fr",
	"ja",
	"la",
	"niu",
	"nl",
	"pis",
	"pt",
	"ru",
	"sm",
	"sw",
	"tkl",
	"to",
	"tvl",
	"uk",
	"zh",
	"zh-tw"
];
var env = {
	API_V1: API_V1,
	API_V2: API_V2,
	GRAPH_API: GRAPH_API,
	TILE_API: TILE_API,
	MAPBOX_KEY: MAPBOX_KEY,
	DOMAIN: DOMAIN,
	GBIF_ORG: GBIF_ORG,
	TRANSLATIONS: TRANSLATIONS,
	LOCALES: LOCALES
};

var client$1 = new ApiClient({
  gql: {
    endpoint: env.GRAPH_API
  },
  v1: {
    endpoint: env.API_V1
  },
  translations: {
    endpoint: env.TRANSLATIONS
  }
}); // A context to share state for the full app/component

var ApiContext = /*#__PURE__*/React__default["default"].createContext(client$1);

var RENEW_REQUEST = 'RENEW_REQUEST';

var useUnmounted$1 = function useUnmounted() {
  var unmounted = React.useRef(false);
  React.useEffect(function () {
    return function () {
      unmounted.current = true;
    };
  }, []);
  return unmounted;
};

function useQuery(query) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      loading = _useState4[0],
      setLoading = _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = _slicedToArray__default["default"](_useState5, 2),
      error = _useState6[0],
      setError = _useState6[1]; // functions are called when passed to useState so it has to be wrapped. 
  // We provide an empty call, just so we do not have to check for existence subsequently


  var _useState7 = React.useState(function () {
    return function () {};
  }),
      _useState8 = _slicedToArray__default["default"](_useState7, 2),
      cancelRequest = _useState8[0],
      setCancel = _useState8[1];

  var unmounted = useUnmounted$1();
  var apiClient = React.useContext(ApiContext);
  var client = (options === null || options === void 0 ? void 0 : options.client) || apiClient;

  function init(_ref) {
    var keepDataWhileLoading = _ref.keepDataWhileLoading;
    if (!keepDataWhileLoading) setData();
    setLoading(true);
    setError(false);
    cancelRequest(RENEW_REQUEST);
  }

  function load(options) {
    init(options);
    var variables = options === null || options === void 0 ? void 0 : options.variables;

    var _client$query = client.query({
      query: query,
      variables: variables
    }),
        dataPromise = _client$query.promise,
        cancel = _client$query.cancel; // functions cannot be direct values in states as function are taken as a way to create derived states
    // https://medium.com/swlh/how-to-store-a-function-with-the-usestate-hook-in-react-8a88dd4eede1


    setCancel(function () {
      return cancel;
    });
    dataPromise.then(function (response) {
      var _error$isCanceled;

      if (unmounted.current) return;
      var data = response.data,
          error = response.error;

      if ((error === null || error === void 0 ? void 0 : (_error$isCanceled = error.isCanceled) === null || _error$isCanceled === void 0 ? void 0 : _error$isCanceled.message) === RENEW_REQUEST) {
        return;
      }

      setError(error);
      setData(data);
      setLoading(false);
    })["catch"](function (err) {
      if (unmounted.current) return;
      setError({
        error: true,
        type: 'unknown'
      });
      setData();
      setLoading(false);
    });
  } // Cancel pending request on unmount


  React.useEffect(function () {
    return function () {
      cancelRequest();
    };
  }, [cancelRequest]);
  React.useEffect(function () {
    if (!(options !== null && options !== void 0 && options.lazyLoad)) {
      load(options);
    } // we leave cleaning to a seperate useEffect cleanup step

  }, [query, options.lazyLoad, options.ignoreVariableUpdates ? void 0 : options.variables]);
  return {
    data: data,
    loading: loading,
    error: error,
    load: load,
    cancel: cancelRequest || function () {}
  };
}

function getLayerConfig$1(_ref) {
  var tileString = _ref.tileString,
      theme = _ref.theme;
  return {
    id: "occurrences",
    type: "circle",
    source: {
      type: "vector",
      tiles: [tileString]
    },
    "source-layer": "occurrence",
    paint: {
      // make circles larger as the user zooms from z12 to z22
      "circle-radius": {
        property: "total",
        type: "interval",
        //stops: [[0, 2]]
        stops: [[0, 2], [10, 3], [100, 5], [1000, 8], [10000, 12]]
      },
      // color circles by ethnicity, using data-driven styles
      "circle-color": {
        property: "total",
        type: "interval",
        stops: [0, 10, 100, 1000, 10000].map(function (x, i) {
          return [x, theme.mapDensityColors[i]];
        })
      },
      "circle-opacity": {
        property: "total",
        type: "interval",
        // stops: theme.darkTheme ? [[0, .6], [10, 0.7], [100, 0.8], [1000, 0.8], [10000, 0.9]] : [[0, 1], [10, 0.8], [100, 0.7], [1000, 0.6], [10000, 0.6]]
        stops: [[0, 1], [10, 0.8], [100, 0.7], [1000, 0.6], [10000, 0.6]]
      },
      "circle-stroke-color": theme.mapDensityColors[1],
      "circle-stroke-width": {
        property: "total",
        type: "interval",
        stops: [[0, 1], [10, 0]]
      }
    }
  };
}

var _excluded$1p = ["query", "onMapClick", "predicateHash"];

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf__default["default"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default["default"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default["default"](this, result); }; }

function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Map$9 = /*#__PURE__*/function (_Component) {
  _inherits__default["default"](Map, _Component);

  var _super = _createSuper$5(Map);

  function Map(props) {
    var _this;

    _classCallCheck__default["default"](this, Map);

    _this = _super.call(this, props);
    _this.addLayer = _this.addLayer.bind(_assertThisInitialized__default["default"](_this));
    _this.updateLayer = _this.updateLayer.bind(_assertThisInitialized__default["default"](_this));
    _this.fitBbox = _this.fitBbox.bind(_assertThisInitialized__default["default"](_this));
    _this.myRef = /*#__PURE__*/React__default["default"].createRef();
    _this.state = {};
    return _this;
  }

  _createClass__default["default"](Map, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props$defaultMa, _this$props$defaultMa2, _this$props$defaultMa3;

      var mapStyle = this.props.theme.darkTheme ? 'dark-v9' : 'light-v9';
      mapboxgl__default["default"].accessToken = env.MAPBOX_KEY;
      this.map = new mapboxgl__default["default"].Map({
        container: this.myRef.current,
        style: "mapbox://styles/mapbox/".concat(mapStyle),
        zoom: sessionStorage.getItem('mapZoom') || ((_this$props$defaultMa = this.props.defaultMapSettings) === null || _this$props$defaultMa === void 0 ? void 0 : _this$props$defaultMa.zoom) || 0,
        center: [sessionStorage.getItem('mapLng') || ((_this$props$defaultMa2 = this.props.defaultMapSettings) === null || _this$props$defaultMa2 === void 0 ? void 0 : _this$props$defaultMa2.lng) || 0, sessionStorage.getItem('mapLat') || ((_this$props$defaultMa3 = this.props.defaultMapSettings) === null || _this$props$defaultMa3 === void 0 ? void 0 : _this$props$defaultMa3.lat) || 0]
      });
      this.map.addControl(new mapboxgl__default["default"].NavigationControl({
        showCompass: false
      }), 'top-left');
      this.map.on("load", this.addLayer);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.map.remove();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      if (prevProps.query !== this.props.query && this.mapLoaded) {
        this.updateLayer();
      }

      if (prevProps.bbox !== this.props.bbox && typeof this.props.bbox !== 'undefined') {
        this.fitBbox(this.props.bbox);
      }

      if (prevProps.theme !== this.props.theme && this.mapLoaded) {
        var mapStyle = this.props.theme.darkTheme ? 'dark-v9' : 'light-v9';
        this.map.setStyle("mapbox://styles/mapbox/".concat(mapStyle));
        this.map.on('style.load', function () {
          _this2.updateLayer();
        });
      }
    }
  }, {
    key: "updateLayer",
    value: function updateLayer() {
      var layer = this.map.getSource("occurrences");

      if (layer) {
        this.map.removeLayer("occurrences");
        this.map.removeSource("occurrences");
        this.addLayer();
      } else {
        this.addLayer();
      }
    }
  }, {
    key: "fitBbox",
    value: function fitBbox(_ref) {
      var south = _ref.south,
          west = _ref.west,
          north = _ref.north,
          east = _ref.east;
      if (typeof south !== 'number') return null; // https://docs.mapbox.com/mapbox-gl-js/example/fitbounds/

      this.map.fitBounds([[west, south], [east, north]], {
        duration: 0,
        padding: 100,
        maxZoom: 8
      });
    }
  }, {
    key: "addLayer",
    value: function addLayer() {
      var _this3 = this;

      var tileString = "".concat(env.API_V2, "/map/occurrence/adhoc/{z}/{x}/{y}.mvt?style=scaled.circles&mode=GEO_CENTROID&srs=EPSG%3A3857&squareSize=256&predicateHash=").concat(this.props.predicateHash);
      this.map.addLayer(getLayerConfig$1({
        tileString: tileString,
        theme: this.props.theme
      }), "poi-scalerank2");
      var map = this.map;

      if (!this.mapLoaded) {
        // remember map position
        map.on('zoomend', function () {
          var center = map.getCenter();
          sessionStorage.setItem('mapZoom', map.getZoom());
          sessionStorage.setItem('mapLng', center.lng);
          sessionStorage.setItem('mapLat', center.lat);
        });
        map.on('moveend', function () {
          var center = map.getCenter();
          sessionStorage.setItem('mapZoom', map.getZoom());
          sessionStorage.setItem('mapLng', center.lng);
          sessionStorage.setItem('mapLat', center.lat);
        });
        map.on('click', function (e) {
          if (!e._defaultPrevented && _this3.props.onMapClick) _this3.props.onMapClick();
        });
        map.on('error', function (e) {
          var _e$error;

          if ((e === null || e === void 0 ? void 0 : (_e$error = e.error) === null || _e$error === void 0 ? void 0 : _e$error.status) === 400 && _this3.props.registerPredicate) {
            _this3.props.registerPredicate();
          }
        });
      }

      this.mapLoaded = true;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props;
          _this$props.query;
          _this$props.onMapClick;
          _this$props.predicateHash;
          var props = _objectWithoutProperties__default["default"](_this$props, _excluded$1p);

      return react.jsx("div", _extends__default["default"]({
        ref: this.myRef
      }, props));
    }
  }]);

  return Map;
}(React.Component);

var mapComponent$1 = function mapComponent(_ref2) {
  var theme = _ref2.theme;
  return /*#__PURE__*/react.css("border:1px solid ", theme.paperBorderColor, ";border-radius:", theme.borderRadius, "px;canvas:focus{outline:none;}" + ("" ), "" );
};

var _excluded$1o = ["query", "loading", "total", "predicateHash", "registerPredicate", "defaultMapSettings", "bbox", "style", "className"];

function Map$8(_ref) {
  var query = _ref.query;
      _ref.loading;
      _ref.total;
      var predicateHash = _ref.predicateHash,
      registerPredicate = _ref.registerPredicate,
      defaultMapSettings = _ref.defaultMapSettings,
      bbox = _ref.bbox,
      style = _ref.style,
      className = _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$1o);

  var theme = React.useContext(ThemeContext);
  return react.jsx(Map$9, {
    style: style,
    className: className,
    defaultMapSettings: defaultMapSettings,
    predicateHash: predicateHash,
    css: mapComponent$1({
      theme: theme
    }),
    theme: theme,
    query: query,
    onMapClick: function onMapClick(e) {
      return showList(false);
    },
    registerPredicate: registerPredicate,
    bbox: bbox
  });
}

var _excluded$1n = ["mapSettings", "rootPredicate"];

function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$j(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var intervalSize = .25;
var OCCURRENCE_MAP$1 = "\nquery map($predicate: Predicate){\n  occurrenceSearch(predicate: $predicate) {\n    _meta\n    stats {\n      decimalLatitude {\n        min\n        max\n      }\n    }\n    histogram {\n      decimalLongitude(interval: ".concat(intervalSize, ") {\n        bounds\n      }\n    }\n    documents {\n      total\n    }\n    _v1PredicateHash\n  }\n}\n");

function Map$7(_ref) {
  var _data$occurrenceSearc2, _data$occurrenceSearc3, _data$occurrenceSearc4, _data$occurrenceSearc5, _data$occurrenceSearc6;

  var mapSettings = _ref.mapSettings,
      rootPredicate = _ref.rootPredicate;
      _objectWithoutProperties__default["default"](_ref, _excluded$1n);

  var _useQuery = useQuery(OCCURRENCE_MAP$1, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      bbox = _useState2[0],
      setBbox = _useState2[1];

  var _useState3 = React.useState(hash__default["default"](rootPredicate)),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      queryId = _useState4[0];
      _useState4[1];

  React.useEffect(function () {
    loadHashAndCount({
      rootPredicate: rootPredicate
    });
  }, [queryId]);
  React.useEffect(function () {
    if (data !== null && data !== void 0 && data.occurrenceSearch) {
      var _data$occurrenceSearc = data === null || data === void 0 ? void 0 : data.occurrenceSearch,
          stats = _data$occurrenceSearc.stats,
          histogram = _data$occurrenceSearc.histogram;

      var lat = stats.decimalLatitude;
      var bounds = histogram.decimalLongitude.bounds;

      if (bounds) {
        var box = _objectSpread$j({
          south: lat.min,
          north: lat.max
        }, bounds);

        setBbox(box);
      } else {
        setBbox();
      }
    }
  }, [data]);
  var loadHashAndCount = React.useCallback(function (_ref2) {
    var rootPredicate = _ref2.rootPredicate;
    var predicate = {
      type: 'and',
      predicates: [rootPredicate, {
        type: 'equals',
        key: 'hasCoordinate',
        value: true
      }].filter(function (x) {
        return x;
      })
    };
    load({
      keepDataWhileLoading: true,
      variables: {
        predicate: predicate
      }
    });
  }, []);
  var registrationEmbargo;
  /**
   * Allow the map to register the predicate again. This can be useful when tile with status code 400 errors come back. 
   * But it should only be allowed to do every so often as we do not want to send request 500 times a second when an error is persistent.
   * In theory it should only ever be called once and that is in the relatively rare case when the tile server is redployed just as someone is browsing the map.
   */

  var registerPredicate = React.useCallback(function () {
    if (registrationEmbargo) return;
    registrationEmbargo = true;
    window.setTimeout(function () {
      return registrationEmbargo = false;
    }, 10000); //only allow registering an error every 10 seconds.

    console.log('load anew');
    loadHashAndCount({
      rootPredicate: rootPredicate
    });
  }, [queryId]);
  var options = {
    loading: loading,
    error: error,
    total: data === null || data === void 0 ? void 0 : (_data$occurrenceSearc2 = data.occurrenceSearch) === null || _data$occurrenceSearc2 === void 0 ? void 0 : (_data$occurrenceSearc3 = _data$occurrenceSearc2.documents) === null || _data$occurrenceSearc3 === void 0 ? void 0 : _data$occurrenceSearc3.total,
    query: (data === null || data === void 0 ? void 0 : (_data$occurrenceSearc4 = data.occurrenceSearch) === null || _data$occurrenceSearc4 === void 0 ? void 0 : (_data$occurrenceSearc5 = _data$occurrenceSearc4._meta) === null || _data$occurrenceSearc5 === void 0 ? void 0 : _data$occurrenceSearc5.query) || {},
    predicateHash: data === null || data === void 0 ? void 0 : (_data$occurrenceSearc6 = data.occurrenceSearch) === null || _data$occurrenceSearc6 === void 0 ? void 0 : _data$occurrenceSearc6._v1PredicateHash,
    rootPredicate: rootPredicate,
    registerPredicate: registerPredicate,
    defaultMapSettings: mapSettings,
    bbox: bbox
  }; // if (!bbox) return null;

  if (typeof window !== 'undefined') {
    return react.jsx(Map$8, _extends__default["default"]({}, options, {
      style: {
        height: 500
      }
    }));
  } else {
    return react.jsx("h1", null, "Map placeholder");
  }
}

var _excluded$1m = ["rootPredicate", "className"];
function OccurrenceMap(_ref) {
  var rootPredicate = _ref.rootPredicate,
      className = _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$1m);

  var theme = React.useContext(ThemeContext);

  var _getClasses = getClasses(theme.prefix, 'occurrenceMap', {
    /*modifiers goes here*/
  }, className),
      classNames = _getClasses.classNames; // return <Div css={styles.occurrenceMap({theme})} {...props} />


  return react.jsx(Map$7, {
    classNames: classNames,
    rootPredicate: rootPredicate
  });
}

var en = {
	"dataset.datasetSearchTitle": "Dataset search",
	"dataset.longType.OCCURRENCE": "Occurrence dataset",
	"dataset.longType.CHECKLIST": "Checklist dataset",
	"dataset.longType.SAMPLING_EVENT": "Sampling event",
	"dataset.longType.METADATA": "Metadata dataset",
	"dataset.metricHighlights.occurrences": "Occurrences",
	"dataset.metricHighlights.withTaxonMatch": "With taxon match",
	"dataset.metricHighlights.withCoordinates": "With coordinates",
	"dataset.metricHighlights.withYear": "With year",
	"dataset.metricHighlights.acceptedNames": "Accepted names",
	"dataset.metricHighlights.synonyms": "Synonyms",
	"dataset.metricHighlights.overlapWithNub": "Overlap with GBIF Backbone",
	"dataset.metricHighlights.overlapWithCol": "Overlap with Catalogue of Life",
	"dataset.noStatsForMetadata": "No statistics available for metadata only datasets",
	"dataset.viewArticle": "View article",
	"dataset.registeredDate": "Registered {DATE}",
	"dataset.constituentOf": "Constituent of",
	"dataset.dataset": "Dataset",
	"dataset.taxonomy": "Taxonomy",
	"dataset.project": "Project",
	"dataset.metrics": "Metrics",
	"dataset.constituents": "Constituents",
	"dataset.download": "Download",
	"dataset.datasetHomepage": "Home page",
	"dataset.nConstituentDatasets": "{NUMBER_FORMATED} {NUMBER, plural, one{constituent dataset} other{constituent datasets}}",
	"dataset.consistuentDatasets": "Constituent datasets",
	"dataset.noConstituentDatasets": "No constituent datasets",
	"dataset.logs": "Logs",
	"dataset.noDownloads": "No downloads yet",
	"dataset.finished": "Finished",
	"dataset.activity": "Activity",
	"dataset.title": "Title",
	"dataset.projectId": "Project ID",
	"dataset.studyArea": "Study area",
	"dataset.publishedBy": "Published by",
	"dataset.mediatedBy": "Mediated by",
	"dataset.description": "Description",
	"dataset.metadataLanguage": "Metadata language",
	"dataset.dataLanguage": "Data language",
	"dataset.dataDescriptions": "External data descriptions",
	"dataset.purpose": "Purpose",
	"dataset.methodology": "Methodology",
	"dataset.studyExtent": "Study extent",
	"dataset.keywords": "Keywords",
	"dataset.qualityControl": "Quality control",
	"dataset.sampling": "Sampling",
	"dataset.methodSteps": "Method steps",
	"dataset.nDownloadEvents": "{NUMBER_FORMATED} {NUMBER, plural, one{download event} other{download events}}",
	"dataset.nFromDataset": "{NUMBER_FORMATED} {NUMBER, plural, one{occurrence from this dataset} other{occurrences from this dataset}}",
	"dataset.funding": "Funding",
	"dataset.contacts": "Contacts",
	"dataset.registration": "GBIF registration",
	"dataset.dataDescription": "Data description",
	"dataset.bibliography": "Bibliography",
	"dataset.citation": "Citation",
	"dataset.temporalCoverages": "Temporal scope",
	"dataset.history": "History",
	"dataset.ingestNow": "Ingest now",
	"dataset.readFullDescription": "More",
	"dataset.howToCite": "How to cite",
	"dataset.geographicCoverages": "Geographic scope",
	"dataset.taxonomicCoverages": "Taxonomic scope",
	"dataset.additionalInfo": "Additional info",
	"dataset.publishingCountriesAreas": "Publishing countries and areas",
	"dataset.originalArchive": "Source archive",
	"dataset.annotatedEml": "GBIF annotated metadata",
	"dataset.license": "Licence",
	"dataset.recommended": "Recommended",
	"dataset.processedOccurrences": "GBIF annotated archive",
	"dataset.noDescriptionProvided": "No description available",
	"dataset.pNetwork": "{NUMBER, plural, one{Network} other{Networks}}",
	"dataset.parentEvent": "Parent event",
	"dataset.eventDescription": "Event description",
	"dataset.siblingEvents": "Sibling events",
	"dataset.childEvents": "Child events",
	"dataset.events": "Events",
	"dataset.occurrenceCount": "Occurrence count",
	"dataset.inDataset": "In",
	"dataset.samplingArticleLink": "More about sampling events on GBIF.org",
	"dataset.registry.failedSinceSuccess": "Failed attempts since last successful ingestion",
	"dataset.registry.lastFailed": "Last failed attempt",
	"dataset.registry.registrationDate": "Registration date",
	"dataset.registry.lastSuccess": "Last successful ingestion",
	"dataset.registry.lastWithChange": "Last ingestion with changes",
	"dataset.registry.noEntries": "This dataset has no ingestion entries",
	"dataset.registry.lastWithDataChange": "Last ingestion with data change",
	"dataset.registry.occInLastIngestion": "Occurrences in last ingestion",
	"dataset.registry.completionReasons": "Ingestion completion reasons",
	"dataset.registry.unfinished": "Unfinished ingestions",
	"dataset.registry.total": "Ingestions in total",
	"dataset.registry.endpoints": "Endpoints",
	"dataset.registry.installationContacts": "Installation contacts",
	"dataset.registry.installation": "Installation",
	"dataset.registry.dataLastChanged": "Data last changed",
	"dataset.registry.pubDate": "Publication date",
	"dataset.registry.hostedBy": "Hosted by",
	"dataset.registry.hostingStatus": "Hosting status",
	"dataset.registry.metdataLastModified": "Metadata last modified",
	"dataset.registry.preferredIdentifier": "Preferred identifier",
	"dataset.registry.alternativeIdentifier": "Alternative identifiers",
	"dataset.registry.ORPHANED": "Orphaned dataset",
	"dataset.registry.RESCUED": "Rescued orphan dataset",
	"dataset.registry.ADOPTED": "Adopted dataset",
	"dataset.registry.neverIngested": "Never ingested",
	"dataset.registry.inIngestionQueue": "Is in ingestion queue",
	"dataset.registry.addingToQueue": "Adding to queue",
	"dataset.registry.unableToStart": "Unable to start ingestion",
	"dataset.registry.ingestionChartExplainer": "Most recent ingestions. Top left is the latest.",
	"dataset.registry.ingestionStatus": "Ingestion status",
	"dataset.registry.itemInIngestionQueue": "Items in ingestion queue",
	"dataset.registry.datasetIngestionStatus": "Dataset ingestion status",
	"dataset.registry.gbifIngestionStatus": "GBIF ingestion status",
	"dataset.registry.lastIngestionSuccess": "Last ingestion a success",
	"dataset.registry.lastIngestionFailed": "Last ingestion failed",
	"dataset.registry.outOfSync": "Out of sync",
	"dataset.registry.becauseTrustedContact": "Because you are trusted contact",
	"dataset.registry.registrationDetails": "GBIF registration details",
	"catalogues.occurrences": "Occurrences",
	"catalogues.datasets": "Datasets",
	"catalogues.species": "Species",
	"catalogues.publishers": "Publishers",
	"catalogues.literature": "Literature",
	"catalogues.collections": "Collections",
	"catalogues.institutions": "Institutions",
	"tableHeaders.features": "Features",
	"tableHeaders.citations": "Citations",
	"tableHeaders.occurrences": "Occurrences",
	"tableHeaders.numberSpecimens": "Number of specimens",
	"tableHeaders.gbifNumberSpecimens": "Specimens in GBIF",
	"tableHeaders.title": "Title",
	"tableHeaders.titleAndAbstract": "Title and abstract",
	"tableHeaders.altmetric": "Altmetric",
	"tableHeaders.registered": "Registered",
	"tableHeaders.hostedDatasets": "Hosted datasets",
	"tableHeaders.pubDatasets": "Published datasets",
	"intervals.description.lt": "Less than {to}",
	"intervals.description.lte": "Less or equal {to}",
	"intervals.description.gt": "Greater than {from}",
	"intervals.description.gte": "Greater or equal {from}",
	"intervals.description.e": "Equals {is}",
	"intervals.compact.between": "{from} to {to}",
	"intervals.compact.lt": "Below {to}",
	"intervals.compact.gt": "Above {from}",
	"intervals.compact.e": "{from}",
	"intervals.compactMeters.between": "{from}m to {to}m",
	"intervals.compactMeters.lt": "Below {to}m",
	"intervals.compactMeters.gt": "Above {from}m",
	"intervals.compactMeters.e": "{from}m",
	"intervals.compactTime.between": "{from} to {to}",
	"intervals.compactTime.lt": "Before {to}",
	"intervals.compactTime.gt": "After {from}",
	"intervals.compactTime.e": "{from}",
	"intervals.year.between": "Year {from} to {to}",
	"intervals.year.lt": "Before year {to}",
	"intervals.year.gt": "After year {from}",
	"intervals.year.e": "Year is {from}",
	"intervals.coordinateUncertainty.between": "Coordinate uncertainty {from}m to {to}m",
	"intervals.coordinateUncertainty.lt": "Coordinate uncertainty below {to}m",
	"intervals.coordinateUncertainty.gt": "Coordinate uncertainty above {from}m",
	"intervals.coordinateUncertainty.e": "Coordinate uncertainty is {from}m",
	"intervals.depth.between": "Depth {from} to {to}",
	"intervals.depth.lt": "Depth below {to}",
	"intervals.depth.gt": "Depth above {from}",
	"intervals.depth.e": "Depth is {from}",
	"intervals.organismQuantity.between": "Organism quantity {from} to {to}",
	"intervals.organismQuantity.lt": "Organism quantity below {to}",
	"intervals.organismQuantity.gt": "Organism quantity above {from}",
	"intervals.organismQuantity.e": "Organism quantity is {from}",
	"intervals.sampleSizeValue.between": "Sample size value {from} to {to}",
	"intervals.sampleSizeValue.lt": "Sample size value below {to}",
	"intervals.sampleSizeValue.gt": "Sample size value above {from}",
	"intervals.sampleSizeValue.e": "Sample size value is {from}",
	"intervals.relativeOrganismQuantity.between": "Relative organism quantity {from} to {to}",
	"intervals.relativeOrganismQuantity.lt": "Relative organism quantity below {to}",
	"intervals.relativeOrganismQuantity.gt": "Relative organism quantity above {from}",
	"intervals.relativeOrganismQuantity.e": "Relative organism quantity is {from}",
	"intervals.elevation.between": "Elevation {from} to {to}",
	"intervals.elevation.lt": "Elevation below {to}",
	"intervals.elevation.gt": "Elevation above {from}",
	"intervals.elevation.e": "Elevation is {from}",
	"filters.dwcaExtension.name": "DWCA extension",
	"filters.dwcaExtension.count": "{num, plural, one { DWCA extension } other {# DWCA extensions}}",
	"filters.dwcaExtension.description": "A short description of the component should be placed here",
	"filters.taxonKey.name": "Scientific name",
	"filters.taxonKey.count": "{num, plural, one {scientific name} other {# scientific names}}",
	"filters.taxonKey.description": "The scientific name as it appears in the GBIF backbone taxonomy. These names are normalized to ease search across datasets. It is possible that an originally-provided name might be misinterpreted or unknown. To search the names as provided use the \"Verbatim scientific name\" filter.",
	"filters.basisOfRecord.name": "Basis of record",
	"filters.basisOfRecord.count": "{num, plural, one {basis of record} other {# bases of records}}",
	"filters.basisOfRecord.isNotNull": "Has a basis of record",
	"filters.basisOfRecord.isNull": "Has no basis of record",
	"filters.basisOfRecord.description": "The nature of the evidence upon which the record is based.",
	"filters.institutionCode.name": "Institution code",
	"filters.institutionCode.count": "{num, plural, one {institution code} other {# institution codes}}",
	"filters.institutionCode.description": "The code (or acronym) for the institution having custody of the object(s) or information referred to in the record.",
	"filters.catalogNumber.name": "Catalogue number",
	"filters.catalogNumber.count": "{num, plural, one { catalogue number } other {# catalogue numbers}}",
	"filters.catalogNumber.description": "The identifier for the record within a catalogue or collection.",
	"filters.mediaType.name": "Media type",
	"filters.mediaType.count": "{num, plural, one {media type} other {# media types}}",
	"filters.mediaType.description": "The types of media accessible for this record.",
	"filters.occurrenceIssue.name": "Issues and flags",
	"filters.occurrenceIssue.count": "{num, plural, one {issue or flag} other {# issues and flags}}",
	"filters.occurrenceIssue.isNotNull": "Has issues",
	"filters.occurrenceIssue.isNull": "Has no issues",
	"filters.occurrenceIssue.description": "The types of issues or flags of potential interest discovered in processing the data.",
	"filters.occurrenceCountry.name": "Country",
	"filters.occurrenceCountry.count": "{num, plural, one {country} other {# countries}}",
	"filters.occurrenceCountry.description": "The country or territory where the event occurred",
	"filters.publishingCountryCode.name": "Publishing country",
	"filters.publishingCountryCode.count": "{num, plural, one {publishing country} other {# publishing countries}}",
	"filters.publishingCountryCode.description": "The ISO code for the country or territory in which the data publisher is located",
	"filters.q.name": "Text search",
	"filters.q.count": "{num, plural, one {text string} other {# search strings}}",
	"filters.q.description": "Find records with similar matching text among text fields. For matching text within a specific field, use corresponding filter, such as the one for \"Scientific Name\".",
	"filters.coordinates.name": "Coordinates",
	"filters.elevation.name": "Elevation",
	"filters.elevation.count": "{num, plural, one {elevation filter} other {# elevation filters}}",
	"filters.elevation.description": "The distance above a vertical reference point (usually mean sea level or a geoid) in metres.",
	"filters.license.name": "Licence",
	"filters.license.count": "{num, plural, one {licence} other {# licences}}",
	"filters.license.description": "The legal licence or waiver under which the record is shared.",
	"filters.datasetKey.name": "Dataset",
	"filters.datasetKey.count": "{num, plural, one {dataset} other {# datasets}}",
	"filters.datasetKey.description": "The title of the dataset under which the record is shared.",
	"filters.publisherKey.name": "Publisher",
	"filters.publisherKey.count": "{num, plural, one {publisher} other {# publishers}}",
	"filters.publisherKey.description": "The name of the organization responsible for sharing the dataset in which the record is included.",
	"filters.hostingOrganizationKey.name": "Hosting organization",
	"filters.hostingOrganizationKey.count": "{num, plural, one {host} other {# hosts}}",
	"filters.hostingOrganizationKey.description": "The name of the organization hosting the dataset in which the record is published.",
	"filters.country.name": "Country",
	"filters.country.count": "{num, plural, one {country} other {# countries}}",
	"filters.countriesOfCoverage.name": "Country of coverage",
	"filters.countriesOfCoverage.count": "{num, plural, one {country of coverage} other {# countries of coverage}}",
	"filters.countriesOfResearcher.name": "Country of researcher",
	"filters.countriesOfResearcher.count": "{num, plural, one {country of researcher} other {# countries of researchers}}",
	"filters.typeStatus.name": "Type status",
	"filters.typeStatus.count": "{num, plural, one {type status} other {# type statuses}}",
	"filters.typeStatus.isNotNull": "Has a type status",
	"filters.typeStatus.isNull": "The type status",
	"filters.typeStatus.description": "The type designation of a specimen.",
	"filters.year.name": "Year",
	"filters.year.count": "{num, plural, one {year filter} other {# year filters}}",
	"filters.year.description": "The year in which the event occurred.",
	"filters.sampleSizeUnit.name": "Sample size unit",
	"filters.sampleSizeUnit.count": "{num, plural, one {sample size unit} other {# sample size units}}",
	"filters.sampleSizeUnit.description": "The unit of measurement for the \"sample size value\".",
	"filters.coordinateUncertainty.name": "Coordinate uncertainty",
	"filters.coordinateUncertainty.count": "{num, plural, one {Coordinate uncertainty} other {# coordinate uncertainty filters}}",
	"filters.coordinateUncertainty.description": "A measure of the minimum distance in metres from a coordinate within which a locality might be interpreted to be.",
	"filters.depth.name": "Depth",
	"filters.depth.count": "{num, plural, one { depth } other {# depths}}",
	"filters.depth.description": "The distance below a local surface, in metres.",
	"filters.organismQuantity.name": "Organism quantity",
	"filters.organismQuantity.count": "{num, plural, one { organism quantity } other {# organism quantitys}}",
	"filters.organismQuantity.description": "The value for the quantity of organisms, where the type of measurement is given in the \"Organism quantity type\".",
	"filters.sampleSizeValue.name": "Sample size value",
	"filters.sampleSizeValue.count": "{num, plural, one { sample size value } other {# sample size values}}",
	"filters.sampleSizeValue.description": "The value for the size of a sample, where the units of measurement are given in the \"Sample size unit\".",
	"filters.relativeOrganismQuantity.name": "Relative organism quantity",
	"filters.relativeOrganismQuantity.count": "{num, plural, one { relative organism quantity } other {# relative organism quantities}}",
	"filters.relativeOrganismQuantity.description": "The amount of biological material relative to the size of a sample, calculated as organismQuantity per sampleSize when the organismQuantityType and sampleSizeUnit are unambiguous.",
	"filters.month.name": "Month",
	"filters.month.count": "{num, plural, one { month } other {# months}}",
	"filters.month.description": "The integer month in which the event occurred.",
	"filters.continent.name": "Continent",
	"filters.continent.count": "{num, plural, one { continent } other {# continents}}",
	"filters.continent.description": "The name of the continent in which the location occurs.  This field is not inferred but only populated if provided by the dataset publisher. Applying this filter may exclude relevant records.",
	"filters.protocol.name": "Publishing protocol",
	"filters.protocol.count": "{num, plural, one { protocol } other {# protocols}}",
	"filters.protocol.description": "The technical protocol through which the dataset is shared.",
	"filters.establishmentMeans.name": "Establishment means",
	"filters.establishmentMeans.count": "{num, plural, one { establishment means } other {# establishment means}}",
	"filters.establishmentMeans.description": "The means by which the organism was introduced to a given place at a given time.",
	"filters.recordedBy.name": "Recorded by",
	"filters.recordedBy.count": "{num, plural, one { recorded by } other {# recorded bys}}",
	"filters.recordedBy.description": "The names of the person, people, groups or organizations responsible for recording the original occurrence.",
	"filters.recordNumber.name": "Record number",
	"filters.recordNumber.count": "{num, plural, one { record number } other {# record numbers}}",
	"filters.recordNumber.description": "An identifier given to the occurrence at the time it was recorded.",
	"filters.collectionCode.name": "Collection code",
	"filters.collectionCode.count": "{num, plural, one { collection code } other {# collection codes}}",
	"filters.collectionCode.description": "A short description of the component should be placed here",
	"filters.recordedById.name": "Recorded by ID",
	"filters.recordedById.count": "{num, plural, one { recorded by ID } other {# recorded by IDs}}",
	"filters.recordedById.description": "The identifier for the person, people, groups or organizations responsible for recording the original occurrence.",
	"filters.identifiedById.name": "Identified by ID",
	"filters.identifiedById.count": "{num, plural, one { identified by ID } other {# identified by IDs}}",
	"filters.identifiedById.description": "The identifier for the person, people, groups or organizations responsible for determining the scientific name of the organism.",
	"filters.occurrenceId.name": "Occurrence id",
	"filters.occurrenceId.count": "{num, plural, one { occurrence ID } other {# occurrence IDs}}",
	"filters.occurrenceId.description": "The unique identifier for the occurrence record.",
	"filters.organismId.name": "Organism id",
	"filters.organismId.count": "{num, plural, one { organism ID } other {# organism IDs}}",
	"filters.organismId.description": "The unique identifier for the organism in the record.",
	"filters.locality.name": "Locality",
	"filters.locality.count": "{num, plural, one { locality } other {# localities}}",
	"filters.locality.description": "The specific part of the description of the place.",
	"filters.waterBody.name": "Water body",
	"filters.waterBody.count": "{num, plural, one { water body } other {# water bodies}}",
	"filters.waterBody.description": "The name of the water body in which the location occurs.",
	"filters.stateProvince.name": "State province",
	"filters.stateProvince.count": "{num, plural, one { state province } other {# state provinces}}",
	"filters.stateProvince.description": "The name of the next administrative region smaller than country in which the location occurs.",
	"filters.eventId.name": "Event ID",
	"filters.eventId.count": "{num, plural, one { event ID } other {# event IDs}}",
	"filters.eventId.description": "The unique identifier for the event in the record.",
	"filters.samplingProtocol.name": "Sampling protocol",
	"filters.samplingProtocol.count": "{num, plural, one { sampling protocol } other {# sampling protocols}}",
	"filters.samplingProtocol.description": "The name of, reference to or description of the method or protocol used during an event.",
	"filters.occurrenceStatus.name": "Occurrence status",
	"filters.occurrenceStatus.count": "{num, plural, one { occurrence status } other {# occurrence statuses}}",
	"filters.occurrenceStatus.description": "The presence or absence of any organisms of the given taxon.",
	"filters.gadmGid.name": "Administrative area",
	"filters.gadmGid.count": "{num, plural, one { administrative area } other {# administrative areas}}",
	"filters.gadmGid.description": "The name of any administrative area from GADM.org determined during record processing.",
	"filters.identifiedBy.name": "Identified by",
	"filters.identifiedBy.count": "{num, plural, one { identified by } other {# identified bys}}",
	"filters.identifiedBy.description": "The person, people, groups or organizations responsible for determining the scientific name of the Organism.",
	"filters.isInCluster.name": "Is in cluster",
	"filters.isInCluster.count": "{num, plural, one { is in cluster } other {# are in clusters}}",
	"filters.isInCluster.description": "Whether the record was determined to have related records.",
	"filters.datasetType.name": "Dataset type",
	"filters.datasetType.count": "{num, plural, one { dataset type } other {# dataset types}}",
	"filters.datasetType.description": "A short description of the component should be placed here",
	"filters.datasetSubtype.name": "Dataset subtype",
	"filters.datasetSubtype.count": "{num, plural, one { dataset subtype } other {# dataset subtypes}}",
	"filters.datasetSubtype.description": "A short description of the component should be placed here",
	"filters.institutionKey.name": "Institution",
	"filters.institutionKey.count": "{num, plural, one { institution } other {# institutions}}",
	"filters.institutionKey.description": "The name of the institution having custody of the object(s) or information referred to in the record.",
	"filters.name.name": "Name",
	"filters.name.count": "{num, plural, one { name } other {# names}}",
	"filters.name.description": "A short description of the component should be placed here",
	"filters.city.name": "City",
	"filters.city.count": "{num, plural, one { city } other {# cities}}",
	"filters.city.description": "A short description of the component should be placed here",
	"filters.code.name": "Code",
	"filters.code.count": "{num, plural, one { code } other {# codes}}",
	"filters.code.description": "A short description of the component should be placed here",
	"filters.verbatimScientificName.name": "Verbatim scientific name",
	"filters.verbatimScientificName.count": "{num, plural, one { verbatim scientific name } other {# verbatim scientific names}}",
	"filters.verbatimScientificName.description": "The scientific name as provided by the data publisher without any normalization.",
	"filters.networkKey.name": "Network key",
	"filters.networkKey.count": "{num, plural, one { network key } other {# network keys}}",
	"filters.networkKey.description": "A short description of the component should be placed here",
	"filters.literatureType.name": "Literature type",
	"filters.literatureType.count": "{num, plural, one { literature type } other {# literature types}}",
	"filters.literatureType.description": "What type of literature does the citation come from.",
	"filterSupport.nullOrNot.isNotNull": "Must be defined",
	"filterSupport.nullOrNot.isNull": "Must not be defined",
	"filterSupport.invalidValue": "Invalid value",
	"filterSupport.aboutThisFilter": "About this filter",
	"filterSupport.existence": "Filter for existence",
	"filterSupport.showHelp": "Show help text",
	"filterSupport.back": "Back",
	"filterSupport.cancel": "Cancel",
	"filterSupport.apply": "Apply",
	"filterSupport.wildcardHelp": "Searches are case-insensitive, but accents are distinct (e.g. 'rio' vs 'río'). Use a wildcard (e.g. 'r?o') to find all matches.",
	"filterSupport.useWildcardPattern": "Search for the pattern",
	"filterSupport.showSuggestions": "Show suggestions",
	"filterSupport.excludeSelected": "Exclude selected",
	"counts.nResults": "{total, plural, one {# result} other {# results}}",
	"counts.nRecordsTotal": "{total, plural, one {# record in total} other {# records in total}}",
	"counts.nSelected": "{total, plural, other {# selected}}",
	"counts.nQualityFlags": "{total, plural, one {# quality flag} other {# quality flags}}",
	"counts.nAudioFiles": "{total, plural, one {# sound file} other {# sound files}}",
	"counts.nVideos": "{total, plural, one {# video} other {# videos}}",
	"counts.nImages": "{total, plural, one {# image} other {# images}}",
	"counts.nResultsWithCoordinates": "{total, plural, one {# result } other {# results}} with coordinates\n",
	"counts.nResultsWithImages": "{total, plural, one {# result } other {# results}} with images\n",
	"contact.position": "Position",
	"contact.organization": "Organization",
	"contact.email": "Email",
	"contact.address": "Address",
	"contact.roles": "Roles",
	"contact.userId": "User ID",
	"contact.name": "Name",
	"pagination.first": "First",
	"pagination.previous": "Previous",
	"pagination.next": "Next",
	"pagination.options": "Options",
	"pagination.pageXofY": "Page {current} of {total}\n",
	"pagination.moreFilters": "more",
	"search.tabs.table": "Table",
	"search.tabs.gallery": "Gallery",
	"search.tabs.map": "Map",
	"search.tabs.datasets": "Datasets",
	"search.tabs.download": "Download",
	"search.table.lockColumn": "Lock column",
	"search.placeholders.default": "Search",
	"search.placeholders.range": "Range or single value",
	"search.loadMore": "More",
	"phrases.loading": "loading",
	"phrases.loadError": "Failed to load",
	"phrases.close": "Close",
	"phrases.citation": "Citation",
	"phrases.citeAs": "Please use this citation in publications",
	"phrases.unknownDate": "Unknown date",
	"occurrenceFieldNames.gbifID": "GBIF ID",
	"occurrenceFieldNames.abstract": "Abstract",
	"occurrenceFieldNames.accessRights": "Access rights",
	"occurrenceFieldNames.accrualMethod": "Accrual method",
	"occurrenceFieldNames.accrualPeriodicity": "Accrual periodicity",
	"occurrenceFieldNames.accrualPolicy": "Accrual policy",
	"occurrenceFieldNames.alternative": "Alternative",
	"occurrenceFieldNames.audience": "Audience",
	"occurrenceFieldNames.available": "Available",
	"occurrenceFieldNames.bibliographicCitation": "Bibliographic citation",
	"occurrenceFieldNames.conformsTo": "Conforms to",
	"occurrenceFieldNames.contributor": "Contributor",
	"occurrenceFieldNames.coverage": "Coverage",
	"occurrenceFieldNames.created": "Created",
	"occurrenceFieldNames.creator": "Creator",
	"occurrenceFieldNames.date": "Date",
	"occurrenceFieldNames.dateAccepted": "Date accepted",
	"occurrenceFieldNames.dateCopyrighted": "Date copyrighted",
	"occurrenceFieldNames.dateSubmitted": "Date submitted",
	"occurrenceFieldNames.description": "Description",
	"occurrenceFieldNames.educationLevel": "Education level",
	"occurrenceFieldNames.extent": "Extent",
	"occurrenceFieldNames.format": "Format",
	"occurrenceFieldNames.hasFormat": "Has format",
	"occurrenceFieldNames.hasPart": "Has part",
	"occurrenceFieldNames.hasVersion": "Has version",
	"occurrenceFieldNames.identifier": "Identifier",
	"occurrenceFieldNames.instructionalMethod": "Instructional method",
	"occurrenceFieldNames.isFormatOf": "Is format of",
	"occurrenceFieldNames.isPartOf": "Is part of",
	"occurrenceFieldNames.isReferencedBy": "Is referenced by",
	"occurrenceFieldNames.isReplacedBy": "Is replaced by",
	"occurrenceFieldNames.isRequiredBy": "Is required by",
	"occurrenceFieldNames.isVersionOf": "Is version of",
	"occurrenceFieldNames.issued": "Issued",
	"occurrenceFieldNames.language": "Language",
	"occurrenceFieldNames.license": "Record licence",
	"occurrenceFieldNames.mediator": "Mediator",
	"occurrenceFieldNames.medium": "Medium",
	"occurrenceFieldNames.modified": "Modified",
	"occurrenceFieldNames.provenance": "Provenance",
	"occurrenceFieldNames.publisher": "Publisher",
	"occurrenceFieldNames.references": "References",
	"occurrenceFieldNames.relation": "Relation",
	"occurrenceFieldNames.replaces": "Replaces",
	"occurrenceFieldNames.requires": "Requires",
	"occurrenceFieldNames.rights": "Rights",
	"occurrenceFieldNames.rightsHolder": "Rights holder",
	"occurrenceFieldNames.source": "Source",
	"occurrenceFieldNames.spatial": "Spatial",
	"occurrenceFieldNames.subject": "Subject",
	"occurrenceFieldNames.tableOfContents": "Table of contents",
	"occurrenceFieldNames.temporal": "Temporal",
	"occurrenceFieldNames.title": "Title",
	"occurrenceFieldNames.type": "Type",
	"occurrenceFieldNames.valid": "Valid",
	"occurrenceFieldNames.institutionID": "Institution ID",
	"occurrenceFieldNames.collectionID": "Collection ID",
	"occurrenceFieldNames.datasetID": "Dataset ID",
	"occurrenceFieldNames.institutionCode": "Institution code",
	"occurrenceFieldNames.collectionCode": "Collection code",
	"occurrenceFieldNames.datasetName": "Dataset name",
	"occurrenceFieldNames.ownerInstitutionCode": "Owner institution code",
	"occurrenceFieldNames.basisOfRecord": "Basis of record",
	"occurrenceFieldNames.informationWithheld": "Information withheld",
	"occurrenceFieldNames.dataGeneralizations": "Data generalizations",
	"occurrenceFieldNames.dynamicProperties": "Dynamic properties",
	"occurrenceFieldNames.occurrenceID": "Occurrence ID",
	"occurrenceFieldNames.occurrenceId": "Occurrence ID",
	"occurrenceFieldNames.catalogNumber": "Catalogue number",
	"occurrenceFieldNames.recordNumber": "Record number",
	"occurrenceFieldNames.recordedBy": "Recorded by",
	"occurrenceFieldNames.recordedByID": "Recorded by ID",
	"occurrenceFieldNames.identifiedByID": "Identified by ID",
	"occurrenceFieldNames.individualCount": "Individual count",
	"occurrenceFieldNames.organismQuantity": "Organism quantity",
	"occurrenceFieldNames.organismQuantityType": "Organism quantity type",
	"occurrenceFieldNames.sex": "Sex",
	"occurrenceFieldNames.lifeStage": "Life stage",
	"occurrenceFieldNames.reproductiveCondition": "Reproductive condition",
	"occurrenceFieldNames.behavior": "Behavior",
	"occurrenceFieldNames.establishmentMeans": "Establishment means",
	"occurrenceFieldNames.degreeOfEstablishment": "Degree of establishment",
	"occurrenceFieldNames.pathway": "Pathway",
	"occurrenceFieldNames.occurrenceStatus": "Occurrence status",
	"occurrenceFieldNames.preparations": "Preparations",
	"occurrenceFieldNames.disposition": "Disposition",
	"occurrenceFieldNames.associatedReferences": "Associated references",
	"occurrenceFieldNames.associatedSequences": "Associated sequences",
	"occurrenceFieldNames.associatedTaxa": "Associated taxa",
	"occurrenceFieldNames.otherCatalogNumbers": "Other catalogue numbers",
	"occurrenceFieldNames.occurrenceRemarks": "Occurrence remarks",
	"occurrenceFieldNames.organismID": "Organism ID",
	"occurrenceFieldNames.organismName": "Organism name",
	"occurrenceFieldNames.organismScope": "Organism scope",
	"occurrenceFieldNames.associatedOccurrences": "Associated occurrences",
	"occurrenceFieldNames.associatedOrganisms": "Associated organisms",
	"occurrenceFieldNames.previousIdentifications": "Previous identifications",
	"occurrenceFieldNames.organismRemarks": "Organism remarks",
	"occurrenceFieldNames.materialSampleID": "Material sample ID",
	"occurrenceFieldNames.eventID": "Event ID",
	"occurrenceFieldNames.parentEventID": "Parent event ID",
	"occurrenceFieldNames.fieldNumber": "Field number",
	"occurrenceFieldNames.eventDate": "Event date",
	"occurrenceFieldNames.eventTime": "Event time",
	"occurrenceFieldNames.startDayOfYear": "Start day of year",
	"occurrenceFieldNames.endDayOfYear": "End day of year",
	"occurrenceFieldNames.year": "Year",
	"occurrenceFieldNames.month": "Month",
	"occurrenceFieldNames.day": "Day",
	"occurrenceFieldNames.verbatimEventDate": "Verbatim event date",
	"occurrenceFieldNames.habitat": "Habitat",
	"occurrenceFieldNames.samplingProtocol": "Sampling protocol",
	"occurrenceFieldNames.samplingEffort": "Sampling effort",
	"occurrenceFieldNames.sampleSizeValue": "Sample size value",
	"occurrenceFieldNames.sampleSizeUnit": "Sample size unit",
	"occurrenceFieldNames.fieldNotes": "Field notes",
	"occurrenceFieldNames.eventRemarks": "Event remarks",
	"occurrenceFieldNames.locationID": "Location ID",
	"occurrenceFieldNames.higherGeographyID": "Higher geography ID",
	"occurrenceFieldNames.higherGeography": "Higher geography",
	"occurrenceFieldNames.continent": "Continent",
	"occurrenceFieldNames.waterBody": "Water body",
	"occurrenceFieldNames.islandGroup": "Island group",
	"occurrenceFieldNames.island": "Island",
	"occurrenceFieldNames.countryCode": "Country code",
	"occurrenceFieldNames.stateProvince": "State province",
	"occurrenceFieldNames.county": "County",
	"occurrenceFieldNames.municipality": "Municipality",
	"occurrenceFieldNames.locality": "Locality",
	"occurrenceFieldNames.verbatimLocality": "Verbatim locality",
	"occurrenceFieldNames.verbatimElevation": "Verbatim elevation",
	"occurrenceFieldNames.verbatimDepth": "Verbatim depth",
	"occurrenceFieldNames.minimumDistanceAboveSurfaceInMeters": "Minimum distance above surface in metres",
	"occurrenceFieldNames.maximumDistanceAboveSurfaceInMeters": "Maximum distance above surface in metres",
	"occurrenceFieldNames.location": "Location",
	"occurrenceFieldNames.locationAccordingTo": "Location according to",
	"occurrenceFieldNames.locationRemarks": "Location remarks",
	"occurrenceFieldNames.decimalLatitude": "Decimal latitude",
	"occurrenceFieldNames.decimalLongitude": "Decimal longitude",
	"occurrenceFieldNames.coordinateUncertaintyInMeters": "Coordinate uncertainty in metres",
	"occurrenceFieldNames.coordinatePrecision": "Coordinate precision",
	"occurrenceFieldNames.pointRadiusSpatialFit": "Point radius spatial fit",
	"occurrenceFieldNames.verbatimCoordinateSystem": "Verbatim coordinate system",
	"occurrenceFieldNames.verbatimSRS": "Verbatim SRS",
	"occurrenceFieldNames.footprintWKT": "Footprint WKT",
	"occurrenceFieldNames.footprintSRS": "Footprint SRS",
	"occurrenceFieldNames.footprintSpatialFit": "Footprint spatial fit",
	"occurrenceFieldNames.georeferencedBy": "Georeferenced by",
	"occurrenceFieldNames.georeferencedDate": "Georeferenced date",
	"occurrenceFieldNames.georeferenceProtocol": "Georeference protocol",
	"occurrenceFieldNames.georeferenceSources": "Georeference sources",
	"occurrenceFieldNames.georeferenceVerificationStatus": "Georeference verification status",
	"occurrenceFieldNames.georeferenceRemarks": "Georeference remarks",
	"occurrenceFieldNames.geologicalContextID": "Geological context ID",
	"occurrenceFieldNames.earliestEonOrLowestEonothem": "Earliest eon or lowest eonothem",
	"occurrenceFieldNames.latestEonOrHighestEonothem": "Latest eon or highest eonothem",
	"occurrenceFieldNames.earliestEraOrLowestErathem": "Earliest era or lowest erathem",
	"occurrenceFieldNames.latestEraOrHighestErathem": "Latest era or highest erathem",
	"occurrenceFieldNames.earliestPeriodOrLowestSystem": "Earliest period or lowest system",
	"occurrenceFieldNames.latestPeriodOrHighestSystem": "Latest period or highest system",
	"occurrenceFieldNames.earliestEpochOrLowestSeries": "Earliest epoch or lowest series",
	"occurrenceFieldNames.latestEpochOrHighestSeries": "Latest epoch or highest series",
	"occurrenceFieldNames.earliestAgeOrLowestStage": "Earliest age or lowest stage",
	"occurrenceFieldNames.latestAgeOrHighestStage": "Latest age or highest stage",
	"occurrenceFieldNames.lowestBiostratigraphicZone": "Lowest biostratigraphic zone",
	"occurrenceFieldNames.highestBiostratigraphicZone": "Highest biostratigraphic zone",
	"occurrenceFieldNames.lithostratigraphicTerms": "Lithostratigraphic terms",
	"occurrenceFieldNames.group": "Group",
	"occurrenceFieldNames.formation": "Formation",
	"occurrenceFieldNames.member": "Member",
	"occurrenceFieldNames.bed": "Bed",
	"occurrenceFieldNames.identificationID": "Identification ID",
	"occurrenceFieldNames.identificationQualifier": "Identification qualifier",
	"occurrenceFieldNames.typeStatus": "Type status",
	"occurrenceFieldNames.identifiedBy": "Identified by",
	"occurrenceFieldNames.dateIdentified": "Date identified",
	"occurrenceFieldNames.identificationReferences": "Identification references",
	"occurrenceFieldNames.identificationVerificationStatus": "Identification verification status",
	"occurrenceFieldNames.identificationRemarks": "Identification remarks",
	"occurrenceFieldNames.taxonID": "Taxon ID",
	"occurrenceFieldNames.scientificNameID": "Scientific name ID",
	"occurrenceFieldNames.acceptedNameUsageID": "Accepted name usage ID",
	"occurrenceFieldNames.parentNameUsageID": "Parent name usage ID",
	"occurrenceFieldNames.originalNameUsageID": "Original name usage ID",
	"occurrenceFieldNames.nameAccordingToID": "Name according to ID",
	"occurrenceFieldNames.namePublishedInID": "Name published in ID",
	"occurrenceFieldNames.taxonConceptID": "Taxon concept ID",
	"occurrenceFieldNames.scientificName": "Scientific name",
	"occurrenceFieldNames.acceptedNameUsage": "Accepted name usage",
	"occurrenceFieldNames.acceptedName": "Accepted name",
	"occurrenceFieldNames.appliedName": "Applied name",
	"occurrenceFieldNames.parentNameUsage": "Parent name usage",
	"occurrenceFieldNames.originalNameUsage": "Original name usage",
	"occurrenceFieldNames.nameAccordingTo": "Name according to",
	"occurrenceFieldNames.namePublishedIn": "Name published in",
	"occurrenceFieldNames.namePublishedInYear": "Name published in year",
	"occurrenceFieldNames.higherClassification": "Higher classification",
	"occurrenceFieldNames.kingdom": "Kingdom",
	"occurrenceFieldNames.phylum": "Phylum",
	"occurrenceFieldNames.class": "Class",
	"occurrenceFieldNames.order": "Order",
	"occurrenceFieldNames.family": "Family",
	"occurrenceFieldNames.genus": "Genus",
	"occurrenceFieldNames.subgenus": "Subgenus",
	"occurrenceFieldNames.specificEpithet": "Specific epithet",
	"occurrenceFieldNames.infraspecificEpithet": "Infraspecific epithet",
	"occurrenceFieldNames.taxonRank": "Rank",
	"occurrenceFieldNames.verbatimTaxonRank": "Verbatim rank",
	"occurrenceFieldNames.vernacularName": "Vernacular name",
	"occurrenceFieldNames.nomenclaturalCode": "Nomenclatural code",
	"occurrenceFieldNames.taxonomicStatus": "Taxonomic status",
	"occurrenceFieldNames.nomenclaturalStatus": "Nomenclatural status",
	"occurrenceFieldNames.taxonRemarks": "Taxon remarks",
	"occurrenceFieldNames.datasetKey": "Dataset key",
	"occurrenceFieldNames.publishingCountry": "Publishing country or area",
	"occurrenceFieldNames.lastInterpreted": "Last interpreted",
	"occurrenceFieldNames.elevation": "Elevation",
	"occurrenceFieldNames.elevationAccuracy": "Elevation accuracy",
	"occurrenceFieldNames.depth": "Depth",
	"occurrenceFieldNames.depthAccuracy": "Depth accuracy",
	"occurrenceFieldNames.distanceAboveSurface": "Distance above surface",
	"occurrenceFieldNames.distanceAboveSurfaceAccuracy": "Distance above surface accuracy",
	"occurrenceFieldNames.issue": "Issue",
	"occurrenceFieldNames.mediaType": "Media type",
	"occurrenceFieldNames.hasCoordinate": "Has coordinate",
	"occurrenceFieldNames.hasGeospatialIssues": "Has geospatial issues",
	"occurrenceFieldNames.taxonKey": "Taxon key",
	"occurrenceFieldNames.kingdomKey": "Kingdom key",
	"occurrenceFieldNames.phylumKey": "Phylum key",
	"occurrenceFieldNames.classKey": "Class key",
	"occurrenceFieldNames.orderKey": "Order key",
	"occurrenceFieldNames.familyKey": "Family key",
	"occurrenceFieldNames.genusKey": "Genus key",
	"occurrenceFieldNames.subgenusKey": "Subgenus key",
	"occurrenceFieldNames.speciesKey": "Species key",
	"occurrenceFieldNames.species": "Species",
	"occurrenceFieldNames.genericName": "Generic name",
	"occurrenceFieldNames.typifiedName": "Typified name",
	"occurrenceFieldNames.protocol": "Protocol",
	"occurrenceFieldNames.lastParsed": "Last parsed",
	"occurrenceFieldNames.lastCrawled": "Last crawled",
	"occurrenceFieldNames.associatedMedia": "Associated media",
	"occurrenceFieldNames.country": "Country or area",
	"occurrenceFieldNames.minimumElevationInMeters": "Minimum elevation in metres",
	"occurrenceFieldNames.maximumElevationInMeters": "Maximum elevation in metres",
	"occurrenceFieldNames.minimumDepthInMeters": "Minimum depth in metres",
	"occurrenceFieldNames.maximumDepthInMeters": "Maximum depth in metres",
	"occurrenceFieldNames.geodeticDatum": "Geodetic datum",
	"occurrenceFieldNames.verbatimCoordinates": "Verbatim coordinates",
	"occurrenceFieldNames.verbatimLatitude": "Verbatim latitude",
	"occurrenceFieldNames.verbatimLongitude": "Verbatim longitude",
	"occurrenceFieldNames.scientificNameAuthorship": "Scientific name authorship",
	"occurrenceFieldNames.undefined": "Unknown field",
	"occurrenceFieldNames.coordinatesTextual": "This record is published without coordinates, but it includes a textual description of its location.",
	"occurrenceFieldNames.coordinatesMissing": "Coordinates missing",
	"occurrenceFieldNames.taxonomicClassification": "Classification",
	"occurrenceFieldNames.gadmClassification": "Location according to GADM",
	"occurrenceFieldNames.images": "Multimedia",
	"occurrenceDetails.occurrence": "Occurrence",
	"occurrenceDetails.showAllFields": "Show all fields",
	"occurrenceDetails.morePhotos": "More photos",
	"occurrenceDetails.about": "About",
	"occurrenceDetails.dataset": "Dataset",
	"occurrenceDetails.publisher": "Publisher",
	"occurrenceDetails.institution": "Institution",
	"occurrenceDetails.institutionGrSciColl": "GrSciColl institution",
	"occurrenceDetails.collection": "Collection",
	"occurrenceDetails.collectionGrSciColl": "GrSciColl collection",
	"occurrenceDetails.recordedAndIdentifiedBy": "Recorded and identified by",
	"occurrenceDetails.info.original": "original",
	"occurrenceDetails.info.excluded": "Excluded",
	"occurrenceDetails.info.inferred": "Inferred",
	"occurrenceDetails.info.altered": "Altered",
	"occurrenceDetails.groups.summary": "Summary",
	"occurrenceDetails.groups.record": "Record",
	"occurrenceDetails.groups.occurrence": "Occurrence",
	"occurrenceDetails.groups.event": "Event",
	"occurrenceDetails.groups.identification": "Identification",
	"occurrenceDetails.groups.taxon": "Taxon",
	"occurrenceDetails.groups.location": "Location",
	"occurrenceDetails.groups.organism": "Organism",
	"occurrenceDetails.groups.materialSample": "Material sample",
	"occurrenceDetails.groups.geologicalContext": "Geological context",
	"occurrenceDetails.groups.other": "Other",
	"occurrenceDetails.features.isClustered": "Clustered",
	"occurrenceDetails.features.isSamplingEvent": "Sampling event",
	"occurrenceDetails.features.isTreament": "Treatment",
	"occurrenceDetails.features.isSequenced": "Sequenced",
	"download.unsupported.title": "Unsupported query",
	"download.unsupported.description": "Free text search can be used for exploration but does not have download support.",
	"download.unsupported.remove": "Remove filter",
	"download.unsupported.error": "This query appears to be unsupported",
	"download.download": "Download",
	"download.redirectNotice": "You are about to download data and to do so, you will be redirected to GBIF.org. {br}{br} Be aware that an account is needed on GBIF.org to download the content.",
	"download.continueToGBIF": "Continue",
	"enums.basisOfRecord.PRESERVED_SPECIMEN": "Preserved specimen",
	"enums.basisOfRecord.FOSSIL_SPECIMEN": "Fossil specimen",
	"enums.basisOfRecord.LIVING_SPECIMEN": "Living specimen",
	"enums.basisOfRecord.OBSERVATION": "Observation",
	"enums.basisOfRecord.HUMAN_OBSERVATION": "Human observation",
	"enums.basisOfRecord.MACHINE_OBSERVATION": "Machine observation",
	"enums.basisOfRecord.MATERIAL_SAMPLE": "Material sample",
	"enums.basisOfRecord.MATERIAL_CITATION": "Material citation",
	"enums.basisOfRecord.LITERATURE": "Literature",
	"enums.basisOfRecord.OCCURRENCE": "Occurrence",
	"enums.countryCode.AF": "Afghanistan",
	"enums.countryCode.AX": "Åland Islands",
	"enums.countryCode.AL": "Albania",
	"enums.countryCode.DZ": "Algeria",
	"enums.countryCode.AS": "American Samoa",
	"enums.countryCode.AD": "Andorra",
	"enums.countryCode.AO": "Angola",
	"enums.countryCode.AI": "Anguilla",
	"enums.countryCode.AQ": "Antarctica",
	"enums.countryCode.AG": "Antigua and Barbuda",
	"enums.countryCode.AR": "Argentina",
	"enums.countryCode.AM": "Armenia",
	"enums.countryCode.AW": "Aruba",
	"enums.countryCode.AU": "Australia",
	"enums.countryCode.AT": "Austria",
	"enums.countryCode.AZ": "Azerbaijan",
	"enums.countryCode.BS": "Bahamas",
	"enums.countryCode.BH": "Bahrain",
	"enums.countryCode.BD": "Bangladesh",
	"enums.countryCode.BB": "Barbados",
	"enums.countryCode.BY": "Belarus",
	"enums.countryCode.BE": "Belgium",
	"enums.countryCode.BZ": "Belize",
	"enums.countryCode.BJ": "Benin",
	"enums.countryCode.BM": "Bermuda",
	"enums.countryCode.BT": "Bhutan",
	"enums.countryCode.BO": "Bolivia, Plurinational State of",
	"enums.countryCode.BA": "Bosnia and Herzegovina",
	"enums.countryCode.BW": "Botswana",
	"enums.countryCode.BV": "Bouvet Island",
	"enums.countryCode.BR": "Brazil",
	"enums.countryCode.BQ": "Bonaire, Sint Eustatius and Saba",
	"enums.countryCode.IO": "British Indian Ocean Territory",
	"enums.countryCode.BN": "Brunei Darussalam",
	"enums.countryCode.BG": "Bulgaria",
	"enums.countryCode.BF": "Burkina Faso",
	"enums.countryCode.BI": "Burundi",
	"enums.countryCode.KH": "Cambodia",
	"enums.countryCode.CM": "Cameroon",
	"enums.countryCode.CA": "Canada",
	"enums.countryCode.CV": "Cabo Verde",
	"enums.countryCode.KY": "Cayman Islands",
	"enums.countryCode.CF": "Central African Republic",
	"enums.countryCode.TD": "Chad",
	"enums.countryCode.CL": "Chile",
	"enums.countryCode.CN": "China",
	"enums.countryCode.CX": "Christmas Island",
	"enums.countryCode.CC": "Cocos (Keeling) Islands",
	"enums.countryCode.CO": "Colombia",
	"enums.countryCode.KM": "Comoros",
	"enums.countryCode.CG": "Congo",
	"enums.countryCode.CD": "Congo, The Democratic Republic of the",
	"enums.countryCode.CK": "Cook Islands",
	"enums.countryCode.CR": "Costa Rica",
	"enums.countryCode.CI": "Côte d’Ivoire",
	"enums.countryCode.HR": "Croatia",
	"enums.countryCode.CU": "Cuba",
	"enums.countryCode.CW": "Curaçao",
	"enums.countryCode.CY": "Cyprus",
	"enums.countryCode.CZ": "Czechia",
	"enums.countryCode.DK": "Denmark",
	"enums.countryCode.DJ": "Djibouti",
	"enums.countryCode.DM": "Dominica",
	"enums.countryCode.DO": "Dominican Republic",
	"enums.countryCode.EC": "Ecuador",
	"enums.countryCode.EG": "Egypt",
	"enums.countryCode.SV": "El Salvador",
	"enums.countryCode.GQ": "Equatorial Guinea",
	"enums.countryCode.ER": "Eritrea",
	"enums.countryCode.EE": "Estonia",
	"enums.countryCode.ET": "Ethiopia",
	"enums.countryCode.FK": "Falkland Islands (Malvinas)",
	"enums.countryCode.FO": "Faroe Islands",
	"enums.countryCode.FJ": "Fiji",
	"enums.countryCode.FI": "Finland",
	"enums.countryCode.FR": "France",
	"enums.countryCode.GF": "French Guiana",
	"enums.countryCode.PF": "French Polynesia",
	"enums.countryCode.TF": "French Southern Territories",
	"enums.countryCode.GA": "Gabon",
	"enums.countryCode.GM": "Gambia",
	"enums.countryCode.GE": "Georgia",
	"enums.countryCode.DE": "Germany",
	"enums.countryCode.GH": "Ghana",
	"enums.countryCode.GI": "Gibraltar",
	"enums.countryCode.GR": "Greece",
	"enums.countryCode.GL": "Greenland",
	"enums.countryCode.GD": "Grenada",
	"enums.countryCode.GP": "Guadeloupe",
	"enums.countryCode.GU": "Guam",
	"enums.countryCode.GT": "Guatemala",
	"enums.countryCode.GG": "Guernsey",
	"enums.countryCode.GN": "Guinea",
	"enums.countryCode.GW": "Guinea-Bissau",
	"enums.countryCode.GY": "Guyana",
	"enums.countryCode.HT": "Haiti",
	"enums.countryCode.HM": "Heard Island and Mcdonald Islands",
	"enums.countryCode.VA": "Holy See",
	"enums.countryCode.HN": "Honduras",
	"enums.countryCode.HK": "Hong Kong",
	"enums.countryCode.HU": "Hungary",
	"enums.countryCode.IS": "Iceland",
	"enums.countryCode.IN": "India",
	"enums.countryCode.ID": "Indonesia",
	"enums.countryCode.IR": "Iran, Islamic Republic Of",
	"enums.countryCode.IQ": "Iraq",
	"enums.countryCode.IE": "Ireland",
	"enums.countryCode.IM": "Isle of Man",
	"enums.countryCode.IL": "Israel",
	"enums.countryCode.IT": "Italy",
	"enums.countryCode.JM": "Jamaica",
	"enums.countryCode.JP": "Japan",
	"enums.countryCode.JE": "Jersey",
	"enums.countryCode.JO": "Jordan",
	"enums.countryCode.KZ": "Kazakhstan",
	"enums.countryCode.KE": "Kenya",
	"enums.countryCode.KI": "Kiribati",
	"enums.countryCode.KP": "Korea, Democratic People’s Republic of",
	"enums.countryCode.KR": "Korea, Republic of",
	"enums.countryCode.XK": "Kosovo",
	"enums.countryCode.KW": "Kuwait",
	"enums.countryCode.KG": "Kyrgyzstan",
	"enums.countryCode.LA": "Lao People’s Democratic Republic",
	"enums.countryCode.LV": "Latvia",
	"enums.countryCode.LB": "Lebanon",
	"enums.countryCode.LS": "Lesotho",
	"enums.countryCode.LR": "Liberia",
	"enums.countryCode.LY": "Libya",
	"enums.countryCode.LI": "Liechtenstein",
	"enums.countryCode.LT": "Lithuania",
	"enums.countryCode.LU": "Luxembourg",
	"enums.countryCode.MO": "Macao",
	"enums.countryCode.MK": "North Macedonia",
	"enums.countryCode.MG": "Madagascar",
	"enums.countryCode.MW": "Malawi",
	"enums.countryCode.MY": "Malaysia",
	"enums.countryCode.MV": "Maldives",
	"enums.countryCode.ML": "Mali",
	"enums.countryCode.MT": "Malta",
	"enums.countryCode.MH": "Marshall Islands",
	"enums.countryCode.MQ": "Martinique",
	"enums.countryCode.MR": "Mauritania",
	"enums.countryCode.MU": "Mauritius",
	"enums.countryCode.YT": "Mayotte",
	"enums.countryCode.MX": "Mexico",
	"enums.countryCode.FM": "Micronesia, Federated States of",
	"enums.countryCode.MD": "Moldova, Republic of",
	"enums.countryCode.MC": "Monaco",
	"enums.countryCode.MN": "Mongolia",
	"enums.countryCode.ME": "Montenegro",
	"enums.countryCode.MS": "Montserrat",
	"enums.countryCode.MA": "Morocco",
	"enums.countryCode.MZ": "Mozambique",
	"enums.countryCode.MM": "Myanmar",
	"enums.countryCode.NA": "Namibia",
	"enums.countryCode.NR": "Nauru",
	"enums.countryCode.NP": "Nepal",
	"enums.countryCode.NL": "Netherlands",
	"enums.countryCode.AN": "Netherlands Antilles",
	"enums.countryCode.NC": "New Caledonia",
	"enums.countryCode.NZ": "New Zealand",
	"enums.countryCode.NI": "Nicaragua",
	"enums.countryCode.NE": "Niger",
	"enums.countryCode.NG": "Nigeria",
	"enums.countryCode.NU": "Niue",
	"enums.countryCode.NF": "Norfolk Island",
	"enums.countryCode.MP": "Northern Mariana Islands",
	"enums.countryCode.NO": "Norway",
	"enums.countryCode.OM": "Oman",
	"enums.countryCode.PK": "Pakistan",
	"enums.countryCode.PW": "Palau",
	"enums.countryCode.PS": "Palestine, State of",
	"enums.countryCode.PA": "Panama",
	"enums.countryCode.PG": "Papua New Guinea",
	"enums.countryCode.PY": "Paraguay",
	"enums.countryCode.PE": "Peru",
	"enums.countryCode.PH": "Philippines",
	"enums.countryCode.PN": "Pitcairn",
	"enums.countryCode.PL": "Poland",
	"enums.countryCode.PT": "Portugal",
	"enums.countryCode.PR": "Puerto Rico",
	"enums.countryCode.QA": "Qatar",
	"enums.countryCode.RE": "Réunion",
	"enums.countryCode.RO": "Romania",
	"enums.countryCode.RU": "Russian Federation",
	"enums.countryCode.RW": "Rwanda",
	"enums.countryCode.SH": "Saint Helena, Ascension and Tristan da Cunha",
	"enums.countryCode.KN": "Saint Kitts and Nevis",
	"enums.countryCode.LC": "Saint Lucia",
	"enums.countryCode.BL": "Saint Barthélemy",
	"enums.countryCode.MF": "Saint Martin (French part)",
	"enums.countryCode.PM": "Saint Pierre and Miquelon",
	"enums.countryCode.VC": "Saint Vincent and the Grenadines",
	"enums.countryCode.WS": "Samoa",
	"enums.countryCode.SM": "San Marino",
	"enums.countryCode.ST": "Sao Tome and Principe",
	"enums.countryCode.SA": "Saudi Arabia",
	"enums.countryCode.SN": "Senegal",
	"enums.countryCode.RS": "Serbia",
	"enums.countryCode.SC": "Seychelles",
	"enums.countryCode.SL": "Sierra Leone",
	"enums.countryCode.SG": "Singapore",
	"enums.countryCode.SX": "Sint Maarten (Dutch part)",
	"enums.countryCode.SK": "Slovakia",
	"enums.countryCode.SI": "Slovenia",
	"enums.countryCode.SB": "Solomon Islands",
	"enums.countryCode.SO": "Somalia",
	"enums.countryCode.ZA": "South Africa",
	"enums.countryCode.GS": "South Georgia and the South Sandwich Islands",
	"enums.countryCode.ES": "Spain",
	"enums.countryCode.LK": "Sri Lanka",
	"enums.countryCode.SD": "Sudan",
	"enums.countryCode.SR": "Suriname",
	"enums.countryCode.SS": "South Sudan",
	"enums.countryCode.SJ": "Svalbard and Jan Mayen",
	"enums.countryCode.SZ": "Eswatini",
	"enums.countryCode.SE": "Sweden",
	"enums.countryCode.CH": "Switzerland",
	"enums.countryCode.SY": "Syrian Arab Republic",
	"enums.countryCode.TW": "Taiwan",
	"enums.countryCode.TJ": "Tajikistan",
	"enums.countryCode.TZ": "Tanzania, United Republic of",
	"enums.countryCode.TH": "Thailand",
	"enums.countryCode.TL": "Timor-Leste",
	"enums.countryCode.TG": "Togo",
	"enums.countryCode.TK": "Tokelau",
	"enums.countryCode.TO": "Tonga",
	"enums.countryCode.TT": "Trinidad and Tobago",
	"enums.countryCode.TN": "Tunisia",
	"enums.countryCode.TR": "Turkey",
	"enums.countryCode.TM": "Turkmenistan",
	"enums.countryCode.TC": "Turks and Caicos Islands",
	"enums.countryCode.TV": "Tuvalu",
	"enums.countryCode.UG": "Uganda",
	"enums.countryCode.UA": "Ukraine",
	"enums.countryCode.AE": "United Arab Emirates",
	"enums.countryCode.GB": "United Kingdom",
	"enums.countryCode.US": "United States of America",
	"enums.countryCode.UM": "United States Minor Outlying Islands",
	"enums.countryCode.UY": "Uruguay",
	"enums.countryCode.UZ": "Uzbekistan",
	"enums.countryCode.VU": "Vanuatu",
	"enums.countryCode.VE": "Venezuela, Bolivarian Republic of",
	"enums.countryCode.VN": "Viet Nam",
	"enums.countryCode.VG": "Virgin Islands, British",
	"enums.countryCode.VI": "Virgin Islands, U.S.",
	"enums.countryCode.WF": "Wallis and Futuna",
	"enums.countryCode.EH": "Western Sahara",
	"enums.countryCode.YE": "Yemen",
	"enums.countryCode.ZM": "Zambia",
	"enums.countryCode.XZ": "International waters",
	"enums.countryCode.ZW": "Zimbabwe",
	"enums.countryCode.QO": "Oceania",
	"enums.countryCode.ZZ": "Unknown country",
	"enums.mediaType.StillImage": "Still image",
	"enums.mediaType.MovingImage": "Moving image",
	"enums.mediaType.Sound": "Sound",
	"enums.occurrenceIssue.ZERO_COORDINATE": "Zero coordinate",
	"enums.occurrenceIssue.COORDINATE_OUT_OF_RANGE": "Coordinate out of range",
	"enums.occurrenceIssue.COORDINATE_INVALID": "Coordinate invalid",
	"enums.occurrenceIssue.COORDINATE_ROUNDED": "Coordinate rounded",
	"enums.occurrenceIssue.GEODETIC_DATUM_INVALID": "Geodetic datum invalid",
	"enums.occurrenceIssue.GEODETIC_DATUM_ASSUMED_WGS84": "Geodetic datum assumed WGS84",
	"enums.occurrenceIssue.COORDINATE_REPROJECTED": "Coordinate reprojected",
	"enums.occurrenceIssue.COORDINATE_REPROJECTION_FAILED": "Coordinate reprojection failed",
	"enums.occurrenceIssue.COORDINATE_REPROJECTION_SUSPICIOUS": "Coordinate reprojection suspicious",
	"enums.occurrenceIssue.COORDINATE_ACCURACY_INVALID": "Coordinate accuracy invalid",
	"enums.occurrenceIssue.COORDINATE_PRECISION_INVALID": "Coordinate precision invalid",
	"enums.occurrenceIssue.COORDINATE_UNCERTAINTY_METERS_INVALID": "Coordinate uncertainty metres invalid",
	"enums.occurrenceIssue.COORDINATE_PRECISION_UNCERTAINTY_MISMATCH": "Coordinate precision uncertainty mismatch",
	"enums.occurrenceIssue.FOOTPRINT_SRS_INVALID": "Footprint SRS invalid",
	"enums.occurrenceIssue.FOOTPRINT_WKT_INVALID": "Footprint WKT invalid",
	"enums.occurrenceIssue.COUNTRY_COORDINATE_MISMATCH": "Country coordinate mismatch",
	"enums.occurrenceIssue.COUNTRY_MISMATCH": "Country mismatch",
	"enums.occurrenceIssue.COUNTRY_INVALID": "Country invalid",
	"enums.occurrenceIssue.COUNTRY_DERIVED_FROM_COORDINATES": "Country derived from coordinates",
	"enums.occurrenceIssue.CONTINENT_COUNTRY_MISMATCH": "Continent country mismatch",
	"enums.occurrenceIssue.CONTINENT_INVALID": "Continent invalid",
	"enums.occurrenceIssue.CONTINENT_DERIVED_FROM_COORDINATES": "Continent derived from coordinates",
	"enums.occurrenceIssue.PRESUMED_SWAPPED_COORDINATE": "Presumed swapped coordinate",
	"enums.occurrenceIssue.PRESUMED_NEGATED_LONGITUDE": "Presumed negated longitude",
	"enums.occurrenceIssue.PRESUMED_NEGATED_LATITUDE": "Presumed negated latitude",
	"enums.occurrenceIssue.RECORDED_DATE_MISMATCH": "Recorded date mismatch",
	"enums.occurrenceIssue.RECORDED_DATE_INVALID": "Recorded date invalid",
	"enums.occurrenceIssue.RECORDED_DATE_UNLIKELY": "Recorded date unlikely",
	"enums.occurrenceIssue.TAXON_MATCH_FUZZY": "Taxon match fuzzy",
	"enums.occurrenceIssue.TAXON_MATCH_HIGHERRANK": "Taxon match higherrank",
	"enums.occurrenceIssue.TAXON_MATCH_AGGREGATE": "Taxon match aggregate",
	"enums.occurrenceIssue.TAXON_MATCH_NONE": "Taxon match none",
	"enums.occurrenceIssue.DEPTH_NOT_METRIC": "Depth not metric",
	"enums.occurrenceIssue.DEPTH_UNLIKELY": "Depth unlikely",
	"enums.occurrenceIssue.DEPTH_MIN_MAX_SWAPPED": "Depth min/max swapped",
	"enums.occurrenceIssue.DEPTH_NON_NUMERIC": "Depth non numeric",
	"enums.occurrenceIssue.ELEVATION_UNLIKELY": "Elevation unlikely",
	"enums.occurrenceIssue.ELEVATION_MIN_MAX_SWAPPED": "Elevation min/max swapped",
	"enums.occurrenceIssue.ELEVATION_NOT_METRIC": "Elevation not metric",
	"enums.occurrenceIssue.ELEVATION_NON_NUMERIC": "Elevation non numeric",
	"enums.occurrenceIssue.MODIFIED_DATE_INVALID": "Modified date invalid",
	"enums.occurrenceIssue.MODIFIED_DATE_UNLIKELY": "Modified date unlikely",
	"enums.occurrenceIssue.IDENTIFIED_DATE_UNLIKELY": "Identified date unlikely",
	"enums.occurrenceIssue.IDENTIFIED_DATE_INVALID": "Identified date invalid",
	"enums.occurrenceIssue.BASIS_OF_RECORD_INVALID": "Basis of record invalid",
	"enums.occurrenceIssue.TYPE_STATUS_INVALID": "Type status invalid",
	"enums.occurrenceIssue.MULTIMEDIA_DATE_INVALID": "Multimedia date invalid",
	"enums.occurrenceIssue.MULTIMEDIA_URI_INVALID": "Multimedia URI invalid",
	"enums.occurrenceIssue.REFERENCES_URI_INVALID": "References URI invalid",
	"enums.occurrenceIssue.INTERPRETATION_ERROR": "Interpretation error",
	"enums.occurrenceIssue.INDIVIDUAL_COUNT_INVALID": "Individual count invalid",
	"enums.occurrenceIssue.INDIVIDUAL_COUNT_CONFLICTS_WITH_OCCURRENCE_STATUS": "Individual count conflicts with occurrence status",
	"enums.occurrenceIssue.OCCURRENCE_STATUS_UNPARSABLE": "Occurrence status unparsable",
	"enums.occurrenceIssue.OCCURRENCE_STATUS_INFERRED_FROM_INDIVIDUAL_COUNT": "Occurrence status inferred from individual count",
	"enums.occurrenceIssue.OCCURRENCE_STATUS_INFERRED_FROM_BASIS_OF_RECORD": "Occurrence status inferred from basis of record",
	"enums.occurrenceIssue.GEOREFERENCED_DATE_UNLIKELY": "Georeferenced date unlikely",
	"enums.occurrenceIssue.GEOREFERENCED_DATE_INVALID": "Georeferenced date invalid",
	"enums.occurrenceIssue.AMBIGUOUS_INSTITUTION": "Ambiguous institution",
	"enums.occurrenceIssue.AMBIGUOUS_COLLECTION": "Ambiguous collection",
	"enums.occurrenceIssue.INSTITUTION_MATCH_NONE": "Institution match none",
	"enums.occurrenceIssue.COLLECTION_MATCH_NONE": "Collection match none",
	"enums.occurrenceIssue.INSTITUTION_MATCH_FUZZY": "Institution match fuzzy",
	"enums.occurrenceIssue.COLLECTION_MATCH_FUZZY": "Collection match fuzzy",
	"enums.occurrenceIssue.INSTITUTION_COLLECTION_MISMATCH": "Institution collection mismatch",
	"enums.occurrenceIssue.POSSIBLY_ON_LOAN": "Possibly on loan",
	"enums.occurrenceIssue.DIFFERENT_OWNER_INSTITUTION": "Different owner institution",
	"enums.typeStatus.TYPE": "Type",
	"enums.typeStatus.TYPE_SPECIES": "Type species",
	"enums.typeStatus.TYPE_GENUS": "Type genus",
	"enums.typeStatus.ALLOLECTOTYPE": "Allolectotype",
	"enums.typeStatus.ALLONEOTYPE": "Alloneotype",
	"enums.typeStatus.ALLOTYPE": "Allotype",
	"enums.typeStatus.COTYPE": "Cotype",
	"enums.typeStatus.EPITYPE": "Epitype",
	"enums.typeStatus.EXEPITYPE": "Ex-epitype",
	"enums.typeStatus.EXHOLOTYPE": "Ex-holotype",
	"enums.typeStatus.EXISOTYPE": "Ex-isotype",
	"enums.typeStatus.EXLECTOTYPE": "Ex-lectotype",
	"enums.typeStatus.EXNEOTYPE": "Ex-neotype",
	"enums.typeStatus.EXPARATYPE": "Ex-paratype",
	"enums.typeStatus.EXSYNTYPE": "Ex-syntype",
	"enums.typeStatus.EXTYPE": "Ex-type",
	"enums.typeStatus.HAPANTOTYPE": "Hapantotype",
	"enums.typeStatus.HOLOTYPE": "Holotype",
	"enums.typeStatus.ICONOTYPE": "Iconotype",
	"enums.typeStatus.ISOLECTOTYPE": "Isolectotype",
	"enums.typeStatus.ISONEOTYPE": "Isoneotype",
	"enums.typeStatus.ISOSYNTYPE": "Isosyntype",
	"enums.typeStatus.ISOTYPE": "Isotype",
	"enums.typeStatus.LECTOTYPE": "Lectotype",
	"enums.typeStatus.NEOTYPE": "Neotype",
	"enums.typeStatus.PARALECTOTYPE": "Paralectotype",
	"enums.typeStatus.PARANEOTYPE": "Paraneotype",
	"enums.typeStatus.PARATYPE": "Paratype",
	"enums.typeStatus.PLASTOHOLOTYPE": "Plastoholotype",
	"enums.typeStatus.PLASTOISOTYPE": "Plastoisotype",
	"enums.typeStatus.PLASTOLECTOTYPE": "Plastolectotype",
	"enums.typeStatus.PLASTONEOTYPE": "Plastoneotype",
	"enums.typeStatus.PLASTOPARATYPE": "Plastoparatype",
	"enums.typeStatus.PLASTOSYNTYPE": "Plastosyntype",
	"enums.typeStatus.PLASTOTYPE": "Plastotype",
	"enums.typeStatus.SECONDARYTYPE": "Secondary type",
	"enums.typeStatus.SUPPLEMENTARYTYPE": "Supplementary type",
	"enums.typeStatus.SYNTYPE": "Syntype",
	"enums.typeStatus.TOPOTYPE": "Topotype",
	"enums.typeStatus.ORIGINALMATERIAL": "Original material",
	"enums.typeStatus.NOTATYPE": "Not a type",
	"enums.taxonRank.undefined": "Unknown taxon",
	"enums.taxonRank.UNKNOWN": "Unknown",
	"enums.taxonRank.DOMAIN": "Domain",
	"enums.taxonRank.SUPERKINGDOM": "Superkingdom",
	"enums.taxonRank.KINGDOM": "Kingdom",
	"enums.taxonRank.SUBKINGDOM": "Subkingdom",
	"enums.taxonRank.INFRAKINGDOM": "Infrakingdom",
	"enums.taxonRank.SUPERPHYLUM": "Superphylum",
	"enums.taxonRank.PHYLUM": "Phylum",
	"enums.taxonRank.SUBPHYLUM": "Subphylum",
	"enums.taxonRank.INFRAPHYLUM": "Infraphylum",
	"enums.taxonRank.SUPERCLASS": "Superclass",
	"enums.taxonRank.CLASS": "Class",
	"enums.taxonRank.SUBCLASS": "Subclass",
	"enums.taxonRank.INFRACLASS": "Infraclass",
	"enums.taxonRank.PARVCLASS": "Parvclass",
	"enums.taxonRank.SUPERLEGION": "Superlegion",
	"enums.taxonRank.LEGION": "Legion",
	"enums.taxonRank.SUBLEGION": "Sublegion",
	"enums.taxonRank.INFRALEGION": "Infralegion",
	"enums.taxonRank.SUPERCOHORT": "Supercohort",
	"enums.taxonRank.COHORT": "Cohort",
	"enums.taxonRank.SUBCOHORT": "Subcohort",
	"enums.taxonRank.INFRACOHORT": "Infracohort",
	"enums.taxonRank.MAGNORDER": "Magnorder",
	"enums.taxonRank.SUPERORDER": "Superorder",
	"enums.taxonRank.GRANDORDER": "Grandorder",
	"enums.taxonRank.ORDER": "Order",
	"enums.taxonRank.SUBORDER": "Suborder",
	"enums.taxonRank.INFRAORDER": "Infraorder",
	"enums.taxonRank.PARVORDER": "Parvorder",
	"enums.taxonRank.SUPERFAMILY": "Superfamily",
	"enums.taxonRank.FAMILY": "Family",
	"enums.taxonRank.SUBFAMILY": "Subfamily",
	"enums.taxonRank.INFRAFAMILY": "Infrafamily",
	"enums.taxonRank.SUPERTRIBE": "Supertribe",
	"enums.taxonRank.TRIBE": "Tribe",
	"enums.taxonRank.SUBTRIBE": "Subtribe",
	"enums.taxonRank.INFRATRIBE": "Infratribe",
	"enums.taxonRank.SUPRAGENERIC_NAME": "Suprageneric name",
	"enums.taxonRank.GENUS": "Genus",
	"enums.taxonRank.SUBGENUS": "Subgenus",
	"enums.taxonRank.INFRAGENUS": "Infragenus",
	"enums.taxonRank.SECTION": "Section",
	"enums.taxonRank.SUBSECTION": "Subsection",
	"enums.taxonRank.SERIES": "Series",
	"enums.taxonRank.SUBSERIES": "Subseries",
	"enums.taxonRank.INFRAGENERIC_NAME": "Infrageneric name",
	"enums.taxonRank.SPECIES_AGGREGATE": "Species aggregate",
	"enums.taxonRank.SPECIES": "Species",
	"enums.taxonRank.INFRASPECIFIC_NAME": "Infraspecific name",
	"enums.taxonRank.GREX": "Grex",
	"enums.taxonRank.SUBSPECIES": "Subspecies",
	"enums.taxonRank.CULTIVAR_GROUP": "Cultivar group",
	"enums.taxonRank.CONVARIETY": "Convariety",
	"enums.taxonRank.INFRASUBSPECIFIC_NAME": "Infrasubspecific name",
	"enums.taxonRank.PROLES": "Proles",
	"enums.taxonRank.RACE": "Race",
	"enums.taxonRank.NATIO": "Natio",
	"enums.taxonRank.ABERRATION": "Aberration",
	"enums.taxonRank.MORPH": "Morph",
	"enums.taxonRank.VARIETY": "Variety",
	"enums.taxonRank.SUBVARIETY": "Subvariety",
	"enums.taxonRank.FORM": "Form",
	"enums.taxonRank.SUBFORM": "Subform",
	"enums.taxonRank.PATHOVAR": "Pathovar",
	"enums.taxonRank.BIOVAR": "Biovar",
	"enums.taxonRank.CHEMOVAR": "Chemovar",
	"enums.taxonRank.MORPHOVAR": "Morphovar",
	"enums.taxonRank.PHAGOVAR": "Phagovar",
	"enums.taxonRank.SEROVAR": "Serovar",
	"enums.taxonRank.CHEMOFORM": "Chemoform",
	"enums.taxonRank.FORMA_SPECIALIS": "Forma specialis",
	"enums.taxonRank.CULTIVAR": "Cultivar",
	"enums.taxonRank.STRAIN": "Strain",
	"enums.taxonRank.OTHER": "Other",
	"enums.taxonRank.UNRANKED": "Unranked",
	"enums.taxonomicStatus.ACCEPTED": "Accepted",
	"enums.taxonomicStatus.DOUBTFUL": "Doubtful",
	"enums.taxonomicStatus.SYNONYM": "Synonym",
	"enums.taxonomicStatus.HETEROTYPIC_SYNONYM": "Heterotypic synonym",
	"enums.taxonomicStatus.HOMOTYPIC_SYNONYM": "Homotypic synonym",
	"enums.taxonomicStatus.PROPARTE_SYNONYM": "Proparte synonym",
	"enums.taxonomicStatus.MISAPPLIED": "Misapplied",
	"enums.taxonomicStatus.INTERMEDIATE_RANK_SYNONYM": "Intermediate rank synonym",
	"enums.taxonomicStatus.DETERMINATION_SYNONYM": "Determination synonym",
	"enums.license.CC0_1_0": "CC0 1.0",
	"enums.license.CC_BY_4_0": "CC BY 4.0",
	"enums.license.CC_BY_NC_4_0": "CC BY-NC 4.0",
	"enums.license.UNSPECIFIED": "Unspecified",
	"enums.license.UNSUPPORTED": "Unsupported",
	"enums.month.1": "January",
	"enums.month.2": "February",
	"enums.month.3": "March",
	"enums.month.4": "April",
	"enums.month.5": "May",
	"enums.month.6": "June",
	"enums.month.7": "July",
	"enums.month.8": "August",
	"enums.month.9": "September",
	"enums.month.10": "October",
	"enums.month.11": "November",
	"enums.month.12": "December",
	"enums.continent.AFRICA": "Africa",
	"enums.continent.ANTARCTICA": "Antarctica",
	"enums.continent.ASIA": "Asia",
	"enums.continent.EUROPE": "Europe",
	"enums.continent.NORTH_AMERICA": "North America",
	"enums.continent.OCEANIA": "Oceania",
	"enums.continent.SOUTH_AMERICA": "South America",
	"enums.endpointType.EML": "EML",
	"enums.endpointType.FEED": "RSS feed",
	"enums.endpointType.WFS": "WFS",
	"enums.endpointType.WMS": "WMS",
	"enums.endpointType.TCS_RDF": "TCS RDF",
	"enums.endpointType.TCS_XML": "TCS XML",
	"enums.endpointType.DWC_ARCHIVE": "Darwin Core Archive",
	"enums.endpointType.DIGIR": "DiGIR",
	"enums.endpointType.DIGIR_MANIS": "DiGIR MANIS",
	"enums.endpointType.TAPIR": "TAPIR",
	"enums.endpointType.BIOCASE": "BioCASe",
	"enums.endpointType.BIOCASE_XML_ARCHIVE": "BioCASe XML Archive",
	"enums.endpointType.OAI_PMH": "OAI PMH",
	"enums.endpointType.OTHER": "Other",
	"enums.establishmentMeans.NATIVE": "Native",
	"enums.establishmentMeans.INTRODUCED": "Introduced",
	"enums.establishmentMeans.NATURALISED": "Naturalized",
	"enums.establishmentMeans.INVASIVE": "Invasive",
	"enums.establishmentMeans.MANAGED": "Managed",
	"enums.establishmentMeans.UNCERTAIN": "Uncertain",
	"enums.occurrenceStatus.PRESENT": "Present",
	"enums.occurrenceStatus.ABSENT": "Absent",
	"enums.literatureType.JOURNAL": "Journal article",
	"enums.literatureType.BOOK": "Book",
	"enums.literatureType.GENERIC": "Generic",
	"enums.literatureType.BOOK_SECTION": "Book section",
	"enums.literatureType.CONFERENCE_PROCEEDINGS": "Conference proceedings",
	"enums.literatureType.WORKING_PAPER": "Preprint",
	"enums.literatureType.REPORT": "Report",
	"enums.literatureType.WEB_PAGE": "Web page",
	"enums.literatureType.THESIS": "Thesis",
	"enums.literatureType.MAGAZINE_ARTICLE": "Magazine article",
	"enums.literatureType.STATUTE": "Statute",
	"enums.literatureType.PATENT": "Patent",
	"enums.literatureType.NEWSPAPER_ARTICLE": "Newspaper article",
	"enums.literatureType.COMPUTER_PROGRAM": "Computer program",
	"enums.literatureType.HEARING": "Hearing",
	"enums.literatureType.TELEVISION_BROADCAST": "Television broadcast",
	"enums.literatureType.ENCYCLOPEDIA_ARTICLE": "Encyclopaedia article",
	"enums.literatureType.CASE": "Case",
	"enums.literatureType.FILM": "Film",
	"enums.literatureType.BILL": "Bill",
	"enums.role.TECHNICAL_POINT_OF_CONTACT": "Technical point of contact",
	"enums.role.ADMINISTRATIVE_POINT_OF_CONTACT": "Administrative point of contact",
	"enums.role._PRIMARY_CONTACT": "Primary contact",
	"enums.role.POINT_OF_CONTACT": "Point of contact",
	"enums.role.ORIGINATOR": "Originator",
	"enums.role.GBIFS_STAFF_MEMBER": "GBIF staff member",
	"enums.role.METADATA_AUTHOR": "Metadata author",
	"enums.role.PRINCIPAL_INVESTIGATOR": "Principal investigator",
	"enums.role.AUTHOR": "Author",
	"enums.role.CONTENT_PROVIDER": "Content provider",
	"enums.role.CUSTODIAN_STEWARD": "Custodian steward",
	"enums.role.DISTRIBUTOR": "Distributor",
	"enums.role.EDITOR": "Editor",
	"enums.role.OWNER": "Owner",
	"enums.role.PROCESSOR": "Processor",
	"enums.role.PUBLISHER": "Publisher",
	"enums.role.USER": "User",
	"enums.role.PROGRAMMER": "Programmer",
	"enums.role.CURATOR": "Curator",
	"enums.role.DATA_ADMINISTRATOR": "Data administrator",
	"enums.role.SYSTEM_ADMINISTRATOR": "System administrator",
	"enums.role.ADDITIONAL_DELEGATE": "Additional delegate",
	"enums.role.BUDGET_COMMITTEE_1ST_VICE_CHAIR": "Budget committee 1st vice chair",
	"enums.role.BUDGET_COMMITTEE_2ND_VICE_CHAIR": "Budget committee 2nd vice chair",
	"enums.role.BUDGET_COMMITTEE_CHAIR": "Budget committee chair",
	"enums.role.BUDGET_COMMITTEE_MEMBER": "Budget committee member",
	"enums.role.EXECUTIVE_SECRETARY": "Executive secretary",
	"enums.role.GOVERNING_BOARD_1ST_VICE_CHAIR": "Governing board 1st vice chair",
	"enums.role.GOVERNING_BOARD_2ND_VICE_CHAIR": "Governing board 2nd vice chair",
	"enums.role.GOVERNING_BOARD_3RD_VICE_CHAIR": "Governing board 3rd vice chair",
	"enums.role.GOVERNING_BOARD_CHAIR": "Governing board chair",
	"enums.role.GOVERNING_BOARD_OBSERVER": "Governing board observer",
	"enums.role.HEAD_OF_DELEGATION": "Head of delegation",
	"enums.role.NODE_MANAGER": "Node manager",
	"enums.role.NODE_STAFF": "Node staff",
	"enums.role.NODES_COMMITTEE_1ST_VICE_CHAIR": "Nodes committee 1st vice chair",
	"enums.role.NODES_COMMITTEE_2ND_VICE_CHAIR": "Nodes committee 2nd vice chair",
	"enums.role.NODES_COMMITTEE_CHAIR": "Nodes committee chair",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_AFRICA": "Nodes regional representative Africa",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_ASIA": "Nodes regional representative Asia",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_LATIN_AMERICA": "Nodes regional representative Latin America and the Caribbean",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_DEPUTY_AFRICA": "Nodes regional representative deputy Africa",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_DEPUTY_ASIA": "Nodes regional representative deputy Asia",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_DEPUTY_EUROPE": "Nodes regional representative deputy Europe and Central Asia",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_DEPUTY_LATIN_AMERICA": "Nodes regional representative deputy Latin America and the Caribbean",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_EUROPE": "Nodes regional representative Europe and Central Asia",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_NORTH_AMERICA": "Nodes regional representative North America",
	"enums.role.NODES_REGIONAL_REPRESENTATIVE_DEPUTY_NORTH_AMERICA": "Nodes regional representative deputy North America",
	"enums.role.REGIONAL_NODE_REPRESENTATIVE": "Regional node representative",
	"enums.role.SCIENCE_COMMITTEE_1ST_VICE_CHAIR": "Science committee 1st vice chair",
	"enums.role.SCIENCE_COMMITTEE_2ND_VICE_CHAIR": "Science committee 2nd vice chair",
	"enums.role.SCIENCE_COMMITTEE_3RD_VICE_CHAIR": "Science committee 3rd vice chair",
	"enums.role.SCIENCE_COMMITTEE_CHAIR": "Science committee chair",
	"enums.role.SCIENCE_COMMITTEE_MEMBER": "Science committee member",
	"enums.role.TEMPORARY_DELEGATE": "Temporary delegate",
	"enums.role.TEMPORARY_HEAD_OF_DELEGATION": "Temporary head of delegation",
	"enums.isInCluster.true": "Yes",
	"enums.isInCluster.false": "No",
	"enums.datasetType.OCCURRENCE": "Occurrence",
	"enums.datasetType.CHECKLIST": "Checklist",
	"enums.datasetType.METADATA": "Metadata",
	"enums.datasetType.SAMPLING_EVENT": "Sampling event",
	"enums.datasetSubtype.TAXONOMIC_AUTHORITY": "Taxonomic authority",
	"enums.datasetSubtype.NOMENCLATOR_AUTHORITY": "Nomenclator authority",
	"enums.datasetSubtype.INVENTORY_THEMATIC": "Inventory thematic",
	"enums.datasetSubtype.INVENTORY_REGIONAL": "Inventory regional",
	"enums.datasetSubtype.GLOBAL_SPECIES_DATASET": "Global species dataset",
	"enums.datasetSubtype.DERIVED_FROM_OCCURRENCE": "Derived from occurrence",
	"enums.datasetSubtype.SPECIMEN": "Specimen",
	"enums.datasetSubtype.OBSERVATION": "Observation",
	"enums.dwcaExtension.http://rs.tdwg.org/dwc/terms/Occurrence": "Occurrence",
	"enums.dwcaExtension.http://rs.tdwg.org/ac/terms/Multimedia": "Audubon multimedia",
	"enums.dwcaExtension.http://data.ggbn.org/schemas/ggbn/terms/Amplification": "Amplification",
	"enums.dwcaExtension.http://data.ggbn.org/schemas/ggbn/terms/Cloning": "Cloning",
	"enums.dwcaExtension.http://data.ggbn.org/schemas/ggbn/terms/GelImage": "GelImage",
	"enums.dwcaExtension.http://data.ggbn.org/schemas/ggbn/terms/Loan": "Loan",
	"enums.dwcaExtension.http://data.ggbn.org/schemas/ggbn/terms/MaterialSample": "Material sample",
	"enums.dwcaExtension.http://data.ggbn.org/schemas/ggbn/terms/Permit": "Permit",
	"enums.dwcaExtension.http://data.ggbn.org/schemas/ggbn/terms/Preparation": "Preparation",
	"enums.dwcaExtension.http://data.ggbn.org/schemas/ggbn/terms/Preservation": "Preservation",
	"enums.dwcaExtension.http://rs.iobis.org/obis/terms/ExtendedMeasurementOrFact": "Extended measurement or fact",
	"enums.dwcaExtension.http://rs.tdwg.org/chrono/terms/ChronometricAge": "Chronometric age",
	"enums.dwcaExtension.http://purl.org/germplasm/germplasmTerm#GermplasmAccession": "Germplasm: Germplasm accession",
	"enums.dwcaExtension.http://purl.org/germplasm/germplasmTerm#MeasurementScore": "Germplasm: Measurement score",
	"enums.dwcaExtension.http://purl.org/germplasm/germplasmTerm#MeasurementTrait": "Germplasm: Measurement trait",
	"enums.dwcaExtension.http://purl.org/germplasm/germplasmTerm#MeasurementTrial": "Germplasm: Measurement trial",
	"enums.dwcaExtension.http://rs.tdwg.org/dwc/terms/Identification": "Identification",
	"enums.dwcaExtension.http://rs.gbif.org/terms/1.0/Identifier": "Identifier",
	"enums.dwcaExtension.http://rs.gbif.org/terms/1.0/Image": "Image",
	"enums.dwcaExtension.http://rs.tdwg.org/dwc/terms/MeasurementOrFact": "Measurement or fact",
	"enums.dwcaExtension.http://rs.gbif.org/terms/1.0/Multimedia": "Multimedia",
	"enums.dwcaExtension.http://rs.gbif.org/terms/1.0/Reference": "Reference",
	"enums.dwcaExtension.http://rs.tdwg.org/dwc/terms/ResourceRelationship": "Resource relationship"
};

var localeMappingPromise = axios.get("".concat(env.TRANSLATIONS, "/translations.json"));

var useUnmounted = function useUnmounted() {
  var unmounted = React.useRef(false);
  React.useEffect(function () {
    return function () {
      unmounted.current = true;
    };
  }, []);
  return unmounted;
};

function useTranslation(_ref) {
  var locale = _ref.locale;

  var _useState = React.useState(en),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      messages = _useState2[0],
      setMessages = _useState2[1];

  var _useState3 = React.useState(),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      localeMap = _useState4[0],
      setLocaleMap = _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = _slicedToArray__default["default"](_useState5, 2),
      loading = _useState6[0],
      setLoading = _useState6[1];

  var _useState7 = React.useState(false),
      _useState8 = _slicedToArray__default["default"](_useState7, 2),
      error = _useState8[0],
      setError = _useState8[1]; // functions are called when passed to useState so it has to be wrapped. 
  // We provide an empty call, just so we do not have to check for existence subsequently


  var _useState9 = React.useState(function () {
    return function () {};
  }),
      _useState10 = _slicedToArray__default["default"](_useState9, 2),
      cancelRequest = _useState10[0],
      setCancel = _useState10[1];

  useUnmounted();

  function load(_ref2) {
    var locale = _ref2.locale;

    if (locale === 'en') {
      setMessages(en);
      return;
    }

    setLoading(true);
    setError(false);
    localeMappingPromise.promise.then(function (mappingResponse) {
      var _localeMapping$locale, _localeMapping$locale2;

      var localeMapping = mappingResponse.data;
      setLocaleMap((_localeMapping$locale = localeMapping[locale]) === null || _localeMapping$locale === void 0 ? void 0 : _localeMapping$locale.localeMap);
      var messagesUrl = (_localeMapping$locale2 = localeMapping[locale]) === null || _localeMapping$locale2 === void 0 ? void 0 : _localeMapping$locale2.messages;

      if (messagesUrl) {
        var _axios$get = axios.get(messagesUrl),
            localePromise = _axios$get.promise,
            cancel = _axios$get.cancel; // functions cannot be direct values in states as function are taken as a way to create derived states
        // https://medium.com/swlh/how-to-store-a-function-with-the-usestate-hook-in-react-8a88dd4eede1


        setCancel(function () {
          return cancel;
        });
        localePromise.then(function (messageResponse) {
          setMessages(messageResponse.data);
          setLoading(false);
        })["catch"](function (err) {
          setMessages();
          setLoading(false);
          setError(true);
        });
      } else {
        setLoading(false);
        setError(true);
        console.log('Translation not found');
      }
    })["catch"](console.log); // dataPromise.
    //   then(response => {
    //     if (unmounted.current) return;
    //     const { data, error } = response;
    //     if (error?.isCanceled?.message === RENEW_REQUEST) {
    //       return;
    //     }
    //     setError(error);
    //     setData(data);
    //     setLoading(false);
    //   })
    //   .catch(err => {
    //     if (unmounted.current) return;
    //     setError({ error: true, type: 'unknown' });
    //     setData();
    //     setLoading(false);
    //   });
  } // Cancel pending request on unmount


  React.useEffect(function () {
    return function () {
      cancelRequest();
    };
  }, [cancelRequest]);
  React.useEffect(function () {
    load({
      locale: locale
    }); // we have above cleanup useEffect for unmounting
  }, [locale]);
  return {
    messages: messages,
    localeMap: localeMap,
    loading: loading,
    error: error
  };
}

var _excluded$1l = ["locale", "messages"];

function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$i(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function LocaleProvider(_ref) {
  var locale = _ref.locale,
      _ref$messages = _ref.messages,
      customMessages = _ref$messages === void 0 ? {} : _ref$messages,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1l);

  var _useTranslation = useTranslation({
    locale: locale
  }),
      messages = _useTranslation.messages,
      localeMap = _useTranslation.localeMap;

  return react.jsx(LocaleContext.Provider, {
    value: {
      localeMap: localeMap
    }
  }, react.jsx(reactIntl.IntlProvider, _extends__default["default"]({
    locale: locale,
    messages: _objectSpread$i(_objectSpread$i({}, messages), customMessages)
  }, props)));
}

var isArray$c = isArray_1,
    isSymbol$2 = isSymbol_1;

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey$3(value, object) {
  if (isArray$c(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol$2(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

var _isKey = isKey$3;

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

function isObject$a(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject$a;

var baseGetTag$4 = _baseGetTag,
    isObject$9 = isObject_1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$3(value) {
  if (!isObject$9(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag$4(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction$3;

var root$6 = _root;

/** Used to detect overreaching core-js shims. */
var coreJsData$1 = root$6['__core-js_shared__'];

var _coreJsData = coreJsData$1;

var coreJsData = _coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked$1(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

var _isMasked = isMasked$1;

/** Used for built-in method references. */

var funcProto$2 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource$2(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

var _toSource = toSource$2;

var isFunction$2 = isFunction_1,
    isMasked = _isMasked,
    isObject$8 = isObject_1,
    toSource$1 = _toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$e = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$c = objectProto$e.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$c).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative$1(value) {
  if (!isObject$8(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource$1(value));
}

var _baseIsNative = baseIsNative$1;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function getValue$1(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue$1;

var baseIsNative = _baseIsNative,
    getValue = _getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative$7(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

var _getNative = getNative$7;

var getNative$6 = _getNative;

/* Built-in method references that are verified to be native. */
var nativeCreate$4 = getNative$6(Object, 'create');

var _nativeCreate = nativeCreate$4;

var nativeCreate$3 = _nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}

var _hashClear = hashClear$1;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function hashDelete$1(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

var _hashDelete = hashDelete$1;

var nativeCreate$2 = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$d = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$b = objectProto$d.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet$1(key) {
  var data = this.__data__;
  if (nativeCreate$2) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? undefined : result;
  }
  return hasOwnProperty$b.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet$1;

var nativeCreate$1 = _nativeCreate;

/** Used for built-in method references. */
var objectProto$c = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$c.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$a.call(data, key);
}

var _hashHas = hashHas$1;

var nativeCreate = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet$1(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

var _hashSet = hashSet$1;

var hashClear = _hashClear,
    hashDelete = _hashDelete,
    hashGet = _hashGet,
    hashHas = _hashHas,
    hashSet = _hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash$1(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash$1.prototype.clear = hashClear;
Hash$1.prototype['delete'] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;

var _Hash = Hash$1;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}

var _listCacheClear = listCacheClear$1;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq$5(value, other) {
  return value === other || (value !== value && other !== other);
}

var eq_1 = eq$5;

var eq$4 = eq_1;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf$4(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$4(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

var _assocIndexOf = assocIndexOf$4;

var assocIndexOf$3 = _assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete$1(key) {
  var data = this.__data__,
      index = assocIndexOf$3(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

var _listCacheDelete = listCacheDelete$1;

var assocIndexOf$2 = _assocIndexOf;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet$1(key) {
  var data = this.__data__,
      index = assocIndexOf$2(data, key);

  return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet$1;

var assocIndexOf$1 = _assocIndexOf;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas$1;

var assocIndexOf = _assocIndexOf;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet$1(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

var _listCacheSet = listCacheSet$1;

var listCacheClear = _listCacheClear,
    listCacheDelete = _listCacheDelete,
    listCacheGet = _listCacheGet,
    listCacheHas = _listCacheHas,
    listCacheSet = _listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache$4(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache$4.prototype.clear = listCacheClear;
ListCache$4.prototype['delete'] = listCacheDelete;
ListCache$4.prototype.get = listCacheGet;
ListCache$4.prototype.has = listCacheHas;
ListCache$4.prototype.set = listCacheSet;

var _ListCache = ListCache$4;

var getNative$5 = _getNative,
    root$5 = _root;

/* Built-in method references that are verified to be native. */
var Map$6 = getNative$5(root$5, 'Map');

var _Map = Map$6;

var Hash = _Hash,
    ListCache$3 = _ListCache,
    Map$5 = _Map;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$5 || ListCache$3),
    'string': new Hash
  };
}

var _mapCacheClear = mapCacheClear$1;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

function isKeyable$1(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

var _isKeyable = isKeyable$1;

var isKeyable = _isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData$4(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

var _getMapData = getMapData$4;

var getMapData$3 = _getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete$1(key) {
  var result = getMapData$3(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

var _mapCacheDelete = mapCacheDelete$1;

var getMapData$2 = _getMapData;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet$1(key) {
  return getMapData$2(this, key).get(key);
}

var _mapCacheGet = mapCacheGet$1;

var getMapData$1 = _getMapData;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}

var _mapCacheHas = mapCacheHas$1;

var getMapData = _getMapData;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet$1(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

var _mapCacheSet = mapCacheSet$1;

var mapCacheClear = _mapCacheClear,
    mapCacheDelete = _mapCacheDelete,
    mapCacheGet = _mapCacheGet,
    mapCacheHas = _mapCacheHas,
    mapCacheSet = _mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache$3(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache$3.prototype.clear = mapCacheClear;
MapCache$3.prototype['delete'] = mapCacheDelete;
MapCache$3.prototype.get = mapCacheGet;
MapCache$3.prototype.has = mapCacheHas;
MapCache$3.prototype.set = mapCacheSet;

var _MapCache = MapCache$3;

var MapCache$2 = _MapCache;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize$1(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$1.Cache || MapCache$2);
  return memoized;
}

// Expose `MapCache`.
memoize$1.Cache = MapCache$2;

var memoize_1 = memoize$1;

var memoize = memoize_1;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped$1(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

var _memoizeCapped = memoizeCapped$1;

var memoizeCapped = _memoizeCapped;

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath$1 = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var _stringToPath = stringToPath$1;

var isArray$b = isArray_1,
    isKey$2 = _isKey,
    stringToPath = _stringToPath,
    toString = toString_1;

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath$4(value, object) {
  if (isArray$b(value)) {
    return value;
  }
  return isKey$2(value, object) ? [value] : stringToPath(toString(value));
}

var _castPath = castPath$4;

var isSymbol$1 = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey$5(value) {
  if (typeof value == 'string' || isSymbol$1(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

var _toKey = toKey$5;

var castPath$3 = _castPath,
    toKey$4 = _toKey;

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet$4(object, path) {
  path = castPath$3(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey$4(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

var _baseGet = baseGet$4;

var baseGet$3 = _baseGet;

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get$1(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet$3(object, path);
  return result === undefined ? defaultValue : result;
}

var get_1 = get$1;

var ListCache$2 = _ListCache;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear$1() {
  this.__data__ = new ListCache$2;
  this.size = 0;
}

var _stackClear = stackClear$1;

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function stackDelete$1(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

var _stackDelete = stackDelete$1;

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function stackGet$1(key) {
  return this.__data__.get(key);
}

var _stackGet = stackGet$1;

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function stackHas$1(key) {
  return this.__data__.has(key);
}

var _stackHas = stackHas$1;

var ListCache$1 = _ListCache,
    Map$4 = _Map,
    MapCache$1 = _MapCache;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE$2 = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet$1(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache$1) {
    var pairs = data.__data__;
    if (!Map$4 || (pairs.length < LARGE_ARRAY_SIZE$2 - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache$1(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

var _stackSet = stackSet$1;

var ListCache = _ListCache,
    stackClear = _stackClear,
    stackDelete = _stackDelete,
    stackGet = _stackGet,
    stackHas = _stackHas,
    stackSet = _stackSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack$4(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack$4.prototype.clear = stackClear;
Stack$4.prototype['delete'] = stackDelete;
Stack$4.prototype.get = stackGet;
Stack$4.prototype.has = stackHas;
Stack$4.prototype.set = stackSet;

var _Stack = Stack$4;

var getNative$4 = _getNative;

var defineProperty$2 = (function() {
  try {
    var func = getNative$4(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var _defineProperty = defineProperty$2;

var defineProperty$1 = _defineProperty;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue$4(object, key, value) {
  if (key == '__proto__' && defineProperty$1) {
    defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _baseAssignValue = baseAssignValue$4;

var baseAssignValue$3 = _baseAssignValue,
    eq$3 = eq_1;

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue$2(object, key, value) {
  if ((value !== undefined && !eq$3(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue$3(object, key, value);
  }
}

var _assignMergeValue = assignMergeValue$2;

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

function createBaseFor$1(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

var _createBaseFor = createBaseFor$1;

var createBaseFor = _createBaseFor;

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor$2 = createBaseFor();

var _baseFor = baseFor$2;

var _cloneBuffer = {exports: {}};

(function (module, exports) {
	var root = _root;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;
} (_cloneBuffer, _cloneBuffer.exports));

var root$4 = _root;

/** Built-in value references. */
var Uint8Array$2 = root$4.Uint8Array;

var _Uint8Array = Uint8Array$2;

var Uint8Array$1 = _Uint8Array;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer$3(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
  return result;
}

var _cloneArrayBuffer = cloneArrayBuffer$3;

var cloneArrayBuffer$2 = _cloneArrayBuffer;

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray$2(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

var _cloneTypedArray = cloneTypedArray$2;

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */

function copyArray$2(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

var _copyArray = copyArray$2;

var isObject$7 = isObject_1;

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate$1 = (function() {
  function object() {}
  return function(proto) {
    if (!isObject$7(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

var _baseCreate = baseCreate$1;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

function overArg$2(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

var _overArg = overArg$2;

var overArg$1 = _overArg;

/** Built-in value references. */
var getPrototype$3 = overArg$1(Object.getPrototypeOf, Object);

var _getPrototype = getPrototype$3;

/** Used for built-in method references. */

var objectProto$b = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype$4(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$b;

  return value === proto;
}

var _isPrototype = isPrototype$4;

var baseCreate = _baseCreate,
    getPrototype$2 = _getPrototype,
    isPrototype$3 = _isPrototype;

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject$2(object) {
  return (typeof object.constructor == 'function' && !isPrototype$3(object))
    ? baseCreate(getPrototype$2(object))
    : {};
}

var _initCloneObject = initCloneObject$2;

var baseGetTag$3 = _baseGetTag,
    isObjectLike$7 = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$3 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments$1(value) {
  return isObjectLike$7(value) && baseGetTag$3(value) == argsTag$3;
}

var _baseIsArguments = baseIsArguments$1;

var baseIsArguments = _baseIsArguments,
    isObjectLike$6 = isObjectLike_1;

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$a.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$a.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments$5 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike$6(value) && hasOwnProperty$9.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

var isArguments_1 = isArguments$5;

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER$1 = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength$3(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
}

var isLength_1 = isLength$3;

var isFunction$1 = isFunction_1,
    isLength$2 = isLength_1;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike$7(value) {
  return value != null && isLength$2(value.length) && !isFunction$1(value);
}

var isArrayLike_1 = isArrayLike$7;

var isArrayLike$6 = isArrayLike_1,
    isObjectLike$5 = isObjectLike_1;

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject$5(value) {
  return isObjectLike$5(value) && isArrayLike$6(value);
}

var isArrayLikeObject_1 = isArrayLikeObject$5;

var isBuffer$5 = {exports: {}};

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

function stubFalse() {
  return false;
}

var stubFalse_1 = stubFalse;

(function (module, exports) {
	var root = _root,
	    stubFalse = stubFalse_1;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;
} (isBuffer$5, isBuffer$5.exports));

var baseGetTag$2 = _baseGetTag,
    getPrototype$1 = _getPrototype,
    isObjectLike$4 = isObjectLike_1;

/** `Object#toString` result references. */
var objectTag$4 = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$9 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$9.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject$1(value) {
  if (!isObjectLike$4(value) || baseGetTag$2(value) != objectTag$4) {
    return false;
  }
  var proto = getPrototype$1(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$8.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

var isPlainObject_1 = isPlainObject$1;

var baseGetTag$1 = _baseGetTag,
    isLength$1 = isLength_1,
    isObjectLike$3 = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$2 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$6 = '[object Map]',
    numberTag$3 = '[object Number]',
    objectTag$3 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$6 = '[object Set]',
    stringTag$3 = '[object String]',
    weakMapTag$2 = '[object WeakMap]';

var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] =
typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] =
typedArrayTags[setTag$6] = typedArrayTags[stringTag$3] =
typedArrayTags[weakMapTag$2] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray$1(value) {
  return isObjectLike$3(value) &&
    isLength$1(value.length) && !!typedArrayTags[baseGetTag$1(value)];
}

var _baseIsTypedArray = baseIsTypedArray$1;

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

function baseUnary$6(func) {
  return function(value) {
    return func(value);
  };
}

var _baseUnary = baseUnary$6;

var _nodeUtil = {exports: {}};

(function (module, exports) {
	var freeGlobal = _freeGlobal;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;
} (_nodeUtil, _nodeUtil.exports));

var baseIsTypedArray = _baseIsTypedArray,
    baseUnary$5 = _baseUnary,
    nodeUtil$2 = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray$4 = nodeIsTypedArray ? baseUnary$5(nodeIsTypedArray) : baseIsTypedArray;

var isTypedArray_1 = isTypedArray$4;

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function safeGet$2(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

var _safeGet = safeGet$2;

var baseAssignValue$2 = _baseAssignValue,
    eq$2 = eq_1;

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue$3(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$7.call(object, key) && eq$2(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue$2(object, key, value);
  }
}

var _assignValue = assignValue$3;

var assignValue$2 = _assignValue,
    baseAssignValue$1 = _baseAssignValue;

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject$5(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue$1(object, key, newValue);
    } else {
      assignValue$2(object, key, newValue);
    }
  }
  return object;
}

var _copyObject = copyObject$5;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

function baseTimes$1(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

var _baseTimes = baseTimes$1;

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex$4(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

var _isIndex = isIndex$4;

var baseTimes = _baseTimes,
    isArguments$4 = isArguments_1,
    isArray$a = isArray_1,
    isBuffer$4 = isBuffer$5.exports,
    isIndex$3 = _isIndex,
    isTypedArray$3 = isTypedArray_1;

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys$2(value, inherited) {
  var isArr = isArray$a(value),
      isArg = !isArr && isArguments$4(value),
      isBuff = !isArr && !isArg && isBuffer$4(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$3(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$6.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex$3(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

var _arrayLikeKeys = arrayLikeKeys$2;

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function nativeKeysIn$1(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

var _nativeKeysIn = nativeKeysIn$1;

var isObject$6 = isObject_1,
    isPrototype$2 = _isPrototype,
    nativeKeysIn = _nativeKeysIn;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn$1(object) {
  if (!isObject$6(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype$2(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$5.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

var _baseKeysIn = baseKeysIn$1;

var arrayLikeKeys$1 = _arrayLikeKeys,
    baseKeysIn = _baseKeysIn,
    isArrayLike$5 = isArrayLike_1;

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn$5(object) {
  return isArrayLike$5(object) ? arrayLikeKeys$1(object, true) : baseKeysIn(object);
}

var keysIn_1 = keysIn$5;

var copyObject$4 = _copyObject,
    keysIn$4 = keysIn_1;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject$1(value) {
  return copyObject$4(value, keysIn$4(value));
}

var toPlainObject_1 = toPlainObject$1;

var assignMergeValue$1 = _assignMergeValue,
    cloneBuffer$1 = _cloneBuffer.exports,
    cloneTypedArray$1 = _cloneTypedArray,
    copyArray$1 = _copyArray,
    initCloneObject$1 = _initCloneObject,
    isArguments$3 = isArguments_1,
    isArray$9 = isArray_1,
    isArrayLikeObject$4 = isArrayLikeObject_1,
    isBuffer$3 = isBuffer$5.exports,
    isFunction = isFunction_1,
    isObject$5 = isObject_1,
    isPlainObject = isPlainObject_1,
    isTypedArray$2 = isTypedArray_1,
    safeGet$1 = _safeGet,
    toPlainObject = toPlainObject_1;

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet$1(object, key),
      srcValue = safeGet$1(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue$1(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray$9(srcValue),
        isBuff = !isArr && isBuffer$3(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray$2(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$9(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject$4(objValue)) {
        newValue = copyArray$1(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer$1(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray$1(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments$3(srcValue)) {
      newValue = objValue;
      if (isArguments$3(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject$5(objValue) || isFunction(objValue)) {
        newValue = initCloneObject$1(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue$1(object, key, newValue);
}

var _baseMergeDeep = baseMergeDeep$1;

var Stack$3 = _Stack,
    assignMergeValue = _assignMergeValue,
    baseFor$1 = _baseFor,
    baseMergeDeep = _baseMergeDeep,
    isObject$4 = isObject_1,
    keysIn$3 = keysIn_1,
    safeGet = _safeGet;

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge$1(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor$1(source, function(srcValue, key) {
    stack || (stack = new Stack$3);
    if (isObject$4(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge$1, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn$3);
}

var _baseMerge = baseMerge$1;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

function identity$4(value) {
  return value;
}

var identity_1 = identity$4;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */

function apply$1(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

var _apply = apply$1;

var apply = _apply;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest$2(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

var _overRest = overRest$2;

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */

function constant$1(value) {
  return function() {
    return value;
  };
}

var constant_1 = constant$1;

var constant = constant_1,
    defineProperty = _defineProperty,
    identity$3 = identity_1;

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString$1 = !defineProperty ? identity$3 : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

var _baseSetToString = baseSetToString$1;

/** Used to detect hot functions by number of calls within a span of milliseconds. */

var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut$1(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

var _shortOut = shortOut$1;

var baseSetToString = _baseSetToString,
    shortOut = _shortOut;

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString$2 = shortOut(baseSetToString);

var _setToString = setToString$2;

var identity$2 = identity_1,
    overRest$1 = _overRest,
    setToString$1 = _setToString;

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest$6(func, start) {
  return setToString$1(overRest$1(func, start, identity$2), func + '');
}

var _baseRest = baseRest$6;

var eq$1 = eq_1,
    isArrayLike$4 = isArrayLike_1,
    isIndex$2 = _isIndex,
    isObject$3 = isObject_1;

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall$2(value, index, object) {
  if (!isObject$3(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike$4(object) && isIndex$2(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq$1(object[index], value);
  }
  return false;
}

var _isIterateeCall = isIterateeCall$2;

var baseRest$5 = _baseRest,
    isIterateeCall$1 = _isIterateeCall;

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner$1(assigner) {
  return baseRest$5(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall$1(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

var _createAssigner = createAssigner$1;

var baseMerge = _baseMerge,
    createAssigner = _createAssigner;

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

var merge_1 = merge;

var a11yVariables = {
  name: 'a11y',
  primary: '#333333',
  fontSize: '17px',
  background: '#ccc',
  paperBackground: '#ffffff',
  color: '#000000',
  fontFamily: 'BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif'
};

var vertnetVariables = {
  primary: '#46aa42',
  fontSize: '16px',
  background: '#efefef',
  paperBackground: '#ffffff',
  color: '#162d3d',
  fontFamily: '"Lato", "Helvetica Neue", BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica", "Arial", sans-serif',
  borderRadius: 0
};

var gbifVariables = {
  name: 'light',
  dense: false,
  primary: '#4c9c2e',
  linkColor: '#4c9c2e',
  fontSize: '16px',
  background: '#efefef',
  paperBackground: '#ffffff',
  paperBorderColor: '#e5ebed',
  color: '#1f3424',
  darkTheme: false,
  fontFamily: '"Helvetica Neue", BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica", "Arial", sans-serif',
  headerFontFamily: 'Georgia, Garamond, BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica", "Arial", sans-serif',
  borderRadius: 4,
  drawerZIndex: 1000
};

var rtlVariables = {
  name: 'dark',
  dir: 'rtl',
  dense: true,
  primary: '#d09a04',
  fontSize: '14px',
  background: '#0b0c1b',
  paperBackground: '#161927',
  paperBackgroundElevated: '#23273e',
  // background: '#181919',
  // paperBackground: '#2c2c2d',
  // paperBackgroundElevated: '#363638',
  paperBorderColor: '#0b0d13',
  color: '#e3e5ea',
  darkTheme: true,
  fontFamily: 'BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif',
  borderRadius: 3
};

themeBuilder.build(darkVariables);
var lightTheme = themeBuilder.build(lightVariables);
themeBuilder.build(a11yVariables);
themeBuilder.build(vertnetVariables);
themeBuilder.build(gbifVariables);
themeBuilder.build(rtlVariables);

var defaultContext = {
  routeConfig: defaultContext$1,
  occurrence: {},
  dataset: {},
  literature: {},
  institution: {},
  collection: {},
  publisher: {}
};
var SiteContext = /*#__PURE__*/React__default["default"].createContext(defaultContext);

var _excluded$1k = ["siteConfig"];
var client = new ApiClient({
  gql: {
    endpoint: env.GRAPH_API
  },
  v1: {
    endpoint: env.API_V1
  }
});

function StandaloneWrapper(_ref) {
  var _ref$siteConfig = _ref.siteConfig,
      siteConfig = _ref$siteConfig === void 0 ? {} : _ref$siteConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1k);

  var _siteConfig$theme = siteConfig.theme,
      theme = _siteConfig$theme === void 0 ? lightTheme : _siteConfig$theme,
      _siteConfig$locale = siteConfig.locale,
      locale = _siteConfig$locale === void 0 ? 'en' : _siteConfig$locale,
      messages = siteConfig.messages,
      routes = siteConfig.routes;

  var routeConfig = merge_1({}, defaultContext$1, routes || {});

  var basename = get_1(routeConfig, 'basename');

  var root = react.jsx(Root, {
    id: "application",
    appRoot: true
  }, react.jsx(reactRouterDom.BrowserRouter, _extends__default["default"]({}, props, {
    basename: basename
  }), react.jsx(useQueryParams.QueryParamProvider, _extends__default["default"]({
    ReactRouterRoute: reactRouterDom.Route
  }, props))));

  return react.jsx(SiteContext.Provider, {
    value: siteConfig
  }, react.jsx(ApiContext.Provider, {
    value: client
  }, react.jsx(LocaleProvider, {
    locale: locale,
    messages: messages
  }, react.jsx(ThemeContext.Provider, {
    value: theme
  }, routes && react.jsx(RouteContext.Provider, {
    value: routeConfig
  }, root), !routes && root))));
}

var FilterContext = /*#__PURE__*/React__default["default"].createContext({});

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */

function arrayEach$1(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

var _arrayEach = arrayEach$1;

var overArg = _overArg;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys$1 = overArg(Object.keys, Object);

var _nativeKeys = nativeKeys$1;

var isPrototype$1 = _isPrototype,
    nativeKeys = _nativeKeys;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys$2(object) {
  if (!isPrototype$1(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$4.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

var _baseKeys = baseKeys$2;

var arrayLikeKeys = _arrayLikeKeys,
    baseKeys$1 = _baseKeys,
    isArrayLike$3 = isArrayLike_1;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys$5(object) {
  return isArrayLike$3(object) ? arrayLikeKeys(object) : baseKeys$1(object);
}

var keys_1 = keys$5;

var copyObject$3 = _copyObject,
    keys$4 = keys_1;

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign$1(object, source) {
  return object && copyObject$3(source, keys$4(source), object);
}

var _baseAssign = baseAssign$1;

var copyObject$2 = _copyObject,
    keysIn$2 = keysIn_1;

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn$1(object, source) {
  return object && copyObject$2(source, keysIn$2(source), object);
}

var _baseAssignIn = baseAssignIn$1;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

function arrayFilter$1(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

var _arrayFilter = arrayFilter$1;

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

function stubArray$2() {
  return [];
}

var stubArray_1 = stubArray$2;

var arrayFilter = _arrayFilter,
    stubArray$1 = stubArray_1;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

var _getSymbols = getSymbols$3;

var copyObject$1 = _copyObject,
    getSymbols$2 = _getSymbols;

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols$1(source, object) {
  return copyObject$1(source, getSymbols$2(source), object);
}

var _copySymbols = copySymbols$1;

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

function arrayPush$3(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

var _arrayPush = arrayPush$3;

var arrayPush$2 = _arrayPush,
    getPrototype = _getPrototype,
    getSymbols$1 = _getSymbols,
    stubArray = stubArray_1;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush$2(result, getSymbols$1(object));
    object = getPrototype(object);
  }
  return result;
};

var _getSymbolsIn = getSymbolsIn$2;

var copyObject = _copyObject,
    getSymbolsIn$1 = _getSymbolsIn;

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn$1(source, object) {
  return copyObject(source, getSymbolsIn$1(source), object);
}

var _copySymbolsIn = copySymbolsIn$1;

var arrayPush$1 = _arrayPush,
    isArray$8 = isArray_1;

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$8(object) ? result : arrayPush$1(result, symbolsFunc(object));
}

var _baseGetAllKeys = baseGetAllKeys$2;

var baseGetAllKeys$1 = _baseGetAllKeys,
    getSymbols = _getSymbols,
    keys$3 = keys_1;

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys$2(object) {
  return baseGetAllKeys$1(object, keys$3, getSymbols);
}

var _getAllKeys = getAllKeys$2;

var baseGetAllKeys = _baseGetAllKeys,
    getSymbolsIn = _getSymbolsIn,
    keysIn$1 = keysIn_1;

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn$2(object) {
  return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
}

var _getAllKeysIn = getAllKeysIn$2;

var getNative$3 = _getNative,
    root$3 = _root;

/* Built-in method references that are verified to be native. */
var DataView$1 = getNative$3(root$3, 'DataView');

var _DataView = DataView$1;

var getNative$2 = _getNative,
    root$2 = _root;

/* Built-in method references that are verified to be native. */
var Promise$2 = getNative$2(root$2, 'Promise');

var _Promise = Promise$2;

var getNative$1 = _getNative,
    root$1 = _root;

/* Built-in method references that are verified to be native. */
var Set$3 = getNative$1(root$1, 'Set');

var _Set = Set$3;

var getNative = _getNative,
    root = _root;

/* Built-in method references that are verified to be native. */
var WeakMap$1 = getNative(root, 'WeakMap');

var _WeakMap = WeakMap$1;

var DataView = _DataView,
    Map$3 = _Map,
    Promise$1 = _Promise,
    Set$2 = _Set,
    WeakMap = _WeakMap,
    baseGetTag = _baseGetTag,
    toSource = _toSource;

/** `Object#toString` result references. */
var mapTag$5 = '[object Map]',
    objectTag$2 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$5 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';

var dataViewTag$3 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$3),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$2),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag$5 = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag$5(new DataView(new ArrayBuffer(1))) != dataViewTag$3) ||
    (Map$3 && getTag$5(new Map$3) != mapTag$5) ||
    (Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag) ||
    (Set$2 && getTag$5(new Set$2) != setTag$5) ||
    (WeakMap && getTag$5(new WeakMap) != weakMapTag$1)) {
  getTag$5 = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag$2 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$3;
        case mapCtorString: return mapTag$5;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$5;
        case weakMapCtorString: return weakMapTag$1;
      }
    }
    return result;
  };
}

var _getTag = getTag$5;

/** Used for built-in method references. */

var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray$1(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty$3.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

var _initCloneArray = initCloneArray$1;

var cloneArrayBuffer$1 = _cloneArrayBuffer;

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView$1(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

var _cloneDataView = cloneDataView$1;

/** Used to match `RegExp` flags from their coerced string values. */

var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp$1(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

var _cloneRegExp = cloneRegExp$1;

var Symbol$2 = _Symbol;

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol$1(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}

var _cloneSymbol = cloneSymbol$1;

var cloneArrayBuffer = _cloneArrayBuffer,
    cloneDataView = _cloneDataView,
    cloneRegExp = _cloneRegExp,
    cloneSymbol = _cloneSymbol,
    cloneTypedArray = _cloneTypedArray;

/** `Object#toString` result references. */
var boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    mapTag$4 = '[object Map]',
    numberTag$2 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$2 = '[object Symbol]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag$1(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$2:
      return cloneArrayBuffer(object);

    case boolTag$2:
    case dateTag$2:
      return new Ctor(+object);

    case dataViewTag$2:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray(object, isDeep);

    case mapTag$4:
      return new Ctor;

    case numberTag$2:
    case stringTag$2:
      return new Ctor(object);

    case regexpTag$2:
      return cloneRegExp(object);

    case setTag$4:
      return new Ctor;

    case symbolTag$2:
      return cloneSymbol(object);
  }
}

var _initCloneByTag = initCloneByTag$1;

var getTag$4 = _getTag,
    isObjectLike$2 = isObjectLike_1;

/** `Object#toString` result references. */
var mapTag$3 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap$1(value) {
  return isObjectLike$2(value) && getTag$4(value) == mapTag$3;
}

var _baseIsMap = baseIsMap$1;

var baseIsMap = _baseIsMap,
    baseUnary$4 = _baseUnary,
    nodeUtil$1 = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap$1 = nodeIsMap ? baseUnary$4(nodeIsMap) : baseIsMap;

var isMap_1 = isMap$1;

var getTag$3 = _getTag,
    isObjectLike$1 = isObjectLike_1;

/** `Object#toString` result references. */
var setTag$3 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet$1(value) {
  return isObjectLike$1(value) && getTag$3(value) == setTag$3;
}

var _baseIsSet = baseIsSet$1;

var baseIsSet = _baseIsSet,
    baseUnary$3 = _baseUnary,
    nodeUtil = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet$1 = nodeIsSet ? baseUnary$3(nodeIsSet) : baseIsSet;

var isSet_1 = isSet$1;

var Stack$2 = _Stack,
    arrayEach = _arrayEach,
    assignValue$1 = _assignValue,
    baseAssign = _baseAssign,
    baseAssignIn = _baseAssignIn,
    cloneBuffer = _cloneBuffer.exports,
    copyArray = _copyArray,
    copySymbols = _copySymbols,
    copySymbolsIn = _copySymbolsIn,
    getAllKeys$1 = _getAllKeys,
    getAllKeysIn$1 = _getAllKeysIn,
    getTag$2 = _getTag,
    initCloneArray = _initCloneArray,
    initCloneByTag = _initCloneByTag,
    initCloneObject = _initCloneObject,
    isArray$7 = isArray_1,
    isBuffer$2 = isBuffer$5.exports,
    isMap = isMap_1,
    isObject$2 = isObject_1,
    isSet = isSet_1,
    keys$2 = keys_1,
    keysIn = keysIn_1;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$1 = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG$1 = 4;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    objectTag$1 = '[object Object]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$1 = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] =
cloneableTags[boolTag$1] = cloneableTags[dateTag$1] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag$2] =
cloneableTags[numberTag$1] = cloneableTags[objectTag$1] =
cloneableTags[regexpTag$1] = cloneableTags[setTag$2] =
cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone$1(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$1,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject$2(value)) {
    return value;
  }
  var isArr = isArray$7(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$2(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer$2(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag$1 || tag == argsTag$1 || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack$2);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone$1(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn$1 : getAllKeys$1)
    : (isFlat ? keysIn : keys$2);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue$1(result, key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

var _baseClone = baseClone$1;

var baseClone = _baseClone;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

var cloneDeep_1 = cloneDeep;

/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd$1(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

var _setCacheAdd = setCacheAdd$1;

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

function setCacheHas$1(value) {
  return this.__data__.has(value);
}

var _setCacheHas = setCacheHas$1;

var MapCache = _MapCache,
    setCacheAdd = _setCacheAdd,
    setCacheHas = _setCacheHas;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache$4(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache$4.prototype.add = SetCache$4.prototype.push = setCacheAdd;
SetCache$4.prototype.has = setCacheHas;

var _SetCache = SetCache$4;

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

var _baseFindIndex = baseFindIndex$1;

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */

function baseIsNaN$1(value) {
  return value !== value;
}

var _baseIsNaN = baseIsNaN$1;

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

function strictIndexOf$1(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

var _strictIndexOf = strictIndexOf$1;

var baseFindIndex = _baseFindIndex,
    baseIsNaN = _baseIsNaN,
    strictIndexOf = _strictIndexOf;

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf$1(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

var _baseIndexOf = baseIndexOf$1;

var baseIndexOf = _baseIndexOf;

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes$3(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

var _arrayIncludes = arrayIncludes$3;

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */

function arrayIncludesWith$3(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

var _arrayIncludesWith = arrayIncludesWith$3;

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function cacheHas$4(cache, key) {
  return cache.has(key);
}

var _cacheHas = cacheHas$4;

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */

function noop$1() {
  // No operation performed.
}

var noop_1 = noop$1;

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

function setToArray$3(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

var _setToArray = setToArray$3;

var Set$1 = _Set,
    noop = noop_1,
    setToArray$2 = _setToArray;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet$1 = !(Set$1 && (1 / setToArray$2(new Set$1([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set$1(values);
};

var _createSet = createSet$1;

var SetCache$3 = _SetCache,
    arrayIncludes$2 = _arrayIncludes,
    arrayIncludesWith$2 = _arrayIncludesWith,
    cacheHas$3 = _cacheHas,
    createSet = _createSet,
    setToArray$1 = _setToArray;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE$1 = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq$3(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes$2,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith$2;
  }
  else if (length >= LARGE_ARRAY_SIZE$1) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray$1(set);
    }
    isCommon = false;
    includes = cacheHas$3;
    seen = new SetCache$3;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

var _baseUniq = baseUniq$3;

var baseUniq$2 = _baseUniq;

/**
 * This method is like `_.uniq` except that it accepts `comparator` which
 * is invoked to compare elements of `array`. The order of result values is
 * determined by the order they occur in the array.The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.uniqWith(objects, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
 */
function uniqWith(array, comparator) {
  comparator = typeof comparator == 'function' ? comparator : undefined;
  return (array && array.length) ? baseUniq$2(array, undefined, comparator) : [];
}

var uniqWith_1 = uniqWith;

var baseKeys = _baseKeys,
    getTag$1 = _getTag,
    isArguments$2 = isArguments_1,
    isArray$6 = isArray_1,
    isArrayLike$2 = isArrayLike_1,
    isBuffer$1 = isBuffer$5.exports,
    isPrototype = _isPrototype,
    isTypedArray$1 = isTypedArray_1;

/** `Object#toString` result references. */
var mapTag$1 = '[object Map]',
    setTag$1 = '[object Set]';

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike$2(value) &&
      (isArray$6(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer$1(value) || isTypedArray$1(value) || isArguments$2(value))) {
    return !value.length;
  }
  var tag = getTag$1(value);
  if (tag == mapTag$1 || tag == setTag$1) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty$2.call(value, key)) {
      return false;
    }
  }
  return true;
}

var isEmpty_1 = isEmpty;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

function arraySome$1(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

var _arraySome = arraySome$1;

var SetCache$2 = _SetCache,
    arraySome = _arraySome,
    cacheHas$2 = _cacheHas;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache$2 : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas$2(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

var _equalArrays = equalArrays$2;

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

function mapToArray$1(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

var _mapToArray = mapToArray$1;

var Symbol$1 = _Symbol,
    Uint8Array = _Uint8Array,
    eq = eq_1,
    equalArrays$1 = _equalArrays,
    mapToArray = _mapToArray,
    setToArray = _setToArray;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

var _equalByTag = equalByTag$1;

var getAllKeys = _getAllKeys;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

var _equalObjects = equalObjects$1;

var Stack$1 = _Stack,
    equalArrays = _equalArrays,
    equalByTag = _equalByTag,
    equalObjects = _equalObjects,
    getTag = _getTag,
    isArray$5 = isArray_1,
    isBuffer = isBuffer$5.exports,
    isTypedArray = isTypedArray_1;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$5(object),
      othIsArr = isArray$5(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack$1);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack$1);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack$1);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

var _baseIsEqualDeep = baseIsEqualDeep$1;

var baseIsEqualDeep = _baseIsEqualDeep,
    isObjectLike = isObjectLike_1;

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual$2(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$2, stack);
}

var _baseIsEqual = baseIsEqual$2;

var Stack = _Stack,
    baseIsEqual$1 = _baseIsEqual;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch$1(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

var _baseIsMatch = baseIsMatch$1;

var isObject$1 = isObject_1;

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable$2(value) {
  return value === value && !isObject$1(value);
}

var _isStrictComparable = isStrictComparable$2;

var isStrictComparable$1 = _isStrictComparable,
    keys$1 = keys_1;

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData$1(object) {
  var result = keys$1(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable$1(value)];
  }
  return result;
}

var _getMatchData = getMatchData$1;

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

function matchesStrictComparable$2(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

var _matchesStrictComparable = matchesStrictComparable$2;

var baseIsMatch = _baseIsMatch,
    getMatchData = _getMatchData,
    matchesStrictComparable$1 = _matchesStrictComparable;

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches$1(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

var _baseMatches = baseMatches$1;

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

function baseHasIn$1(object, key) {
  return object != null && key in Object(object);
}

var _baseHasIn = baseHasIn$1;

var castPath$2 = _castPath,
    isArguments$1 = isArguments_1,
    isArray$4 = isArray_1,
    isIndex$1 = _isIndex,
    isLength = isLength_1,
    toKey$3 = _toKey;

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath$1(object, path, hasFunc) {
  path = castPath$2(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey$3(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex$1(key, length) &&
    (isArray$4(object) || isArguments$1(object));
}

var _hasPath = hasPath$1;

var baseHasIn = _baseHasIn,
    hasPath = _hasPath;

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn$2(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

var hasIn_1 = hasIn$2;

var baseIsEqual = _baseIsEqual,
    get = get_1,
    hasIn$1 = hasIn_1,
    isKey$1 = _isKey,
    isStrictComparable = _isStrictComparable,
    matchesStrictComparable = _matchesStrictComparable,
    toKey$2 = _toKey;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty$1(path, srcValue) {
  if (isKey$1(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey$2(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn$1(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

var _baseMatchesProperty = baseMatchesProperty$1;

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

function baseProperty$1(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

var _baseProperty = baseProperty$1;

var baseGet$2 = _baseGet;

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep$1(path) {
  return function(object) {
    return baseGet$2(object, path);
  };
}

var _basePropertyDeep = basePropertyDeep$1;

var baseProperty = _baseProperty,
    basePropertyDeep = _basePropertyDeep,
    isKey = _isKey,
    toKey$1 = _toKey;

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property$1(path) {
  return isKey(path) ? baseProperty(toKey$1(path)) : basePropertyDeep(path);
}

var property_1 = property$1;

var baseMatches = _baseMatches,
    baseMatchesProperty = _baseMatchesProperty,
    identity$1 = identity_1,
    isArray$3 = isArray_1,
    property = property_1;

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee$4(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity$1;
  }
  if (typeof value == 'object') {
    return isArray$3(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

var _baseIteratee = baseIteratee$4;

var assignValue = _assignValue,
    castPath$1 = _castPath,
    isIndex = _isIndex,
    isObject = isObject_1,
    toKey = _toKey;

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet$1(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath$1(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

var _baseSet = baseSet$1;

var baseGet$1 = _baseGet,
    baseSet = _baseSet,
    castPath = _castPath;

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy$2(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet$1(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

var _basePickBy = basePickBy$2;

var arrayMap$4 = _arrayMap,
    baseIteratee$3 = _baseIteratee,
    basePickBy$1 = _basePickBy,
    getAllKeysIn = _getAllKeysIn;

/**
 * Creates an object composed of the `object` properties `predicate` returns
 * truthy for. The predicate is invoked with two arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pickBy(object, _.isNumber);
 * // => { 'a': 1, 'c': 3 }
 */
function pickBy(object, predicate) {
  if (object == null) {
    return {};
  }
  var props = arrayMap$4(getAllKeysIn(object), function(prop) {
    return [prop];
  });
  predicate = baseIteratee$3(predicate);
  return basePickBy$1(object, props, function(value, path) {
    return predicate(value, path[0]);
  });
}

var pickBy_1 = pickBy;

function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$h(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf__default["default"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default["default"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default["default"](this, result); }; }

function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var FilterState = /*#__PURE__*/function (_React$Component) {
  _inherits__default["default"](FilterState, _React$Component);

  var _super = _createSuper$4(FilterState);

  function FilterState() {
    var _this;

    _classCallCheck__default["default"](this, FilterState);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "setFilter", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(filter) {
        return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!isEqual__default["default"](filter, _this.props.filter)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                if (_typeof__default["default"](filter) === 'object') {
                  filter = _this.cleanUpFilter(cloneDeep_1(filter));
                  Object.keys(filter).forEach(function (key) {
                    if (typeof filter[key] === 'undefined') delete filter[key];
                  });
                  if (isEmpty_1(filter.must)) delete filter.must;
                  if (isEmpty_1(filter.must_not)) delete filter.must_not;
                  if (Object.keys(filter).length === 0) filter = undefined;
                }

                _this.props.onChange(filter);

                return _context.abrupt("return", filter);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "setField", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(field, value) {
        var must,
            filter,
            type,
            _args2 = arguments;
        return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                must = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : true;
                filter = _this.props.filter ? cloneDeep_1(_this.props.filter) : {};
                type = must ? 'must' : 'must_not';

                _this.setFilter(_objectSpread$h(_objectSpread$h({}, filter), {}, _defineProperty__default["default"]({}, type, _objectSpread$h(_objectSpread$h({}, filter[type]), {}, _defineProperty__default["default"]({}, field, value)))));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "setFullField", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(field, mustValue, mustNotValue) {
        var filter, result;
        return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                filter = _this.props.filter ? cloneDeep_1(_this.props.filter) : {};
                _context3.next = 3;
                return _this.setFilter(_objectSpread$h(_objectSpread$h({}, filter), {}, {
                  must: _objectSpread$h(_objectSpread$h({}, filter.must), {}, _defineProperty__default["default"]({}, field, mustValue)),
                  must_not: _objectSpread$h(_objectSpread$h({}, filter.must_not), {}, _defineProperty__default["default"]({}, field, mustNotValue))
                }));

              case 3:
                result = _context3.sent;
                return _context3.abrupt("return", result);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x4, _x5, _x6) {
        return _ref3.apply(this, arguments);
      };
    }());

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "negateField", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4(field, isNegated) {
        var _objectSpread8;

        var filter, must, mustNot, value, typeToSet, typeToRemove;
        return _regeneratorRuntime__default["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                filter = _this.props.filter ? cloneDeep_1(_this.props.filter) : {};
                must = get_1(filter, "must.".concat(field), []);
                mustNot = get_1(filter, "must_not.".concat(field), []);
                value = [].concat(_toConsumableArray__default["default"](must), _toConsumableArray__default["default"](mustNot));
                typeToSet = isNegated ? 'must_not' : 'must';
                typeToRemove = !isNegated ? 'must_not' : 'must';

                _this.setFilter(_objectSpread$h(_objectSpread$h({}, filter), {}, (_objectSpread8 = {}, _defineProperty__default["default"](_objectSpread8, typeToSet, _objectSpread$h(_objectSpread$h({}, filter[typeToSet]), {}, _defineProperty__default["default"]({}, field, value))), _defineProperty__default["default"](_objectSpread8, typeToRemove, _objectSpread$h(_objectSpread$h({}, filter[typeToRemove]), {}, _defineProperty__default["default"]({}, field, []))), _objectSpread8)));

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x7, _x8) {
        return _ref4.apply(this, arguments);
      };
    }());

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "add", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee5(field, value) {
        var must,
            type,
            values,
            _args5 = arguments;
        return _regeneratorRuntime__default["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                must = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : true;
                type = must ? 'must' : 'must_not';
                values = get_1(_this.props.filter, "".concat(type, ".").concat(field), []);
                values = values.concat(value);
                values = uniqWith_1(values, isEqual__default["default"]);

                _this.setField(field, values, must);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x9, _x10) {
        return _ref5.apply(this, arguments);
      };
    }());

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "remove", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee6(field, value) {
        var must,
            type,
            values,
            _args6 = arguments;
        return _regeneratorRuntime__default["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                must = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : true;
                type = must ? 'must' : 'must_not';
                values = get_1(_this.props.filter, "".concat(type, ".").concat(field), []);
                values = values.filter(function (e) {
                  return !isEqual__default["default"](e, value);
                });

                _this.setField(field, values, must);

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x11, _x12) {
        return _ref6.apply(this, arguments);
      };
    }());

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "toggle", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee7(field, value) {
        var must,
            type,
            values,
            _args7 = arguments;
        return _regeneratorRuntime__default["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                must = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : true;
                type = must ? 'must' : 'must_not';
                values = get_1(_this.props.filter, "".concat(type, ".").concat(field), []);

                if (values.some(function (e) {
                  return isEqual__default["default"](e, value);
                })) {
                  _this.remove(field, value, must);
                } else {
                  _this.add(field, value, must);
                }

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x13, _x14) {
        return _ref7.apply(this, arguments);
      };
    }());

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "cleanUpFilter", function (filter) {
      var must = pickBy_1(get_1(filter, 'must', {}), function (x) {
        return !isEmpty_1(x);
      });
      var must_not = pickBy_1(get_1(filter, 'must_not', {}), function (x) {
        return !isEmpty_1(x);
      });
      return {
        must: must,
        must_not: must_not
      };
    });

    return _this;
  }

  _createClass__default["default"](FilterState, [{
    key: "render",
    value: function render() {
      var contextValue = {
        setField: this.setField,
        // updates a single field
        setFullField: this.setFullField,
        // updates a single field both must and must_not. Ugly hack as I couldn't get it to work begint to calls. The problem is that the filter isn't updated between the two calls in the event loop and hence the first update is ignored
        setFilter: this.setFilter,
        // updates the filter as a whole
        add: this.add,
        remove: this.remove,
        toggle: this.toggle,
        negateField: this.negateField,
        filter: this.props.filter,
        filterHash: hash__default["default"](this.props.filter || {})
      };
      return react.jsx(FilterContext.Provider, {
        value: contextValue
      }, this.props.children);
    }
  }]);

  return FilterState;
}(React__default["default"].Component); // export default FilterState;


var UncontrollableFilterState = uncontrollable.uncontrollable(FilterState, {
  filter: 'onChange'
});

var withContext = function withContext() {
  var injectedProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (context) {};
  return function (WrappedComponent) {
    var Wrapper = function Wrapper(props) {
      return react.jsx(FilterContext.Consumer, null, function (context) {
        return react.jsx(WrappedComponent, _extends__default["default"]({}, injectedProps(context), props));
      });
    };

    return Wrapper;
  };
};

var cssNavBar = function cssNavBar(_ref4) {
  var theme = _ref4.theme;
      _ref4.isActive;
  return /*#__PURE__*/react.css("background:", theme.paperBackground, ";border:1px solid ", theme.paperBorderColor, ";flex:0 0 auto;margin:10px;border-radius:", theme.borderRadius, "px;" + ("" ), "" );
};

var _ref3$8 = {
  name: "unv3er",
  styles: "flex:1 1 auto;margin:10px;margin-top:0;display:flex;flex-direction:column"
} ;

var cssViewArea = function cssViewArea(_ref5) {
  _ref5.theme;
  return _ref3$8;
};

var _ref2$c = {
  name: "sidtwu",
  styles: "display:flex;flex-direction:column;height:100%;overflow:auto"
} ;

var cssLayout = function cssLayout(_ref6) {
  _ref6.theme;
  return _ref2$c;
};
var cssFilter = function cssFilter(_ref8) {
  var theme = _ref8.theme;
  return /*#__PURE__*/react.css("padding:10px;border-bottom:1px solid ", theme.paperBorderColor, ";" + ("" ), "" );
};

var SearchContext = /*#__PURE__*/React__default["default"].createContext();

/**
 * A query is expected to have format: {filterNameA: [1], filterNameB: ['a', 'b']}
 * A query can composed by adding one filter ad a time. the order of filters should not matter.
 * @param {*} filter 
 */
function filter2v1(filter, filterConfig) {
  filter = filter || {}; // if (filterConfig.preFilterTransform) {
  //   filter = filterConfig.preFilterTransform(filter);
  // }

  var _filter = filter,
      must = _filter.must,
      must_not = _filter.must_not;
  var composedFilter = {};
  var errors = [];
  if (must) Object.entries(must).filter(function (_ref) {
    var _ref2 = _slicedToArray__default["default"](_ref, 2);
        _ref2[0];
        var values = _ref2[1];

    return values;
  }).forEach(function (_ref3) {
    var _ref4 = _slicedToArray__default["default"](_ref3, 2),
        filterName = _ref4[0],
        values = _ref4[1];

    var fieldFilter = getField({
      filterName: filterName,
      values: values,
      filterConfig: filterConfig,
      errors: errors
    });
    if (fieldFilter) composedFilter[fieldFilter.name] = fieldFilter.values;
  }); // Negation support removed as discussed in https://github.com/gbif/hosted-portals/issues/209
  // See commit history for version that supported negations

  if (must_not) {
    var negatedFields = Object.entries(must_not).filter(function (_ref5) {
      var _ref6 = _slicedToArray__default["default"](_ref5, 2);
          _ref6[0];
          var values = _ref6[1];

      return values;
    });

    if (negatedFields.length > 0) {
      errors.push({
        errorType: 'UNSUPPORTED_NEGATED_PREDICATE'
      });
    }
  }

  return {
    v1Filter: composedFilter,
    errors: errors.length > 0 ? errors : undefined
  };
}

function getField(_ref7) {
  var filterName = _ref7.filterName,
      values = _ref7.values,
      filterConfig = _ref7.filterConfig,
      errors = _ref7.errors;
  // if no values or an empty array is provided, then there it no predicates to create
  if ((values === null || values === void 0 ? void 0 : values.length) === 0) return; // get the configuration for this filter if any is provided

  var config = filterConfig.fields[filterName] || {}; // if a mapping function for the values is provided, then apply it

  var mappedValues = typeof (config === null || config === void 0 ? void 0 : config.transformValue) === 'function' ? values.map(config.transformValue) : values;
  var serializedValues = mappedValues.map(function (value) {
    return serializeValue({
      value: value,
      config: config,
      filterName: filterName,
      errors: errors
    });
  }).filter(function (v) {
    return typeof v !== 'undefined';
  }); // remove filters that couldn't be parsed

  if (config.singleValue) {
    serializedValues = serializedValues[0];
  }

  return {
    name: (config === null || config === void 0 ? void 0 : config.defaultKey) || filterName,
    values: serializedValues
  };
}

function serializeValue(_ref8) {
  var _config$v;

  var value = _ref8.value,
      config = _ref8.config,
      filterName = _ref8.filterName,
      errors = _ref8.errors;
  // if already string or value, then simply return as is
  var type = (value === null || value === void 0 ? void 0 : value.type) || (config === null || config === void 0 ? void 0 : config.defaultType) || 'equals';
  var v1Types = (config === null || config === void 0 ? void 0 : (_config$v = config.v1) === null || _config$v === void 0 ? void 0 : _config$v.supportedTypes) || ['equals']; // test that the type is compatible with API v1

  if (!v1Types.includes(type)) {
    errors.push({
      errorType: 'INVALID_PREDICATE_TYPE',
      filterName: filterName,
      type: type
    });
    return;
  }

  if (typeof value === 'string' || typeof value === 'number') {
    return value;
  } else if (_typeof__default["default"](value) === 'object' && value !== null) {
    //serlialize object if known type
    if (['equals', 'fuzzy', 'like', 'within'].includes(type)) {
      return value.value;
    } else if (type === 'range') {
      // if a range query, then transform to string format
      return "".concat(value.value.gte || value.value.gt || '*', ",").concat(value.value.lte || value.value.lgt || '*');
    } else {
      errors.push({
        errorType: 'UNKNOWN_PREDICATE_TYPE',
        filterName: filterName,
        type: type
      });
      return;
    }
  } else {
    errors.push({
      errorType: 'UNKNOWN_PREDICATE_VALUE_FORMAT',
      filterName: filterName,
      type: type
    });
    return;
  }
}

function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$g(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * A query is expected to have format: {filterNameA: [1], filterNameB: ['a', 'b']}
 * A query can composed by adding one filter ad a time. the order of filters should not matter.
 * @param {*} filter 
 */

function filter2predicate(filter, filterConfig) {
  filter = filter || {};

  if (filterConfig.preFilterTransform) {
    filter = filterConfig.preFilterTransform(filter);
  }

  var _filter = filter,
      must = _filter.must,
      must_not = _filter.must_not;
  var positive = getPredicates({
    filters: must,
    filterConfig: filterConfig
  });
  var negated = getPredicates({
    filters: must_not,
    filterConfig: filterConfig
  }).map(function (p) {
    return {
      type: 'not',
      predicate: p
    };
  }); // sort predicates to optimize cache hits. EDIT: this feels like halfhearted premature optimization
  // const predicates = sortBy(positive.concat(negated), ['type', 'key']);

  var predicates = positive.concat(negated);

  if (predicates.length === 1) {
    return predicates[0];
  } else {
    return {
      type: 'and',
      predicates: predicates
    };
  }
}

function getPredicates(_ref) {
  var filters = _ref.filters,
      filterConfig = _ref.filterConfig;
  if (!filters) return [];
  return Object.entries(filters).map(function (_ref2) {
    var _ref3 = _slicedToArray__default["default"](_ref2, 2),
        filterName = _ref3[0],
        values = _ref3[1];

    return getPredicate({
      filterName: filterName,
      values: values,
      filterConfig: filterConfig
    });
  }).filter(function (p) {
    return p;
  }); // remove filters that couldn't be transformed to a predicate
}

function getPredicate(_ref4) {
  var filterName = _ref4.filterName,
      _ref4$values = _ref4.values,
      values = _ref4$values === void 0 ? [] : _ref4$values,
      filterConfig = _ref4.filterConfig;
  // get the configuration for this filter if any is provided
  var config = filterConfig.fields[filterName] || {}; // if a custom serializer is specified then use that

  if (config.serializer) {
    return config.serializer({
      filterName: filterName,
      values: values,
      config: config
    });
  } // if no values or an empty array is provided, then there it no predicates to create


  if (Array.isArray(values) && (values === null || values === void 0 ? void 0 : values.length) === 0) return; // if a mapping function for the values is provided, then apply it

  var mappedValues = typeof (config === null || config === void 0 ? void 0 : config.transformValue) === 'function' ? values.map(config.transformValue) : values; // if the default type is equals or undefined then we might be able to create an 'in' predicate

  if (get_1(config, 'defaultType', 'equals') === 'equals') {
    // if all the provided values are string or numbers, then we can create an 'in' predicate
    if (mappedValues.every(function (x) {
      return typeof x === 'string' || typeof x === 'number';
    })) {
      return {
        type: 'in',
        //if no default key is provided, then fall back to the filterName as a key
        key: config.defaultKey || filterName,
        values: mappedValues
      };
    }
  } // the values are mixed or complex. Create an or if length > 1


  var predicates = mappedValues.map(function (value) {
    return getPredicateFromSingleValue({
      filterName: filterName,
      value: value,
      config: config
    });
  }).filter(function (p) {
    return p;
  }); // remove filters that couldn't be transformed to a predicate

  if (predicates.length === 1) {
    return predicates[0];
  } else {
    return {
      type: 'or',
      predicates: predicates
    };
  }
}

function getPredicateFromSingleValue(_ref5) {
  var filterName = _ref5.filterName,
      value = _ref5.value,
      config = _ref5.config;

  // the values are expected to be either a predicate object (optionally missing key and type)
  // or a string/number
  if (typeof value === 'string' || typeof value === 'number') {
    return {
      type: (config === null || config === void 0 ? void 0 : config.defaultType) || 'equals',
      //if no default key is provided, then fall back to the filterName as a key
      key: (config === null || config === void 0 ? void 0 : config.defaultKey) || filterName,
      value: value
    };
  } else if (_typeof__default["default"](value) === 'object' && value !== null) {
    return _objectSpread$g({
      type: (config === null || config === void 0 ? void 0 : config.defaultType) || 'equals',
      key: (config === null || config === void 0 ? void 0 : config.defaultKey) || filterName
    }, value);
  } else {
    console.warn('Invalid filter provided. It will be ignored. Provided: ', value);
  }
}

/**
 * Will return a filter with the form: {filterNameA: [1], filterNameB: ['a', 'b']}
 * @param {JSON} query as when parsed from url. Should be of the form: {fieldA: [values], fieldB: value}
 * @param {*} filterConfig 
 */
function v12filter(query, filterConfig) {
  query = query || {};
  var must = {};
  var reverseMap = Object.keys(filterConfig.fields).reduce(function (prev, fieldName) {
    var _filterConfig$fields$;

    var from = ((_filterConfig$fields$ = filterConfig.fields[fieldName]) === null || _filterConfig$fields$ === void 0 ? void 0 : _filterConfig$fields$.defaultKey) || fieldName;
    var to = fieldName;
    prev[from] = to;
    return prev;
  }, {});
  Object.keys(query).forEach(function (field) {
    var _config$v;

    var value = query[field];
    if (typeof value === 'undefined') return;
    var name = reverseMap[field] || field;
    var arrayValue = Array.isArray(value) ? value : [value];
    var config = filterConfig.fields[name];
    var v1Types = (config === null || config === void 0 ? void 0 : (_config$v = config.v1) === null || _config$v === void 0 ? void 0 : _config$v.supportedTypes) || ['equals']; //if range type then transform values

    if (v1Types.includes('range')) {
      arrayValue = value.map(function (val) {
        var parts = val.split(',');

        if (parts.length === 1) {
          return {
            type: 'equals',
            value: parts[0]
          };
        } else {
          var range = {
            type: 'range',
            value: {}
          };
          var gte = parts[0];
          var lte = parts[1];

          if (gte !== '' && gte !== '*') {
            range.value.gte = gte;
          }

          if (lte !== '' && lte !== '*') {
            range.value.lte = lte;
          }

          return range;
        }
      });
    }

    must[name] = arrayValue;
  });
  return {
    must: must
  };
}

var _excluded$1j = ["theme"],
    _excluded2$4 = ["isTrackingData", "theme"],
    _excluded3$3 = ["theme"];

var _ref12 = {
  name: "h15532",
  styles: "border-radius:4px;border:1px solid #eee;background:white;overflow:hidden;box-shadow:0 2px 3px 3px rgb(0 0 0 / 2%);>div:last-of-type{flex:1 1 auto;padding:12px;}>div:first-of-type{flex:0 0 auto;img{display:block;}}h4{margin:0;}"
} ;

var agentSummary = function agentSummary(_ref13) {
  _extends__default["default"]({}, _ref13);

  return _ref12;
};

var _ref11 = {
  name: "pje21s",
  styles: "margin-top:4px;margin-bottom:4px"
} ;

var features$1 = function features(_ref14) {
  _extends__default["default"]({}, _ref14);

  return _ref11;
};

var _ref10$3 = {
  name: "1aj97u",
  styles: "font-size:13px;margin-top:12px;margin-bottom:12px"
} ;

var entitySummary = function entitySummary(_ref15) {
  _extends__default["default"]({}, _ref15);

  return _ref10$3;
};

var _ref9$2 = {
  name: "wy2uqj",
  styles: "margin:0 16px;.gbif-header-location{font-size:13px;display:flex;align-items:center;margin-top:8px;}"
} ;

var header$2 = function header(_ref16) {
  _extends__default["default"]({}, _ref16);

  return _ref9$2;
};
var globeOverlay = function globeOverlay(_ref17) {
  var theme = _ref17.theme;
      _objectWithoutProperties__default["default"](_ref17, _excluded$1j);

  return /*#__PURE__*/react.css("position:absolute;border:1px solid #88888811;width:100%;height:100%;top:0;border-radius:100%;background-image:radial-gradient(farthest-corner at 30% 35%, ", theme.darkTheme ? '#ffffff33' : '#ffffffaa', " 0%, #fff0 30%);" + ("" ), "" );
};

var _ref8$2 = {
  name: "iwjav3",
  styles: "position:relative;width:75px;height:75px"
} ;

var globe = function globe(_ref18) {
  _extends__default["default"]({}, _ref18);

  return _ref8$2;
};
var globeSvg = function globeSvg(_ref19) {
  var isTrackingData = _ref19.isTrackingData,
      theme = _ref19.theme;
      _objectWithoutProperties__default["default"](_ref19, _excluded2$4);

  return /*#__PURE__*/react.css("position:absolute;top:0;.land{fill:#88888844;}.graticule{stroke:#88888840;fill:transparent;stroke-width:0.3px;}.sphere{fill:#88888822;}.point{fill:", theme.color700, ";", isTrackingData ? "\n    fill: #ff3800;\n    stroke: #ff38006e;\n    animation: hideshow 1s ease infinite;\n    " : null, ";}@keyframes hideshow{0%{stroke-width:2px;}50%{stroke-width:10px;}100%{stroke-width:2px;}}" + ("" ), "" );
};
var sideBar$3 = function sideBar(_ref20) {
  var theme = _ref20.theme;
      _objectWithoutProperties__default["default"](_ref20, _excluded3$3);

  return /*#__PURE__*/react.css("background:", theme.paperBackground500, ";position:relative;max-width:100%;" + ("" ), "" );
};
var detailDrawerBar$1 = function detailDrawerBar(_ref21) {
  var theme = _ref21.theme;
  return /*#__PURE__*/react.css("border:1px solid ", theme.paperBorderColor, ";border-width:0 1px;color:", theme.darkTheme ? theme.color600 : theme.color900, ";" + ("" ), "" );
};

var _ref7$3 = {
  name: "jtrtuq",
  styles: "overflow:auto;flex:1 1 auto;>div{max-width:100%;}"
} ;

var detailDrawerContent$1 = function detailDrawerContent(_ref22) {
  _ref22.theme;
  return _ref7$3;
};

var _ref6$5 = {
  name: "14xvobw",
  styles: ">img{margin-right:24px;}>h3{display:inline-block;margin:0;font-size:1.2em;font-weight:700;}"
} ;

var headline$2 = function headline(_ref23) {
  _ref23.theme;
  return _ref6$5;
};
var controlFooter = function controlFooter(_ref24) {
  var theme = _ref24.theme;
  return /*#__PURE__*/react.css("bottom:0;left:0;padding:4px 8px;border-top:1px solid ", theme.paperBorderColor, ";bottom:0;right:0;font-size:12px;background:", theme.paperBackground500, ";" + ("" ), "" );
};

var _ref4$4 = {
  name: "1oocx5b",
  styles: "background:#88888811;border:1px solid #88888818;margin-top:12px;>img{display:block;margin:auto;}"
} ;

var imageContainer = function imageContainer(_ref26) {
  _ref26.theme;
  return _ref4$4;
};
var clusterCard = function clusterCard(_ref27) {
  var theme = _ref27.theme;
  return /*#__PURE__*/react.css("margin-bottom:24px;border:1px solid ", theme.paperBorderColor, ";box-shadow:0 2px 1px 1px #0000000a;" + ("" ), "" );
};
var properties = {
  name: "1p1ip2o",
  styles: "font-size:85%"
} ;

var _ref3$7 = {
  name: "1s1xgis",
  styles: "summary{background:#f5f5f5;padding-left:16px;padding-right:16px;border-width:1px 0;border:1px solid #eee;border-width:1px 0;}>div{margin:0 16px 32px 16px;}"
} ;

var group = function group() {
  return _ref3$7;
};

var _ref2$b = {
  name: "1kwyc3g",
  styles: "font-size:11px;padding:0 4px;border:1px solid #dedede;background:#f3f3f3;margin:0 4px 4px 0;display:inline-block"
} ;

var chip = function chip(_ref28) {
  _ref28.theme;
  return _ref2$b;
};
var clusterFooter = function clusterFooter(_ref29) {
  var theme = _ref29.theme;
  return /*#__PURE__*/react.css("font-size:13px;padding:8px 12px;border-top:1px solid ", theme.paperBorderColor, ";margin-bottom:-4px;" + ("" ), "" );
};

var _excluded$1i = ["lat", "lon", "svg", "className", "style"];
function Globe(_ref) {
  var _data$globe;

  var lat = _ref.lat,
      lon = _ref.lon,
      svg = _ref.svg;
      _ref.className;
      _ref.style;
      _objectWithoutProperties__default["default"](_ref, _excluded$1i);

  var _useQuery = useQuery(GLOBE, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var theme = React.useContext(ThemeContext);
  React.useEffect(function () {
    if (typeof lat !== 'undefined') {
      load({
        variables: {
          lat: lat,
          lon: lon
        }
      });
    }
  }, [lat, lon]);
  return react.jsx("div", {
    css: globe({
      theme: theme
    })
  }, !loading && data && react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    css: globeSvg({
      theme: theme
    }),
    dangerouslySetInnerHTML: {
      __html: data === null || data === void 0 ? void 0 : (_data$globe = data.globe) === null || _data$globe === void 0 ? void 0 : _data$globe.svg
    }
  }), react.jsx("div", {
    css: globeOverlay({
      theme: theme
    })
  }), react.jsx("div", {
    css: globeSvg({
      theme: theme
    }),
    dangerouslySetInnerHTML: {
      __html: svg
    }
  })));
}
var GLOBE = "\nquery globe($lat: Float!, $lon: Float!){\n  globe(cLat: $lat, cLon: $lon) {\n    svg\n  }\n}\n";

var _excluded$1h = ["data", "loading", "error", "className"];
function Header$2(_ref) {
  var _data$occurrence, _data$occurrence$vola, _data$occurrence2, _data$occurrence2$vol, _data$occurrence3, _data$occurrence4, _data$occurrence5, _data$occurrence5$gbi, _data$occurrence5$gbi2, _item$typeStatus, _item$issues;

  var data = _ref.data;
      _ref.loading;
      _ref.error;
      _ref.className;
      var props = _objectWithoutProperties__default["default"](_ref, _excluded$1h);

  var isBelow = useBelow(500);
  var theme = React.useContext(ThemeContext);
  var item = data === null || data === void 0 ? void 0 : data.occurrence;
  return react.jsx(Row, _extends__default["default"]({
    wrap: "no-wrap",
    css: header$2({
      theme: theme
    })
  }, props), !isBelow && (data === null || data === void 0 ? void 0 : (_data$occurrence = data.occurrence) === null || _data$occurrence === void 0 ? void 0 : (_data$occurrence$vola = _data$occurrence["volatile"]) === null || _data$occurrence$vola === void 0 ? void 0 : _data$occurrence$vola.globe) && react.jsx(Col, {
    grow: false,
    style: {
      marginRight: 18
    }
  }, react.jsx(Globe, data === null || data === void 0 ? void 0 : (_data$occurrence2 = data.occurrence) === null || _data$occurrence2 === void 0 ? void 0 : (_data$occurrence2$vol = _data$occurrence2["volatile"]) === null || _data$occurrence2$vol === void 0 ? void 0 : _data$occurrence2$vol.globe)), react.jsx(Col, {
    grow: true
  }, react.jsx("div", {
    css: headline$2({
      theme: theme
    })
  }, react.jsx(Eyebrow, {
    style: {
      fontSize: '80%'
    },
    prefix: react.jsx(reactIntl.FormattedMessage, {
      id: "occurrenceDetails.occurrence"
    }),
    suffix: data !== null && data !== void 0 && (_data$occurrence3 = data.occurrence) !== null && _data$occurrence3 !== void 0 && _data$occurrence3.eventDate ? react.jsx(reactIntl.FormattedDate, {
      value: data === null || data === void 0 ? void 0 : (_data$occurrence4 = data.occurrence) === null || _data$occurrence4 === void 0 ? void 0 : _data$occurrence4.eventDate,
      year: "numeric",
      month: "long",
      day: "2-digit"
    }) : react.jsx(reactIntl.FormattedMessage, {
      id: "phrases.unknownDate"
    })
  }), react.jsx("h3", {
    dangerouslySetInnerHTML: {
      __html: data === null || data === void 0 ? void 0 : (_data$occurrence5 = data.occurrence) === null || _data$occurrence5 === void 0 ? void 0 : (_data$occurrence5$gbi = _data$occurrence5.gbifClassification) === null || _data$occurrence5$gbi === void 0 ? void 0 : (_data$occurrence5$gbi2 = _data$occurrence5$gbi.usage) === null || _data$occurrence5$gbi2 === void 0 ? void 0 : _data$occurrence5$gbi2.formattedName
    }
  })), react.jsx("div", {
    css: entitySummary({
      theme: theme
    })
  }, react.jsx(IconFeatures, {
    css: features$1({
      theme: theme
    }),
    eventDate: item.eventDate,
    countryCode: item.countryCode,
    locality: item.locality
  }), react.jsx(IconFeatures, {
    css: features$1({
      theme: theme
    }),
    stillImageCount: item.stillImageCount,
    movingImageCount: item.movingImageCount,
    soundCount: item.soundCount,
    typeStatus: item === null || item === void 0 ? void 0 : (_item$typeStatus = item.typeStatus) === null || _item$typeStatus === void 0 ? void 0 : _item$typeStatus[0],
    basisOfRecord: item.basisOfRecord,
    isSequenced: item["volatile"].features.isSequenced,
    isTreament: item["volatile"].features.isTreament,
    isClustered: item["volatile"].features.isClustered,
    isSamplingEvent: item["volatile"].features.isSamplingEvent,
    issueCount: item === null || item === void 0 ? void 0 : (_item$issues = item.issues) === null || _item$issues === void 0 ? void 0 : _item$issues.length
  }))));
}

var SetCache$1 = _SetCache,
    arrayIncludes$1 = _arrayIncludes,
    arrayIncludesWith$1 = _arrayIncludesWith,
    arrayMap$3 = _arrayMap,
    baseUnary$2 = _baseUnary,
    cacheHas$1 = _cacheHas;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * The base implementation of methods like `_.intersection`, without support
 * for iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of shared values.
 */
function baseIntersection$1(arrays, iteratee, comparator) {
  var includes = comparator ? arrayIncludesWith$1 : arrayIncludes$1,
      length = arrays[0].length,
      othLength = arrays.length,
      othIndex = othLength,
      caches = Array(othLength),
      maxLength = Infinity,
      result = [];

  while (othIndex--) {
    var array = arrays[othIndex];
    if (othIndex && iteratee) {
      array = arrayMap$3(array, baseUnary$2(iteratee));
    }
    maxLength = nativeMin(array.length, maxLength);
    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
      ? new SetCache$1(othIndex && array)
      : undefined;
  }
  array = arrays[0];

  var index = -1,
      seen = caches[0];

  outer:
  while (++index < length && result.length < maxLength) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (!(seen
          ? cacheHas$1(seen, computed)
          : includes(result, computed, comparator)
        )) {
      othIndex = othLength;
      while (--othIndex) {
        var cache = caches[othIndex];
        if (!(cache
              ? cacheHas$1(cache, computed)
              : includes(arrays[othIndex], computed, comparator))
            ) {
          continue outer;
        }
      }
      if (seen) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

var _baseIntersection = baseIntersection$1;

var isArrayLikeObject$3 = isArrayLikeObject_1;

/**
 * Casts `value` to an empty array if it's not an array like object.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array|Object} Returns the cast array-like object.
 */
function castArrayLikeObject$1(value) {
  return isArrayLikeObject$3(value) ? value : [];
}

var _castArrayLikeObject = castArrayLikeObject$1;

var arrayMap$2 = _arrayMap,
    baseIntersection = _baseIntersection,
    baseRest$4 = _baseRest,
    castArrayLikeObject = _castArrayLikeObject;

/**
 * Creates an array of unique values that are included in all given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * _.intersection([2, 1], [2, 3]);
 * // => [2]
 */
var intersection = baseRest$4(function(arrays) {
  var mapped = arrayMap$2(arrays, castArrayLikeObject);
  return (mapped.length && mapped[0] === arrays[0])
    ? baseIntersection(mapped)
    : [];
});

var intersection_1 = intersection;

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf__default["default"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default["default"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default["default"](this, result); }; }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var labelMaker = (function (getData) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      isHtmlResponse = _ref.isHtmlResponse;

  return reactIntl.injectIntl( /*#__PURE__*/function (_Component) {
    _inherits__default["default"](Format, _Component);

    var _super = _createSuper$3(Format);

    function Format(props) {
      var _this;

      _classCallCheck__default["default"](this, Format);

      _this = _super.call(this, props);
      _this.getTitle = _this.getTitle.bind(_assertThisInitialized__default["default"](_this));
      _this.state = {};
      return _this;
    }

    _createClass__default["default"](Format, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._mounted = true;
        this.getTitle();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        // Cancel fetch callback?
        this._mounted = false;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.id !== this.props.id) {
          this.getTitle();
        }
      }
    }, {
      key: "getTitle",
      value: function getTitle() {
        var _this$props$intl,
            _this2 = this;

        // do not bother canceling the actual request, just abort updating if canceled
        if (this.cancelPending) this.cancelPending();
        var canceled = false;
        var dataResult = getData({
          id: this.props.id,
          locale: (_this$props$intl = this.props.intl) === null || _this$props$intl === void 0 ? void 0 : _this$props$intl.locale
        });

        this.cancelPending = function () {
          return canceled = true;
        }; // if it is a promise, then wait for it to return


        if (typeof (dataResult === null || dataResult === void 0 ? void 0 : dataResult.then) === 'function') {
          dataResult.then(function (result) {
            if (canceled) return;

            if (_this2._mounted) {
              _this2.setState({
                title: result.title,
                error: false
              });
            }
          })["catch"](function (err) {
            if (canceled) return;

            if (_this2._mounted) {
              console.log(err);

              _this2.setState({
                title: 'unknown',
                error: true
              });
            }
          });
        } else {
          // the function simply returned a value.
          this.setState({
            title: typeof dataResult.title === 'undefined' ? '' : dataResult.title
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var title = this.state.error ? react.jsx("span", {
          className: "discreet"
        }, "unknown") : this.state.title;

        if (typeof title === 'undefined') {
          return react.jsx("span", {
            style: {
              width: 100,
              display: 'inline-block',
              verticalAlign: 'top'
            }
          }, react.jsx(Skeleton, null));
        }

        if (isHtmlResponse) {
          return react.jsx("span", {
            dangerouslySetInnerHTML: {
              __html: title
            }
          });
        } else {
          return react.jsx("span", null, title);
        }
      }
    }]);

    return Format;
  }(React.Component));
});

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */

function isUndefined(value) {
  return value === undefined;
}

var isUndefined_1 = isUndefined;

function rangeOrEqualLabel(path) {
  return function (_ref) {
    var value = _ref.id;

    if ((value === null || value === void 0 ? void 0 : value.type) === 'range') {
      var _value$value, _value$value2, _value$value3, _value$value4;

      var translationKey;
      var from = (value === null || value === void 0 ? void 0 : (_value$value = value.value) === null || _value$value === void 0 ? void 0 : _value$value.gte) || (value === null || value === void 0 ? void 0 : (_value$value2 = value.value) === null || _value$value2 === void 0 ? void 0 : _value$value2.gt);
      var to = (value === null || value === void 0 ? void 0 : (_value$value3 = value.value) === null || _value$value3 === void 0 ? void 0 : _value$value3.lte) || (value === null || value === void 0 ? void 0 : (_value$value4 = value.value) === null || _value$value4 === void 0 ? void 0 : _value$value4.lt);

      if (isUndefined_1(from)) {
        translationKey = 'lt';
      } else if (isUndefined_1(to)) {
        translationKey = 'gt';
      } else {
        translationKey = 'between';
      }

      return react.jsx(reactIntl.FormattedMessage, {
        id: "".concat(path, ".").concat(translationKey),
        defaultMessage: 'Filter name',
        values: {
          from: from,
          to: to
        }
      });
    } else if ((value === null || value === void 0 ? void 0 : value.type) === 'equals') {
      return react.jsx(reactIntl.FormattedMessage, {
        id: "".concat(path, ".e"),
        defaultMessage: 'Filter name',
        values: {
          from: value.value
        }
      });
    } else {
      return react.jsx(reactIntl.FormattedMessage, {
        id: "invalidValue",
        defaultMessage: 'Invalid value'
      });
    }
  };
}

function config2labels(config, apiContext, localeContext) {
  return Object.keys(config).reduce(function (acc, cur) {
    acc[cur] = config2label(cur, config[cur], apiContext, localeContext);
    return acc;
  }, {});
}
function config2label(name) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var apiContext = arguments.length > 2 ? arguments[2] : undefined;
  var localeContext = arguments.length > 3 ? arguments[3] : undefined;

  switch (config.type) {
    case 'TRANSLATION':
      {
        return function (_ref) {
          var id = _ref.id;
          return react.jsx(reactIntl.FormattedMessage, {
            id: config.template(id),
            defaultMessage: prettifyEnum(id)
          });
        };
      }

    case 'TRANSFORM':
      {
        return function (_ref2) {
          var id = _ref2.id;
          var intl = reactIntl.useIntl();
          return react.jsx(React__default["default"].Fragment, null, config.transform({
            id: id,
            locale: intl.locale
          }));
        };
      }

    case 'GQL':
      {
        var fetchFunction = function fetchFunction(_ref3) {
          var id = _ref3.id;
          return apiContext.get(apiContext.gql.endpoint, {
            params: {
              query: config.query,
              variables: {
                id: id
              }
            }
          }).promise.then(function (res) {
            return res.data;
          }).then(config.transform || function (x) {
            return x;
          });
        };

        var Label = labelMaker(fetchFunction, {
          isHtmlResponse: config.isHtmlResponse
        });
        return Label;
      }

    case 'ENDPOINT':
      {
        var _fetchFunction = function _fetchFunction(_ref4) {
          var id = _ref4.id;
              _ref4.locale;
          return apiContext.get(config.template({
            id: id,
            api: apiContext
          })).promise.then(function (res) {
            return res.data;
          }).then(function (result) {
            return config.transform ? config.transform(result, {
              localeContext: localeContext
            }) : result;
          });
        };

        var _Label = labelMaker(_fetchFunction);

        return _Label;
      }

    case 'CUSTOM_ENDPOINT':
      {
        var _Label2 = labelMaker(config.get);

        return _Label2;
      }

    case 'NUMBER_RANGE':
      {
        return rangeOrEqualLabel(config.path);
      }

    case 'CUSTOM':
      {
        return config.component;
      }

    default:
      return function (_ref5) {
        var id = _ref5.id;
        return _typeof__default["default"](id) === 'object' ? id.value : id;
      };
  }
}
function prettifyEnum(text) {
  return typeof text === 'string' ? text.charAt(0) + text.slice(1).toLowerCase().replace(/_/g, ' ') : 'Unknown';
}

var _excluded$1g = ["getEnum"],
    _excluded3$2 = ["label"],
    _excluded4$1 = ["term", "label", "showDetails", "hideIssues", "hideRemarks"];
var T$f = Properties.Term,
    V$f = Properties.Value;
function HtmlField(props) {
  if (!props.term) return null;
  var htmlValue = props.term.htmlValue;
  var htmlValues = Array.isArray(htmlValue) ? htmlValue : [htmlValue];
  return react.jsx(Field, props, htmlValues.map(function (htmlContent, i) {
    return react.jsx("div", {
      key: i,
      dangerouslySetInnerHTML: {
        __html: htmlContent
      }
    });
  }));
}
function PlainTextField(props) {
  if (!props.term) return null;
  var value = props.term.value;
  var values = Array.isArray(value) ? value : [value];
  return react.jsx(Field, props, values.join(' ● '));
}
function CustomValueField(props) {
  if (!props.term) return null;
  return react.jsx(Field, props);
}
function EnumField(_ref) {
  var getEnum = _ref.getEnum,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1g);

  if (!props.term) return null;
  var value = props.term.value;
  var values = Array.isArray(value) ? value : [value];
  return react.jsx(Field, props, values.map(function (enumValue, i) {
    return react.jsx(React__default["default"].Fragment, null, i > 0 && ' ● ', react.jsx(reactIntl.FormattedMessage, {
      key: i,
      id: getEnum(enumValue),
      defaultMessage: enumValue
    }));
  }));
}
function BasicField(_ref3) {
  var label = _ref3.label,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded3$2);

  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$f, null, react.jsx(reactIntl.FormattedMessage, {
    id: label,
    defaultMessage: label
  })), react.jsx(V$f, props));
}
function Field(_ref4) {
  var term = _ref4.term,
      label = _ref4.label,
      showDetails = _ref4.showDetails,
      hideIssues = _ref4.hideIssues,
      hideRemarks = _ref4.hideRemarks,
      props = _objectWithoutProperties__default["default"](_ref4, _excluded4$1);

  var simpleName = term.simpleName,
      verbatim = term.verbatim,
      value = term.value;
  if (!value && (!verbatim || !showDetails)) return null;
  var fieldName = label || "occurrenceFieldNames.".concat(simpleName);
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$f, null, react.jsx(reactIntl.FormattedMessage, {
    id: fieldName,
    defaultMessage: _.startCase(simpleName)
  })), react.jsx(V$f, {
    style: {
      position: 'relative'
    }
  }, react.jsx("div", _extends__default["default"]({
    style: {
      display: 'inline-block',
      paddingRight: 8
    }
  }, props)), react.jsx(Chips, _extends__default["default"]({}, term, {
    hideRemarks: hideRemarks,
    hideIssues: hideIssues
  })), react.jsx(Provenance, {
    term: term,
    showDetails: showDetails,
    hideRemarks: hideRemarks
  })));
}

function Provenance(_ref5) {
  var term = _ref5.term,
      showDetails = _ref5.showDetails;
  // should show if inferred or different from original value. Or if user has asked to see everything.
  if (!term.verbatim) return null;
  if (!showDetails && term.remarks !== 'INFERRED' && term.remarks !== 'ALTERED') return null;
  return react.jsx("div", {
    title: "Verbatim"
  }, react.jsx("span", {
    style: {
      opacity: .6,
      whiteSpace: 'pre-wrap'
    }
  }, term.verbatim), " ", react.jsx(Tags, null, react.jsx(Tag, {
    type: "light"
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.info.original"
  })), term.value === null && react.jsx(Tag, {
    type: "light"
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.info.excluded"
  }))));
}

function Chips(_ref6) {
  var _ref6$issues = _ref6.issues,
      issues = _ref6$issues === void 0 ? [] : _ref6$issues,
      remarks = _ref6.remarks,
      hideRemarks = _ref6.hideRemarks,
      hideIssues = _ref6.hideIssues;
  var isInferred = remarks === 'INFERRED';
  var isAltered = remarks === 'ALTERED';
  var hasRemarks = !hideRemarks && (isInferred || isAltered);
  var hasIssues = !hideIssues && (issues === null || issues === void 0 ? void 0 : issues.length) > 0;
  if (!hasIssues && !hasRemarks) return null;
  return react.jsx(Tags, null, hasIssues && issues.map(function (i) {
    return react.jsx(Tag, {
      type: i.severity.toLowerCase(),
      key: i.id
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "enums.occurrenceIssue.".concat(i.id),
      defaultMessage: prettifyEnum(i.id)
    }));
  }), !hideRemarks && react.jsx(React__default["default"].Fragment, null, isInferred && react.jsx(Tag, {
    type: "INFO"
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.info.inferred",
    defaultMessage: "Inferred"
  })), isAltered && react.jsx(Tag, {
    type: "INFO"
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.info.altered",
    defaultMessage: "Altered"
  }))));
}

var _excluded$1f = ["as", "includeTerminal", "ranks"];
function TaxonClassification(_ref) {
  _ref.as;
      var _ref$includeTerminal = _ref.includeTerminal,
      includeTerminal = _ref$includeTerminal === void 0 ? false : _ref$includeTerminal,
      ranks = _ref.ranks,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$1f);

  // const theme = useContext(ThemeContext);
  return react.jsx(Classification, props, ranks.map(function (rank, i, _ref2) {
    var length = _ref2.length;
    if (!includeTerminal && length - 1 === i) return null;
    return react.jsx("span", {
      key: rank.rank
    }, rank.name);
  }));
}
Classification.propTypes = {
  as: propTypes.exports.element
};

var _excluded$1e = ["agent"];
Properties.Term;
    Properties.Value;
function AgentSummary(_ref) {
  var _person$image, _person$image2, _person$name, _person$birthDate, _person$birthDate2, _person$deathDate, _person$deathDate2;

  var agent = _ref.agent;
      _objectWithoutProperties__default["default"](_ref, _excluded$1e);

  var theme = React.useContext(ThemeContext);
  var person = agent.person;
  return react.jsx(Row, {
    css: agentSummary({
      theme: theme
    }),
    wrap: "nowrap"
  }, react.jsx("div", null, (person === null || person === void 0 ? void 0 : (_person$image = person.image) === null || _person$image === void 0 ? void 0 : _person$image.value) && react.jsx(Image$1, {
    src: person === null || person === void 0 ? void 0 : (_person$image2 = person.image) === null || _person$image2 === void 0 ? void 0 : _person$image2.value,
    h: 80,
    style: {
      maxWidth: 80
    }
  })), react.jsx("div", null, react.jsx("h4", null, person === null || person === void 0 ? void 0 : (_person$name = person.name) === null || _person$name === void 0 ? void 0 : _person$name.value), (person === null || person === void 0 ? void 0 : (_person$birthDate = person.birthDate) === null || _person$birthDate === void 0 ? void 0 : _person$birthDate.value) && react.jsx("div", null, react.jsx(reactIntl.FormattedDate, {
    value: person === null || person === void 0 ? void 0 : (_person$birthDate2 = person.birthDate) === null || _person$birthDate2 === void 0 ? void 0 : _person$birthDate2.value,
    year: "numeric",
    month: "long",
    day: "2-digit"
  }), (person === null || person === void 0 ? void 0 : (_person$deathDate = person.deathDate) === null || _person$deathDate === void 0 ? void 0 : _person$deathDate.value) && react.jsx("span", null, " - ", react.jsx(reactIntl.FormattedDate, {
    value: person === null || person === void 0 ? void 0 : (_person$deathDate2 = person.deathDate) === null || _person$deathDate2 === void 0 ? void 0 : _person$deathDate2.value,
    year: "numeric",
    month: "long",
    day: "2-digit"
  }))), react.jsx("a", {
    href: agent.value
  }, agent.value)));
}

var _excluded$1d = ["label"];
var T$e = Properties.Term,
    V$e = Properties.Value;
function Groups(_ref) {
  var occurrence = _ref.occurrence,
      showAll = _ref.showAll,
      setActiveImage = _ref.setActiveImage;
  var terms = occurrence.terms;
  var termMap = terms.reduce(function (map, term) {
    map[term.simpleName] = term;
    return map;
  }, {});
  return react.jsx(React__default["default"].Fragment, null, react.jsx(Summary, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(Record, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(Taxon, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(Location, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(Occurrence, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(Event, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(Organism, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(MaterialSample, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(GeologicalContext, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(Identification, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(Other, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(Citation$2, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }));
}
function Group(_ref2) {
  var label = _ref2.label,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded$1d);

  return react.jsx(Accordion, _extends__default["default"]({
    summary: react.jsx(reactIntl.FormattedMessage, {
      id: label
    }),
    defaultOpen: true,
    css: group()
  }, props));
}

function Summary(_ref3) {
  var _occurrence$gbifClass, _occurrence$gbifClass2, _occurrence$gadm;

  var showAll = _ref3.showAll,
      termMap = _ref3.termMap,
      occurrence = _ref3.occurrence,
      setActiveImage = _ref3.setActiveImage;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.summary"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(Images$1, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence,
    setActiveImage: setActiveImage
  }), react.jsx(ScientificName, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence
  }), react.jsx(AcceptedScientificName, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence
  }), ((_occurrence$gbifClass = occurrence.gbifClassification) === null || _occurrence$gbifClass === void 0 ? void 0 : (_occurrence$gbifClass2 = _occurrence$gbifClass.classification) === null || _occurrence$gbifClass2 === void 0 ? void 0 : _occurrence$gbifClass2.length) > 1 && react.jsx(BasicField, {
    label: "occurrenceFieldNames.taxonomicClassification"
  }, react.jsx(TaxonClassification, {
    ranks: occurrence.gbifClassification.classification
  })), (occurrence === null || occurrence === void 0 ? void 0 : (_occurrence$gadm = occurrence.gadm) === null || _occurrence$gadm === void 0 ? void 0 : _occurrence$gadm.level0) && react.jsx(BasicField, {
    label: "occurrenceFieldNames.gadmClassification"
  }, react.jsx(GadmClassification, {
    gadm: occurrence.gadm
  })), react.jsx(BasicField, {
    label: "occurrenceDetails.dataset"
  }, react.jsx(DatasetKeyLink, {
    id: occurrence.datasetKey
  }, occurrence.datasetTitle)), react.jsx(EnumField, {
    term: termMap.basisOfRecord,
    showDetails: showAll,
    getEnum: function getEnum(value) {
      return "enums.basisOfRecord.".concat(value);
    }
  }), react.jsx(AgentIds, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence
  })));
}

function Record(_ref4) {
  var showAll = _ref4.showAll,
      termMap = _ref4.termMap,
      occurrence = _ref4.occurrence;
      _ref4.setActiveImage;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.record"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(Institution$1, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence
  }), react.jsx(Collection$1, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence
  }), react.jsx(HtmlField, {
    term: termMap.datasetID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.datasetName,
    showDetails: showAll
  }), react.jsx(EnumField, {
    term: termMap.basisOfRecord,
    showDetails: showAll,
    getEnum: function getEnum(value) {
      return "enums.basisOfRecord.".concat(value);
    }
  }), react.jsx(PlainTextField, {
    term: termMap.informationWithheld,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.dataGeneralizations,
    showDetails: showAll
  }), react.jsx(DynamicProperties, {
    termMap: termMap
  })));
}

function Occurrence(_ref5) {
  var showAll = _ref5.showAll,
      termMap = _ref5.termMap;
      _ref5.occurrence;
      _ref5.setActiveImage;
  var hasContent = ['occurrenceID', 'catalogNumber', 'recordNumber', 'recordedBy', 'individualCount', 'organismQuantity', 'organismQuantityType', 'sex', 'lifeStage', 'reproductiveCondition', 'behavior', 'establishmentMeans', 'occurrenceStatus', 'preparations', 'disposition', 'associatedReferences', 'associatedSequences', 'associatedTaxa', 'otherCatalogNumbers', 'occurrenceRemarks', 'degreeOfEstablishment', 'pathway', 'associatedMedia'].find(function (x) {
    return termMap[x];
  });
  if (!hasContent) return null;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.occurrence"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(HtmlField, {
    term: termMap.occurrenceID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.catalogNumber,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.recordNumber,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.recordedBy,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.individualCount,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.organismQuantity,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.organismQuantityType,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.sex,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.lifeStage,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.reproductiveCondition,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.behavior,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.establishmentMeans,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.degreeOfEstablishment,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.pathway,
    showDetails: showAll
  }), react.jsx(EnumField, {
    term: termMap.occurrenceStatus,
    showDetails: showAll,
    getEnum: function getEnum(value) {
      return "enums.occurrenceStatus.".concat(value);
    }
  }), react.jsx(PlainTextField, {
    term: termMap.preparations,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.disposition,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.associatedReferences,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.associatedSequences,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.associatedTaxa,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.otherCatalogNumbers,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.occurrenceRemarks,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.associatedMedia,
    showDetails: showAll
  })));
}

function Organism(_ref6) {
  var showAll = _ref6.showAll,
      termMap = _ref6.termMap;
      _ref6.occurrence;
      _ref6.setActiveImage;
  var hasContent = ['organismID', 'organismScope', 'associatedOccurrences', 'associatedOrganisms', 'previousIdentifications', 'organismRemarks'].find(function (x) {
    return termMap[x];
  });
  if (!hasContent) return null;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.organism"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(PlainTextField, {
    term: termMap.organismID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.organismScope,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.associatedOccurrences,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.associatedOrganisms,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.previousIdentifications,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.organismRemarks,
    showDetails: showAll
  })));
}

function MaterialSample(_ref7) {
  var showAll = _ref7.showAll,
      termMap = _ref7.termMap;
      _ref7.occurrence;
      _ref7.setActiveImage;
  if (!termMap.materialSampleID) return null;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.materialSample"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(PlainTextField, {
    term: termMap.materialSampleID,
    showDetails: showAll
  })));
}

function Event(_ref8) {
  var showAll = _ref8.showAll,
      termMap = _ref8.termMap;
      _ref8.occurrence;
      _ref8.setActiveImage;
  var hasContent = ['eventID', 'parentEventID', 'fieldNumber', 'eventDate', 'eventTime', 'startDayOfYear', 'endDayOfYear', 'year', 'month', 'day', 'verbatimEventDate', 'habitat', 'samplingProtocol', 'samplingEffort', 'sampleSizeValue', 'sampleSizeUnit', 'fieldNotes', 'eventRemarks'].find(function (x) {
    return termMap[x];
  });
  if (!hasContent) return null;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.event"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(PlainTextField, {
    term: termMap.eventID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.parentEventID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.parentEventID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.eventDate,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.eventTime,
    showDetails: showAll
  }), showAll && react.jsx(PlainTextField, {
    term: termMap.startDayOfYear,
    showDetails: showAll
  }), showAll && react.jsx(PlainTextField, {
    term: termMap.endDayOfYear,
    showDetails: showAll
  }), showAll && react.jsx(PlainTextField, {
    term: termMap.year,
    showDetails: showAll
  }), showAll && react.jsx(PlainTextField, {
    term: termMap.month,
    showDetails: showAll
  }), showAll && react.jsx(PlainTextField, {
    term: termMap.day,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimEventDate,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.habitat,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.samplingProtocol,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.samplingEffort,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.sampleSizeValue,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.sampleSizeUnit,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.fieldNotes,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.eventRemarks,
    showDetails: showAll
  })));
}

function Location(_ref9) {
  var _occurrence$gadm2;

  var showAll = _ref9.showAll,
      termMap = _ref9.termMap,
      occurrence = _ref9.occurrence;
      _ref9.setActiveImage;
  var hasContent = ['locationID', 'higherGeographyID', 'higherGeography', 'continent', 'waterBody', 'islandGroup', 'island', 'countryCode', 'stateProvince', 'county', 'municipality', 'locality', 'verbatimLocality', 'verbatimElevation', 'verbatimDepth', 'minimumDistanceAboveSurfaceInMeters', 'maximumDistanceAboveSurfaceInMeters', 'locationAccordingTo', 'locationRemarks', 'decimalLatitude', 'decimalLongitude', 'coordinateUncertaintyInMeters', 'coordinatePrecision', 'pointRadiusSpatialFit', 'verbatimCoordinateSystem', 'verbatimSRS', 'verticalDatum', 'footprintWKT', 'footprintSRS', 'footprintSpatialFit', 'georeferencedBy', 'georeferencedDate', 'georeferenceProtocol', 'georeferenceSources', 'georeferenceVerificationStatus', 'georeferenceRemarks', 'country', 'minimumElevationInMeters', 'maximumElevationInMeters', 'elevation', 'elevationAccuracy', 'minimumDepthInMeters', 'maximumDepthInMeters', 'minimumDepthInMeters', 'maximumDepthInMeters', 'depth', 'depthAccuracy', 'geodeticDatum', 'verbatimCoordinates', 'verbatimLatitude', 'verbatimLongitude'].find(function (x) {
    return termMap[x];
  });
  if (!hasContent) return null;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.location"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(PlainTextField, {
    term: termMap.locationID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.higherGeographyID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.higherGeography,
    showDetails: showAll
  }), react.jsx(EnumField, {
    term: termMap.continent,
    showDetails: showAll,
    getEnum: function getEnum(value) {
      return "enums.continent.".concat(value);
    }
  }), react.jsx(EnumField, {
    term: termMap.countryCode,
    label: "occurrenceFieldNames.country",
    showDetails: showAll,
    getEnum: function getEnum(value) {
      return "enums.countryCode.".concat(value);
    }
  }), react.jsx(PlainTextField, {
    term: termMap.waterBody,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.islandGroup,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.island,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.stateProvince,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.county,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.municipality,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.locality,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimLocality,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.minimumDistanceAboveSurfaceInMeters,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.maximumDistanceAboveSurfaceInMeters,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.locationAccordingTo,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.locationRemarks,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.decimalLatitude,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.decimalLongitude,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.coordinateUncertaintyInMeters,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.coordinatePrecision,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.pointRadiusSpatialFit,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.footprintWKT,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.footprintSRS,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verticalDatum,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.footprintSpatialFit,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimCoordinateSystem,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimSRS,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.georeferencedBy,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.georeferencedDate,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.georeferenceProtocol,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.georeferenceSources,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.georeferenceVerificationStatus,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.georeferenceRemarks,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.elevation,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.elevationAccuracy,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.minimumElevationInMeters,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.maximumElevationInMeters,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimElevation,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.depth,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.depthAccuracy,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.minimumDepthInMeters,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.maximumDepthInMeters,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimDepth,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.geodeticDatum,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimCoordinates,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimLatitude,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimLongitude,
    showDetails: showAll
  }), (occurrence === null || occurrence === void 0 ? void 0 : (_occurrence$gadm2 = occurrence.gadm) === null || _occurrence$gadm2 === void 0 ? void 0 : _occurrence$gadm2.level0) && react.jsx(BasicField, {
    label: "occurrenceFieldNames.gadmClassification"
  }, react.jsx(GadmClassification, {
    gadm: occurrence.gadm
  }))));
}

function GeologicalContext(_ref10) {
  var showAll = _ref10.showAll,
      termMap = _ref10.termMap;
      _ref10.occurrence;
      _ref10.setActiveImage;
  var hasContent = ['geologicalContextID', 'earliestEonOrLowestEonothem', 'latestEonOrHighestEonothem', 'earliestEraOrLowestErathem', 'latestEraOrHighestErathem', 'earliestPeriodOrLowestSystem', 'latestPeriodOrHighestSystem', 'earliestEpochOrLowestSeries', 'latestEpochOrHighestSeries', 'earliestAgeOrLowestStage', 'latestAgeOrHighestStage', 'lowestBiostratigraphicZone', 'highestBiostratigraphicZone', 'lithostratigraphicTerms', 'group', 'formation', 'member', 'bed'].find(function (x) {
    return termMap[x];
  });
  if (!hasContent) return null;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.geologicalContext"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(PlainTextField, {
    term: termMap.geologicalContextID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.earliestEonOrLowestEonothem,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.latestEonOrHighestEonothem,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.earliestEraOrLowestErathem,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.latestEraOrHighestErathem,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.earliestPeriodOrLowestSystem,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.latestPeriodOrHighestSystem,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.earliestEpochOrLowestSeries,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.latestEpochOrHighestSeries,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.earliestAgeOrLowestStage,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.latestAgeOrHighestStage,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.lowestBiostratigraphicZone,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.highestBiostratigraphicZone,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.lithostratigraphicTerms,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.group,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.formation,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.member,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.bed,
    showDetails: showAll
  })));
}

function Identification(_ref11) {
  var showAll = _ref11.showAll,
      termMap = _ref11.termMap,
      occurrence = _ref11.occurrence;
      _ref11.setActiveImage;
  var hasContent = ['identificationID', 'identificationQualifier', 'typeStatus', 'identifiedBy', 'identifiedByIDs', 'verbatimIdentification', 'dateIdentified', 'identificationReferences', 'identificationVerificationStatus', 'identificationRemarks'].find(function (x) {
    return termMap[x];
  });
  if (!hasContent) return null;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.identification"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(HtmlField, {
    term: termMap.identificationID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.identificationQualifier,
    showDetails: showAll
  }), react.jsx(EnumField, {
    term: termMap.typeStatus,
    showDetails: showAll,
    getEnum: function getEnum(value) {
      return "enums.typeStatus.".concat(value);
    }
  }), react.jsx(PlainTextField, {
    term: termMap.identifiedBy,
    showDetails: showAll
  }), react.jsx(IdentifiedById, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimIdentification,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.dateIdentified,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.identificationReferences,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.identificationVerificationStatus,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.identificationRemark,
    showDetails: showAll
  })));
}

function Taxon(_ref12) {
  var showAll = _ref12.showAll,
      termMap = _ref12.termMap,
      occurrence = _ref12.occurrence;
      _ref12.setActiveImage;
  var hasContent = ['taxonID', 'scientificNameID', 'acceptedNameUsageID', 'parentNameUsageID', 'originalNameUsageID', 'nameAccordingToID', 'namePublishedInID', 'taxonConceptID', 'scientificName', 'acceptedNameUsage', 'parentNameUsage', 'originalNameUsage', 'nameAccordingTo', 'namePublishedIn', 'namePublishedInYear', 'higherClassification', 'kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'subgenus', 'specificEpithet', 'infraspecificEpithet', 'taxonRank', 'verbatimTaxonRank', 'vernacularName', 'nomenclaturalCode', 'taxonomicStatus', 'nomenclaturalStatus', 'taxonRemarks', 'scientificNameAuthorship'].find(function (x) {
    return termMap[x];
  });
  if (!hasContent) return null;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.taxon"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(HtmlField, {
    term: termMap.taxonID,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.scientificNameID,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.acceptedNameUsageID,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.parentNameUsageID,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.originalNameUsageID,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.nameAccordingToID,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.namePublishedInID,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.taxonConceptID,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.scientificName,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.acceptedNameUsage,
    showDetails: showAll
  }), react.jsx(AcceptedScientificName, {
    showAll: showAll,
    termMap: termMap,
    occurrence: occurrence
  }), react.jsx(PlainTextField, {
    term: termMap.parentNameUsage,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.originalNameUsage,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.nameAccordingTo,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.namePublishedIn,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.namePublishedInYear,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.higherClassification,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.kingdom,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.phylum,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap["class"],
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.order,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.family,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.genus,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.subgenus,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.specificEpithet,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.infraspecificEpithet,
    showDetails: showAll
  }), react.jsx(EnumField, {
    term: termMap.taxonRank,
    showDetails: showAll,
    getEnum: function getEnum(value) {
      return "enums.taxonRank.".concat(value);
    }
  }), react.jsx(PlainTextField, {
    term: termMap.verbatimTaxonRank,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.vernacularName,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.nomenclaturalCode,
    showDetails: showAll
  }), react.jsx(EnumField, {
    term: termMap.taxonomicStatus,
    showDetails: showAll,
    getEnum: function getEnum(value) {
      return "enums.taxonomicStatus.".concat(value);
    }
  }), react.jsx(PlainTextField, {
    term: termMap.nomenclaturalStatus,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.taxonRemarks,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.scientificNameAuthorship,
    showDetails: showAll
  })));
}

function Other(_ref13) {
  var showAll = _ref13.showAll,
      termMap = _ref13.termMap;
      _ref13.occurrence;
      _ref13.setActiveImage;
  // const hasContent = [
  //   'abstract',
  //   'accessRights',
  //   'accrualMethod',
  //   'accrualPeriodicity',
  //   'accrualPolicy',
  //   'alternative',
  //   'audience',
  //   'available',
  //   'bibliographicCitation',
  //   'conformsTo',
  //   'contributor',
  //   'coverage',
  //   'created',
  //   'creator',
  //   'date',
  //   'dateAccepted',
  //   'dateCopyrighted',
  //   'dateSubmitted',
  //   'description',
  //   'educationLevel',
  //   'extent',
  //   'format',
  //   'hasFormat',
  //   'hasPart',
  //   'hasVersion',
  //   'identifier',
  //   'instructionalMethod',
  //   'isFormatOf',
  //   'isPartOf',
  //   'isReferencedBy',
  //   'isReplacedBy',
  //   'isRequiredBy',
  //   'isVersionOf',
  //   'issued',
  //   'language',
  //   'license',
  //   'mediator',
  //   'medium',
  //   'modified',
  //   'provenance',
  //   'publisher',
  //   'references',
  //   'relation',
  //   'replaces',
  //   'requires',
  //   'rights',
  //   'rightsHolder',
  //   'source',
  //   'spatial',
  //   'subject',
  //   'tableOfContents',
  //   'temporal',
  //   'title',
  //   'type',
  //   'valid',
  //   'gbifID'].find(x => termMap[x]);
  // if (!hasContent) return null;
  return react.jsx(Group, {
    label: "occurrenceDetails.groups.other"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(PlainTextField, {
    term: termMap["abstract"],
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.accessRights,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.accrualMethod,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.accrualPeriodicity,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.accrualPolicy,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.alternative,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.audience,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.available,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.bibliographicCitation,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.conformsTo,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.contributor,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.coverage,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.created,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.creator,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.date,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.dateAccepted,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.dateCopyrighted,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.dateSubmitted,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.description,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.educationLevel,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.extent,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.format,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.hasFormat,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.hasPart,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.hasVersion,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.identifier,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.instructionalMethod,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.isFormatOf,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.isPartOf,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.isReferencedBy,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.isReplacedBy,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.isRequiredBy,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.isVersionOf,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.issued,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.language,
    showDetails: showAll
  }), react.jsx(EnumField, {
    term: termMap.license,
    showDetails: showAll,
    getEnum: function getEnum(value) {
      return "enums.license.".concat(value);
    }
  }), react.jsx(PlainTextField, {
    term: termMap.mediator,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.medium,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.modified,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.provenance,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.publisher,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.references,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.relation,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.replaces,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.requires,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.rights,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.rightsHolder,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.source,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.spatial,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.subject,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.tableOfContents,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.temporal,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.title,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.type,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.valid,
    showDetails: showAll
  }), react.jsx(BasicField, {
    label: "occurrenceFieldNames.gbifID"
  }, termMap.gbifID.value)));
}

function Citation$2(_ref14) {
  var occurrence = _ref14.occurrence;
  return react.jsx(Group, {
    label: "phrases.citation"
  }, react.jsx(Properties, {
    css: properties,
    breakpoint: 800
  }, react.jsx(T$e, null, react.jsx(reactIntl.FormattedMessage, {
    id: "phrases.citeAs"
  })), react.jsx(V$e, null, occurrence.dataset.citation.text, " https://gbif.org/occurrence/", occurrence.key)));
} // function SampleSize({ termMap, occurrence }) {
//   if (!termMap?.sampleSizeValue?.value || !termMap?.sampleSizeUnit?.value) return null;
//   return <>
//     <T>
//       <FormattedMessage
//         id={`occurrenceDetails.sampleSize`}
//         defaultMessage={"Sample size"}
//       />
//     </T>
//     <V>
//       {termMap?.sampleSizeValue?.value} {termMap?.sampleSizeUnit?.value}
//     </V>
//   </>
// }


function DynamicProperties(_ref15) {
  var _termMap$dynamicPrope;

  var termMap = _ref15.termMap;
  var value = termMap === null || termMap === void 0 ? void 0 : (_termMap$dynamicPrope = termMap.dynamicProperties) === null || _termMap$dynamicPrope === void 0 ? void 0 : _termMap$dynamicPrope.value;
  if (!value) return null;
  var content;

  try {
    var jsonValue = JSON.parse(value); // restrict json to one level deep

    content = react.jsx(Properties, null, Object.keys(jsonValue).map(function (k) {
      return react.jsx(React__default["default"].Fragment, {
        key: k
      }, react.jsx(T$e, null, k), react.jsx(V$e, null, jsonValue[k]));
    }));
  } catch (err) {
    //ignore any errors
    content = value;
  }

  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$e, null, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceFieldNames.dynamicProperties",
    defaultMessage: "Dynamic properties"
  })), react.jsx(V$e, null, content));
}

function Images$1(_ref16) {
  var occurrence = _ref16.occurrence,
      setActiveImage = _ref16.setActiveImage;
  if (occurrence.stillImageCount < 1) return null;
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$e, null, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceFieldNames.images",
    defaultMessage: "Images"
  })), react.jsx("div", null, react.jsx(V$e, null, react.jsx(GalleryTiles, null, occurrence.stillImages.map(function (x, i) {
    return react.jsx(GalleryTile, {
      key: i,
      src: x.identifier,
      height: 120,
      onClick: function onClick() {
        return setActiveImage(x);
      }
    });
  })))));
}

function Institution$1(_ref17) {
  var termMap = _ref17.termMap,
      showAll = _ref17.showAll,
      occurrence = _ref17.occurrence;
  var code = termMap.institutionCode;
  var id = termMap.institutionID;
  var inst = occurrence.institution;
  if (!code && !id && !inst) return null; // const issues = code?.issues || id?.issues;

  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$e, null, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.institution",
    defaultMessage: "Institution"
  })), react.jsx("div", null, react.jsx(V$e, null, react.jsx(Properties, {
    horizontal: false
  }, react.jsx(InstitutionKey, {
    occurrence: occurrence
  }), react.jsx(PlainTextField, {
    term: termMap.institutionCode,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.institutionID,
    showDetails: showAll
  }), react.jsx(PlainTextField, {
    term: termMap.ownerInstitutionCode,
    showDetails: showAll
  })))));
}

function Collection$1(_ref18) {
  var termMap = _ref18.termMap,
      showAll = _ref18.showAll,
      occurrence = _ref18.occurrence;
  var code = termMap.collectionCode;
  var id = termMap.collectionID;
  var inst = occurrence.collection;
  if (!code && !id && !inst) return null;
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$e, null, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.collection",
    defaultMessage: "Collection"
  })), react.jsx("div", null, react.jsx(V$e, null, react.jsx(Properties, {
    horizontal: false
  }, react.jsx(CollectionKey, {
    occurrence: occurrence
  }), react.jsx(PlainTextField, {
    term: termMap.collectionCode,
    showDetails: showAll
  }), react.jsx(HtmlField, {
    term: termMap.collectionID,
    showDetails: showAll
  })))));
}

function InstitutionKey(_ref19) {
  var _occurrence$instituti, _occurrence$instituti2;

  var occurrence = _ref19.occurrence;
  if (!(occurrence !== null && occurrence !== void 0 && (_occurrence$instituti = occurrence.institution) !== null && _occurrence$instituti !== void 0 && _occurrence$instituti.key)) return null;
  return react.jsx(BasicField, {
    label: "occurrenceDetails.institutionGrSciColl"
  }, react.jsx(ResourceLink, {
    type: "institutionKey",
    id: occurrence === null || occurrence === void 0 ? void 0 : (_occurrence$instituti2 = occurrence.institution) === null || _occurrence$instituti2 === void 0 ? void 0 : _occurrence$instituti2.key
  }, occurrence.institution.name));
}

function CollectionKey(_ref20) {
  var _occurrence$collectio, _occurrence$collectio2;

  var occurrence = _ref20.occurrence;
  if (!(occurrence !== null && occurrence !== void 0 && (_occurrence$collectio = occurrence.collection) !== null && _occurrence$collectio !== void 0 && _occurrence$collectio.key)) return null;
  return react.jsx(BasicField, {
    label: "occurrenceDetails.collectionGrSciColl"
  }, react.jsx(ResourceLink, {
    type: "collectionKey",
    id: occurrence === null || occurrence === void 0 ? void 0 : (_occurrence$collectio2 = occurrence.collection) === null || _occurrence$collectio2 === void 0 ? void 0 : _occurrence$collectio2.key
  }, occurrence.collection.name));
}

function ScientificName(_ref21) {
  var termMap = _ref21.termMap,
      showAll = _ref21.showAll,
      occurrence = _ref21.occurrence;
  return react.jsx(CustomValueField, {
    term: termMap.scientificName,
    showDetails: showAll
  }, react.jsx("span", {
    dangerouslySetInnerHTML: {
      __html: occurrence.gbifClassification.usage.formattedName
    }
  }));
}

function AcceptedScientificName(_ref22) {
  var _occurrence$gbifClass3;

  var termMap = _ref22.termMap,
      showAll = _ref22.showAll,
      occurrence = _ref22.occurrence;
  if (!(occurrence !== null && occurrence !== void 0 && (_occurrence$gbifClass3 = occurrence.gbifClassification) !== null && _occurrence$gbifClass3 !== void 0 && _occurrence$gbifClass3.synonym)) return null;
  return react.jsx(CustomValueField, {
    term: termMap.acceptedScientificName,
    showDetails: showAll
  }, react.jsx("span", {
    dangerouslySetInnerHTML: {
      __html: occurrence.gbifClassification.acceptedUsage.formattedName
    }
  }));
}

function AgentIds(_ref23) {
  var termMap = _ref23.termMap,
      showAll = _ref23.showAll,
      occurrence = _ref23.occurrence;

  if (equal__default["default"](occurrence.recordedByIDs, occurrence.identifiedByIDs)) {
    return react.jsx(Agents, {
      label: "occurrenceDetails.recordedAndIdentifiedBy",
      value: occurrence.recordedByIDs
    });
  } else {
    return react.jsx(React__default["default"].Fragment, null, react.jsx(RecordedById, {
      showAll: showAll,
      termMap: termMap,
      occurrence: occurrence
    }), react.jsx(IdentifiedById, {
      showAll: showAll,
      termMap: termMap,
      occurrence: occurrence
    }));
  }
}

function RecordedById(_ref24) {
  _ref24.termMap;
      _ref24.showAll;
      var occurrence = _ref24.occurrence;
  return react.jsx(Agents, {
    label: "occurrenceFieldNames.recordedByID",
    value: occurrence.recordedByIDs
  });
}

function IdentifiedById(_ref25) {
  _ref25.termMap;
      _ref25.showAll;
      var occurrence = _ref25.occurrence;
  return react.jsx(Agents, {
    label: "occurrenceFieldNames.identifiedByID",
    value: occurrence.identifiedByIDs
  });
}

function Agents(_ref26) {
  var label = _ref26.label,
      value = _ref26.value;
  if (!(value !== null && value !== void 0 && value[0])) return null;
  return react.jsx(BasicField, {
    label: label
  }, react.jsx("ul", {
    style: {
      listStyle: 'none',
      padding: 0,
      margin: 0
    }
  }, value.map(function (x) {
    if (!x.person) {
      return react.jsx("li", {
        key: x.value
      }, x.value);
    }

    return react.jsx("li", {
      key: x.value,
      style: {
        marginBottom: 4
      }
    }, react.jsx(AgentSummary, {
      agent: x
    }));
  })));
}

var _excluded$1c = ["data", "activeImage", "setActiveImage", "className"];
var Term = Properties.Term,
    Value = Properties.Value;
function ImageDetails(_ref) {
  var _data$occurrence3, _data$occurrence4, _data$occurrence4$sti, _data$occurrence5, _data$occurrence5$sti;

  var data = _ref.data,
      activeImage = _ref.activeImage,
      setActiveImage = _ref.setActiveImage;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$1c);

  var theme = React.useContext(ThemeContext);
  React.useEffect(function () {
    var _data$occurrence, _data$occurrence2;

    if (data !== null && data !== void 0 && (_data$occurrence = data.occurrence) !== null && _data$occurrence !== void 0 && _data$occurrence.stillImages) setActiveImage(data === null || data === void 0 ? void 0 : (_data$occurrence2 = data.occurrence) === null || _data$occurrence2 === void 0 ? void 0 : _data$occurrence2.stillImages[0]);
  }, [data]);

  if (!(data !== null && data !== void 0 && (_data$occurrence3 = data.occurrence) !== null && _data$occurrence3 !== void 0 && _data$occurrence3.stillImages)) {
    return react.jsx("div", null, "no images to display");
  }

  return react.jsx("div", {
    style: {
      padding: '12px 0'
    }
  }, react.jsx(Header$2, {
    data: data
  }), activeImage && react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    css: imageContainer({
      theme: theme
    })
  }, react.jsx(Image$1, {
    src: activeImage.identifier,
    h: "450",
    style: {
      maxWidth: '100%',
      maxHeight: 450
    }
  })), react.jsx(Group, {
    label: "occurrenceDetails.about",
    defaultOpen: (data === null || data === void 0 ? void 0 : (_data$occurrence4 = data.occurrence) === null || _data$occurrence4 === void 0 ? void 0 : (_data$occurrence4$sti = _data$occurrence4.stillImages) === null || _data$occurrence4$sti === void 0 ? void 0 : _data$occurrence4$sti.length) === 1
  }, react.jsx(Properties, {
    css: properties
  }, ['description', 'type', 'format', 'identifier', 'created', 'creator', 'license', 'publisher', 'references', 'rightsholder'].filter(function (x) {
    return !!activeImage[x];
  }).map(function (x) {
    return react.jsx(React__default["default"].Fragment, {
      key: x
    }, react.jsx(Term, null, react.jsx(reactIntl.FormattedMessage, {
      id: "occurrenceFieldNames.".concat(x)
    })), react.jsx(Value, null, react.jsx(HyperText, {
      text: activeImage[x]
    })));
  })))), (data === null || data === void 0 ? void 0 : (_data$occurrence5 = data.occurrence) === null || _data$occurrence5 === void 0 ? void 0 : (_data$occurrence5$sti = _data$occurrence5.stillImages) === null || _data$occurrence5$sti === void 0 ? void 0 : _data$occurrence5$sti.length) > 1 && react.jsx(Group, {
    label: "occurrenceDetails.morePhotos",
    defaultOpen: true
  }, react.jsx(GalleryTiles, null, data.occurrence.stillImages.map(function (x, i) {
    return react.jsx(GalleryTile, {
      onSelect: function onSelect() {
        return setActiveImage(x);
      },
      key: i,
      src: x.identifier,
      height: 120
    }, x === activeImage ? react.jsx("span", {
      style: {
        background: 'black',
        color: 'white',
        padding: '5px 5px 2px 5px'
      }
    }, react.jsx(md.MdDone, null)) : null);
  }), react.jsx("div", null))));
}

var _excluded$1b = ["data", "isSpecimen", "loading", "fieldGroups", "setActiveImage", "error", "className"];
function Intro$1(_ref) {
  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data;
      _ref.isSpecimen;
      var loading = _ref.loading;
      _ref.fieldGroups;
      var setActiveImage = _ref.setActiveImage,
      error = _ref.error;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$1b);

  var theme = React.useContext(ThemeContext);

  var _useState = React.useState(false),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      showAll = _useState2[0],
      setShowAll = _useState2[1];

  var occurrence = data.occurrence;
  if (loading || !occurrence) return react.jsx("h2", null, "Loading"); //TODO replace with proper skeleton loader

  return react.jsx(Row, {
    direction: "column",
    wrap: "nowrap",
    style: {
      maxHeight: '100%',
      overflow: 'hidden'
    }
  }, react.jsx(Col, {
    style: {
      padding: '12px 0',
      paddingBottom: 50,
      overflow: 'auto'
    },
    grow: true
  }, react.jsx(Header$2, {
    data: data,
    error: error
  }), react.jsx(Groups, {
    occurrence: occurrence,
    showAll: showAll,
    setActiveImage: setActiveImage
  })), react.jsx(Col, {
    css: controlFooter({
      theme: theme
    }),
    grow: false
  }, react.jsx(Row, {
    justifyContent: "flex-end",
    halfGutter: 8
  }, react.jsx(Col, {
    grow: false
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "occurrenceDetails.showAllFields"
  }), " ", react.jsx(Switch, {
    checked: showAll,
    onChange: function onChange() {
      return setShowAll(!showAll);
    },
    direction: "top",
    tip: "Shortcut s"
  })))));
}
/*
{$ occurrence.dataset.citation.text $} {$ _meta.domain $}/occurrence/{$ occurrence.record.key $}
*/

function useUrlState(_ref) {
  var param = _ref.param,
      _ref$dataType = _ref.dataType,
      dataType = _ref$dataType === void 0 ? dynamicParam : _ref$dataType,
      _ref$replaceState = _ref.replaceState,
      replaceState = _ref$replaceState === void 0 ? false : _ref$replaceState,
      defaultValue = _ref.defaultValue,
      _ref$base64encode = _ref.base64encode,
      base64encode = _ref$base64encode === void 0 ? false : _ref$base64encode;
      _ref.stripEmptyKeys;
      var initialState = _ref.initialState;

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var history = reactRouterDom.useHistory();
  var location = reactRouterDom.useLocation();
  var action = replaceState ? 'replace' : 'push';
  var updateUrl = React.useCallback(function (newValue) {
    var currentState = queryString__default["default"].parse(location.search);
    var parsed = queryString__default["default"].parse(location.search);
    console.log(location.search); // basic check for equality. Do not update if there is nothing to update. This will not work for anything but strings

    if (equal__default["default"](newValue, currentState[param])) return;

    if (isObjectLike_1(newValue)) {
      if (isEmpty_1(newValue.must)) delete newValue.must;
      if (isEmpty_1(newValue.must_not)) delete newValue.must_not;
      if (isEmpty_1(newValue)) newValue = undefined;
    }

    if (newValue) {
      var stringifiedValue = Array.isArray(newValue) ? newValue.map(function (x) {
        return dataType.stringify(x);
      }) : dataType.stringify(newValue);
      if (base64encode) stringifiedValue = jsBase64.Base64.encode(stringifiedValue);
      parsed[param] = stringifiedValue;
    } else {
      delete parsed[param];
    }

    if (typeof defaultValue !== 'undefined' && newValue === defaultValue) {
      delete parsed[param];
    }

    if (equal__default["default"](parsed[param], currentState[param])) return;
    history[action](location.pathname + '?' + queryString__default["default"].stringify(parsed));
    console.log('dep changed in useCallback');
  }, [location, history]);
  React.useEffect(function () {
    var changeHandler = function changeHandler(_ref2) {
      var location = _ref2.location;
      var parsed = queryString__default["default"].parse(location === null || location === void 0 ? void 0 : location.search);
      var parsedValue = parsed[param];
      if (base64encode && parsedValue) parsedValue = jsBase64.Base64.decode(parsedValue);
      parsedValue = dataType.parse(parsedValue);
      var parsedNormalizedValue = Array.isArray(parsedValue) ? parsedValue.map(function (x) {
        return dataType.parse(x);
      }) : dataType.parse(parsedValue);

      if (typeof parsedNormalizedValue === 'undefined' && typeof defaultValue !== 'undefined') {
        parsedNormalizedValue = defaultValue;
      }

      setValue(parsedNormalizedValue);
    };

    changeHandler({
      location: location
    });
    var unlisten = history.listen(changeHandler);
    if (initialState) updateUrl(initialState);
    console.log('dep changed in useEffect');
    return function () {
      unlisten();
      var parsed = queryString__default["default"].parse(location.search);
      delete parsed[param]; // history.replace(location.pathname + '?' + queryString.stringify(parsed));
    };
  }, []);
  return [value, updateUrl];
}
var dynamicParam = {
  parse: guessType,
  stringify: function stringify(val) {
    return _typeof__default["default"](val) === 'object' ? JSON.stringify(val) : val;
  }
};

function guessType(value) {
  //try to guess
  try {
    var parsedValue = JSON.parse(value);
    return parsedValue;
  } catch (err) {
    return value;
  }
} // Usage
// import { useQueryParam, NumberParam, StringParam } from 'use-query-params';
// const [num, setNum] = useQueryParam('x', NumberParam);
// export const getParams = function (url, { alwaysAsArray, guessType, typeConfig = {} }) {
//   var params = {};
//   let query;
//   if (typeof document !== 'undefined') {
//     var parser = document.createElement('a');
//     parser.href = url;
//     query = parser.search.substring(1);
//   } else if (url.indexOf('?') > -1) {
//     query = url.substr(url.indexOf('?') + 1);
//   } else {
//     query = '';
//   }
//   var vars = query.split('&');
//   for (var i = 0; i < vars.length; i++) {
//     var pair = vars[i].split('=');
//     var key = pair[0];
//     if (typeof key === 'undefined' || key === '' || typeof pair[1] === 'undefined') continue;
//     var value = decodeURIComponent(pair[1]);
//     var type = typeConfig[key];
//     if (type) {
//       switch (type) {
//         case 'number':
//           value = Number(value);
//         default:
//           value = value;
//       }
//     } else if (guessType) {
//       //try to guess
//       value = convert(value);
//     }
//     if (typeof params[key] === 'undefined') {
//       params[key] = alwaysAsArray ? [value] : value;
//     } else if (Array.isArray(params[key])) {
//       params[key].push(value);
//     } else {
//       params[key] = [params[key], value];
//     }
//   }
//   return params;
// };
// function convert(value) {
//   //try to guess
//   try {
//     let parsedValue = JSON.parse(value);
//     return parsedValue;
//   } catch (err) {
//     return value;
//   }
// }
// console.log(JSON.stringify(getParams('/sdf?test=0&t&r=test=6,7&j=%7B%22a%22%3A5%7D', {guessType: true}), null, 2));

var _excluded$1a = ["data", "loading", "activeImage", "setActiveImage", "className"],
    _excluded2$3 = ["original", "reasons", "related"];
var T$d = Properties.Term,
    V$d = Properties.Value;
function Cluster(_ref) {
  var _cluster$occurrence, _cluster$occurrence$r;

  var data = _ref.data;
      _ref.loading;
      _ref.activeImage;
      _ref.setActiveImage;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$1a);

  var _useUrlState = useUrlState({
    param: 'entity'
  }),
      _useUrlState2 = _slicedToArray__default["default"](_useUrlState, 1),
      setActiveKey = _useUrlState2[0];

  React.useContext(ThemeContext);

  var _useQuery = useQuery(CLUSTER, {
    lazyLoad: true
  }),
      cluster = _useQuery.data,
      clusterLoading = _useQuery.loading,
      load = _useQuery.load;

  React.useEffect(function () {
    if (typeof data !== 'undefined') {
      load({
        variables: {
          key: data.occurrence.key
        }
      });
    }
  }, [data]);
  var related = cluster === null || cluster === void 0 ? void 0 : (_cluster$occurrence = cluster.occurrence) === null || _cluster$occurrence === void 0 ? void 0 : (_cluster$occurrence$r = _cluster$occurrence.related) === null || _cluster$occurrence$r === void 0 ? void 0 : _cluster$occurrence$r.relatedOccurrences;

  if (!data || clusterLoading || !related) {
    return react.jsx("div", null, "Loading");
  }

  return react.jsx("div", {
    style: {
      padding: '12px 16px'
    }
  }, react.jsx(Header$2, {
    data: data
  }), react.jsx("main", {
    style: {
      marginTop: 24
    }
  }, related.map(function (x) {
    if (x.occurrence) {
      return react.jsx(RelatedOccurrence, {
        key: x.occurrence.key,
        onClick: function onClick(e) {
          return setActiveKey(x.occurrence.key);
        },
        related: x.occurrence,
        reasons: x.reasons,
        original: data.occurrence
      });
    } else {
      return react.jsx("div", {
        style: {
          padding: 30,
          background: 'tomato',
          color: 'white',
          borderRadius: 4
        }
      }, "This record has since been removed from the dataset.", react.jsx("div", null, react.jsx(Properties, {
        style: {
          marginTop: 12
        },
        horizontal: true,
        dense: true
      }, react.jsx(T$d, {
        style: {
          color: 'white'
        }
      }, "Publisher"), react.jsx(V$d, null, x.stub.publishingOrgName), react.jsx(T$d, {
        style: {
          color: 'white'
        }
      }, "Dataset"), react.jsx(V$d, null, x.stub.datasetName), x.stub.catalogNumber && react.jsx(React__default["default"].Fragment, null, react.jsx(T$d, {
        style: {
          color: 'white'
        }
      }, "Catalog number"), react.jsx(V$d, null, x.stub.catalogNumber)), x.stub.occurrenceID && react.jsx(React__default["default"].Fragment, null, react.jsx(T$d, {
        style: {
          color: 'white'
        }
      }, "Occurrence ID"), react.jsx(V$d, null, x.stub.occurrenceID)))));
    }
  })));
}
function RelatedOccurrence(_ref2) {
  var _related$issues, _related$primaryImage, _related$primaryImage2;

  _ref2.original;
      var reasons = _ref2.reasons,
      related = _ref2.related,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded2$3);

  var theme = React.useContext(ThemeContext);
  return react.jsx("article", _extends__default["default"]({
    css: clusterCard({
      theme: theme
    })
  }, props), react.jsx(Row, {
    wrap: "nowrap",
    halfGutter: 6,
    style: {
      padding: 12
    }
  }, react.jsx(Col, null, react.jsx("h4", {
    style: {
      margin: 0
    },
    dangerouslySetInnerHTML: {
      __html: related.gbifClassification.usage.formattedName
    }
  }), react.jsx("div", {
    css: entitySummary({
      theme: theme
    })
  }, react.jsx(IconFeatures, {
    css: features$1({
      theme: theme
    }),
    eventDate: related.eventDate,
    countryCode: related.countryCode,
    locality: related.locality
  }), react.jsx(IconFeatures, {
    css: features$1({
      theme: theme
    }),
    stillImageCount: related.stillImageCount,
    movingImageCount: related.movingImageCount,
    soundCount: related.soundCount,
    typeStatus: related.typeStatus,
    basisOfRecord: related.basisOfRecord,
    isSequenced: related["volatile"].features.isSequenced,
    isTreament: related["volatile"].features.isTreament,
    isClustered: related["volatile"].features.isClustered,
    isSamplingEvent: related["volatile"].features.isSamplingEvent,
    issueCount: (_related$issues = related.issues) === null || _related$issues === void 0 ? void 0 : _related$issues.length
  })), react.jsx("div", null, react.jsx(Properties, {
    style: {
      fontSize: 12
    },
    horizontal: true,
    dense: true
  }, react.jsx(T$d, null, "Publisher"), react.jsx(V$d, null, related.publisherTitle), react.jsx(T$d, null, "Dataset"), react.jsx(V$d, null, related.datasetTitle)))), react.jsx(Col, {
    grow: false,
    shrink: false
  }, react.jsx("div", null, (related === null || related === void 0 ? void 0 : (_related$primaryImage = related.primaryImage) === null || _related$primaryImage === void 0 ? void 0 : _related$primaryImage.identifier) && react.jsx(Image$1, {
    style: {
      width: 150,
      height: 150,
      display: 'block'
    },
    src: related.primaryImage.identifier,
    w: 180,
    h: 180
  }), !(related !== null && related !== void 0 && (_related$primaryImage2 = related.primaryImage) !== null && _related$primaryImage2 !== void 0 && _related$primaryImage2.identifier) && related.coordinates && react.jsx("img", {
    style: {
      width: 150,
      height: 150,
      display: 'block'
    },
    src: "https://api.mapbox.com/styles/v1/mapbox/light-v9/static/pin-s-circle+285A98(".concat(related.coordinates.lon, ",").concat(related.coordinates.lat, ")/").concat(related.coordinates.lon, ",").concat(related.coordinates.lat, ",8,0/180x180@2x?access_token=pk.eyJ1IjoiaG9mZnQiLCJhIjoiY2llaGNtaGRiMDAxeHNxbThnNDV6MG95OSJ9.p6Dj5S7iN-Mmxic6Z03BEA")
  })))), react.jsx("div", {
    css: clusterFooter({
      theme: theme
    })
  }, react.jsx(Properties, {
    style: {
      fontSize: 12
    },
    horizontal: true,
    dense: true
  }, react.jsx(T$d, null, "Similarities"), react.jsx(V$d, null, reasons.map(function (reason) {
    return react.jsx("span", {
      css: chip({
        theme: theme
      }),
      key: reason
    }, prettifyEnum(reason));
  })))));
}
var CLUSTER = "\nquery occurrence($key: ID!){\n  occurrence(key: $key) {\n  \trelated {\n      relatedOccurrences {\n        reasons\n        stub {\n          gbifId\n          occurrenceID\n          catalogNumber\n          publishingOrgKey\n          publishingOrgName\n          datasetKey\n          datasetName\n        }\n        occurrence {\n          key\n          basisOfRecord\n          datasetTitle\n          publisherTitle\n          coordinates\n          typeStatus\n          soundCount\n          stillImageCount\n          movingImageCount\n          eventDate\n          primaryImage {\n            identifier\n          }\n          gbifClassification {\n            usage {\n              formattedName\n            }\n          }\n          volatile {\n            features {\n              isSequenced\n              isSamplingEvent\n              isTreament\n            }\n          }\n        }\n      }\n    }\n  }\n}\n";

var dataset$1 = "default";
var links = {
	dataset: dataset$1
};

function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$f(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var defaultGbifOrgLinks = {
  dataset: {
    href: function href(occurrence) {
      return "https://www.gbif.org/dataset/".concat(occurrence.datasetKey);
    },
    key: "datasetKey"
  },
  scientificName: {
    href: function href(occurrence) {
      var _occurrence$gbifClass, _occurrence$gbifClass2;

      return "https://www.gbif.org/species/".concat((_occurrence$gbifClass = occurrence.gbifClassification) === null || _occurrence$gbifClass === void 0 ? void 0 : (_occurrence$gbifClass2 = _occurrence$gbifClass.usage) === null || _occurrence$gbifClass2 === void 0 ? void 0 : _occurrence$gbifClass2.key);
    }
  },
  acceptedScientificName: {
    href: function href(occurrence) {
      var _occurrence$gbifClass3, _occurrence$gbifClass4;

      return "https://www.gbif.org/species/".concat((_occurrence$gbifClass3 = occurrence.gbifClassification) === null || _occurrence$gbifClass3 === void 0 ? void 0 : (_occurrence$gbifClass4 = _occurrence$gbifClass3.acceptedUsage) === null || _occurrence$gbifClass4 === void 0 ? void 0 : _occurrence$gbifClass4.key);
    }
  }
}; // A context to share links for the full app/component

var linksWithTemplates = Object.keys(links).reduce(function (acc, cur) {
  return acc[cur] = links[cur] === 'default' ? defaultGbifOrgLinks[cur] : _objectSpread$f(_objectSpread$f({}, links[cur]), {}, {
    href: function href(occurrence) {
      return links[cur].template.replace('$key', occurrence[links[cur].key]);
    }
  }), acc;
}, {});
var LinksContext = /*#__PURE__*/React__default["default"].createContext(linksWithTemplates);

var _excluded$19 = ["onImageChange", "onCloseRequest", "id", "defaultTab", "className", "style"];
var TabList$4 = Tabs.TabList,
    Tab$1 = Tabs.Tab,
    TabPanel$1 = Tabs.TabPanel,
    TapSeperator$1 = Tabs.TapSeperator;
function OccurrenceSidebar(_ref) {
  var _data$occurrence2, _data$occurrence3, _data$occurrence3$vol, _data$occurrence3$vol2;

  _ref.onImageChange;
      var onCloseRequest = _ref.onCloseRequest,
      id = _ref.id,
      defaultTab = _ref.defaultTab;
      _ref.className;
      var style = _ref.style;
      _objectWithoutProperties__default["default"](_ref, _excluded$19);

  var links = React.useContext(LinksContext); // Get the keys for custom dataset links and custom taxon links

  var linkKeys = Object.keys(links).map(function (k) {
    var _links$k;

    return (_links$k = links[k]) === null || _links$k === void 0 ? void 0 : _links$k.key;
  }).filter(function (k) {
    return !!k;
  }).join('\n');

  var _useQuery = useQuery(OCCURRENCE(linkKeys), {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var _useState = React.useState(defaultTab || 'details'),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      activeId = _useState2[0],
      setTab = _useState2[1];

  var theme = React.useContext(ThemeContext);

  var _useState3 = React.useState(),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      activeImage = _useState4[0],
      _setActiveImage = _useState4[1];

  var _useState5 = React.useState(),
      _useState6 = _slicedToArray__default["default"](_useState5, 2),
      fieldGroups = _useState6[0],
      setFieldGroups = _useState6[1];

  React.useEffect(function () {
    if (typeof id !== 'undefined') {
      load({
        variables: {
          key: id
        }
      });
    }
  }, [id]);
  React.useEffect(function () {
    var _data$occurrence;

    if (!loading && activeId === 'images' && !(data !== null && data !== void 0 && (_data$occurrence = data.occurrence) !== null && _data$occurrence !== void 0 && _data$occurrence.stillImages)) {
      setTab('details');
    }

    if (!loading && data !== null && data !== void 0 && data.occurrence) {
      setFieldGroups(data.occurrence.groups);
    }
  }, [data, loading]);
  var isSpecimen = get_1(data, 'occurrence.basisOfRecord', '').indexOf('SPECIMEN') > -1;
  return react.jsx(Tabs, {
    activeId: activeId,
    onChange: function onChange(id) {
      return setTab(id);
    }
  }, react.jsx(Row, {
    wrap: "nowrap",
    style: style,
    css: sideBar$3({
      theme: theme
    })
  }, react.jsx(Col, {
    shrink: false,
    grow: false,
    css: detailDrawerBar$1({
      theme: theme
    })
  }, react.jsx(TabList$4, {
    "aria-label": "Images",
    style: {
      paddingTop: '12px'
    },
    vertical: true
  }, onCloseRequest && react.jsx(React__default["default"].Fragment, null, react.jsx(Tab$1, {
    direction: "left",
    onClick: onCloseRequest
  }, react.jsx(md.MdClose, null)), react.jsx(TapSeperator$1, {
    vertical: true
  })), react.jsx(Tab$1, {
    tabId: "details",
    direction: "left"
  }, react.jsx(md.MdInfo, null)), (data === null || data === void 0 ? void 0 : (_data$occurrence2 = data.occurrence) === null || _data$occurrence2 === void 0 ? void 0 : _data$occurrence2.stillImageCount) > 0 && react.jsx(Tab$1, {
    tabId: "images",
    direction: "left"
  }, react.jsx(md.MdInsertPhoto, null)), (data === null || data === void 0 ? void 0 : (_data$occurrence3 = data.occurrence) === null || _data$occurrence3 === void 0 ? void 0 : (_data$occurrence3$vol = _data$occurrence3["volatile"]) === null || _data$occurrence3$vol === void 0 ? void 0 : (_data$occurrence3$vol2 = _data$occurrence3$vol.features) === null || _data$occurrence3$vol2 === void 0 ? void 0 : _data$occurrence3$vol2.isClustered) && react.jsx(Tab$1, {
    tabId: "cluster",
    direction: "left"
  }, react.jsx(ClusterIcon, null)))), react.jsx(Col, {
    shrink: false,
    grow: false,
    css: detailDrawerContent$1({
      theme: theme
    })
  }, react.jsx(TabPanel$1, {
    tabId: "images"
  }, react.jsx(ImageDetails, {
    activeImage: activeImage,
    setActiveImage: _setActiveImage,
    data: data,
    loading: loading,
    error: error
  })), react.jsx(TabPanel$1, {
    tabId: "details",
    style: {
      height: '100%'
    }
  }, react.jsx(Intro$1, {
    setActiveImage: function setActiveImage(id) {
      _setActiveImage(id);

      setTab('images');
    },
    fieldGroups: fieldGroups,
    isSpecimen: isSpecimen,
    data: data,
    loading: loading,
    error: error
  })), react.jsx(TabPanel$1, {
    tabId: "cluster"
  }, react.jsx(Cluster, {
    data: data,
    loading: loading,
    error: error
  }))))); // return <Div css={styles.occurrenceDrawer({ theme })} {...props}>
  //   <Properties style={{ fontSize: 13, maxWidth: 600 }} horizontal={true}>
  //     <Term>Description</Term>
  //     <Value>
  //       Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque finibus efficitur pulvinar. Maecenas ornare lobortis leo vel condimentum. Suspendisse dui lorem, tempus sed pulvinar eu, interdum et tellus. Morbi malesuada facilisis ullamcorper. Donec vehicula purus et neque sagittis mollis. Ut quis diam ex. Donec aliquam lorem vel nunc blandit dignissim. Nulla eget scelerisque neque, ut vulputate neque. Maecenas eu venenatis nisi. Duis sollicitudin, urna quis vestibulum elementum, augue est dapibus urna, in tempor dolor risus nec felis. Cras blandit luctus tortor, vitae fringilla dui ultricies non. Sed rhoncus erat quis tristique hendrerit.
  //   </Value>
  //   </Properties>
  // </Div>
}

var OCCURRENCE = function OCCURRENCE(linkKeys) {
  return "\nquery occurrence($key: ID!){\n  occurrence(key: $key) {\n    key\n    coordinates\n    countryCode\n    eventDate\n    typeStatus\n    issues\n    ".concat(linkKeys || '', "\n    institution {\n      name\n      key\n    }\n    collection {\n      name\n      key\n    }\n    volatile {\n      globe(sphere: false, land: false, graticule: false) {\n        svg\n        lat\n        lon\n      }\n      features {\n        isSpecimen\n        isTreament\n        isSequenced\n        isClustered\n        isSamplingEvent\n      }\n    }\n    datasetKey,\n    datasetTitle\n    publishingOrgKey,\n    publisherTitle,\n    dataset {\n      citation {\n        text\n      }\n    }\n    institutionCode\n    recordedByIDs {\n      value\n      person(expand: true) {\n        name\n        birthDate\n        deathDate\n        image\n      }\n    }\n    identifiedByIDs {\n      value\n      person(expand: true) {\n        name\n        birthDate\n        deathDate\n        image\n      }\n    }\n\n    gadm\n\n    stillImageCount\n    movingImageCount\n    soundCount\n    stillImages {\n      type\n      format\n      identifier\n      created\n      creator\n      license\n      publisher\n      references\n      rightsHolder\n      description\n    }\n\n    gbifClassification {\n      kingdom\n      kingdomKey\n      phylum\n      phylumKey\n      class\n      classKey\n      order\n      orderKey\n      family\n      familyKey\n      genus\n      genusKey\n      species\n      speciesKey\n      synonym\n      classification {\n        key\n        rank\n        name\n      }\n      usage {\n        rank\n        formattedName\n        key\n      }\n      acceptedUsage {\n        formattedName\n        key\n      }\n    }\n\n    primaryImage {\n      identifier\n    }\n\n    terms {\n      simpleName\n      verbatim\n      value\n      htmlValue\n      remarks\n      issues\n    }\n  }\n}\n");
};

var _excluded3$1 = ["theme"];

var _ref10$2 = {
  name: "jvsac8",
  styles: ".gbif-header-location{font-size:13px;display:flex;align-items:center;margin-top:8px;}"
} ;

var header$1 = function header(_ref15) {
  _extends__default["default"]({}, _ref15);

  return _ref10$2;
};

var _ref9$1 = {
  name: "1dfk8o8",
  styles: "border-left:2px solid orange;margin-left:6px;height:1em;padding-left:6px"
} ;

var breadcrumbSeperator = function breadcrumbSeperator(_ref16) {
  _extends__default["default"]({}, _ref16);

  return _ref9$1;
};

var _ref8$1 = {
  name: "1wphcz4",
  styles: "font-size:11px;margin-bottom:4px"
} ;

var breadcrumb = function breadcrumb(_ref17) {
  _extends__default["default"]({}, _ref17);

  return _ref8$1;
};
var sideBar$2 = function sideBar(_ref21) {
  var theme = _ref21.theme;
      _objectWithoutProperties__default["default"](_ref21, _excluded3$1);

  return /*#__PURE__*/react.css("background:", theme.paperBackground500, ";position:relative;" + ("" ), "" );
};
var detailDrawerBar = function detailDrawerBar(_ref22) {
  var theme = _ref22.theme;
  return /*#__PURE__*/react.css("border:1px solid ", theme.paperBorderColor, ";border-width:0 1px;color:", theme.darkTheme ? theme.color600 : theme.color900, ";" + ("" ), "" );
};

var _ref6$4 = {
  name: "jtrtuq",
  styles: "overflow:auto;flex:1 1 auto;>div{max-width:100%;}"
} ;

var detailDrawerContent = function detailDrawerContent(_ref23) {
  _ref23.theme;
  return _ref6$4;
};

var _ref5$4 = {
  name: "9mdwn1",
  styles: ">img{margin-right:24px;}>h3{display:inline-block;margin:0;}"
} ;

var headline$1 = function headline(_ref24) {
  _ref24.theme;
  return _ref5$4;
};

var _excluded$18 = ["data", "loading", "error"];
var T$c = Properties.Term,
    V$c = Properties.Value;
function Intro(_ref) {
  var _dataset$temporalCove, _dataset$geographicCo;

  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data;
      _ref.loading;
      _ref.error;
      _objectWithoutProperties__default["default"](_ref, _excluded$18);

  React.useContext(ThemeContext);
  var dataset = data.dataset; // if (loading || !dataset) return <h1>Loading</h1>;

  return data !== null && data !== void 0 && data.dataset ? react.jsx(Accordion, {
    summary: "About",
    defaultOpen: true
  }, react.jsx(Properties, {
    style: {
      fontSize: 13,
      marginBottom: 12
    },
    horizontal: true
  }, dataset.description && react.jsx(React__default["default"].Fragment, null, react.jsx(T$c, null, "Description"), react.jsx(V$c, null, react.jsx(HyperText, {
    text: dataset.description
  }))), (dataset === null || dataset === void 0 ? void 0 : (_dataset$temporalCove = dataset.temporalCoverages) === null || _dataset$temporalCove === void 0 ? void 0 : _dataset$temporalCove.length) > 0 && react.jsx(React__default["default"].Fragment, null, react.jsx(T$c, null, "Temporal scope"), react.jsx(V$c, null, dataset.temporalCoverages.map(temporalCoverage))), (dataset === null || dataset === void 0 ? void 0 : (_dataset$geographicCo = dataset.geographicCoverages) === null || _dataset$geographicCo === void 0 ? void 0 : _dataset$geographicCo.length) > 0 && react.jsx(React__default["default"].Fragment, null, react.jsx(T$c, null, "Geographic scope"), react.jsx(V$c, null, dataset.geographicCoverages.map(geographicCoverage))))) : null;
}

function geographicCoverage(coverage) {
  var _coverage$boundingBox;

  var geoJSON;

  if (coverage !== null && coverage !== void 0 && (_coverage$boundingBox = coverage.boundingBox) !== null && _coverage$boundingBox !== void 0 && _coverage$boundingBox.minLatitude) {
    var _coverage$boundingBox2 = coverage.boundingBox,
        minLongitude = _coverage$boundingBox2.minLongitude,
        minLatitude = _coverage$boundingBox2.minLatitude,
        maxLongitude = _coverage$boundingBox2.maxLongitude,
        maxLatitude = _coverage$boundingBox2.maxLatitude;
    geoJSON = {
      "type": "Polygon",
      "coordinates": [[[minLongitude, minLatitude], [maxLongitude, minLatitude], [maxLongitude, maxLatitude], [minLongitude, maxLatitude], [minLongitude, minLatitude]]]
    };
  }

  return react.jsx(Properties, null, react.jsx(T$c, null, "Description"), react.jsx(V$c, null, coverage.description), geoJSON && react.jsx(React__default["default"].Fragment, null, react.jsx("img", {
    style: {
      marginTop: 24,
      maxWidth: '100%'
    },
    src: "https://api.mapbox.com/styles/v1/mapbox/light-v10/static/geojson(".concat(encodeURIComponent(JSON.stringify(geoJSON)), ")/auto/600x300@2x?access_token=pk.eyJ1IjoiaG9mZnQiLCJhIjoiY2llaGNtaGRiMDAxeHNxbThnNDV6MG95OSJ9.p6Dj5S7iN-Mmxic6Z03BEA")
  }), react.jsx(Properties, {
    horizontal: true
  }, react.jsx(T$c, null, "Latitude"), react.jsx(V$c, null, "From ", coverage.boundingBox.minLatitude, " to ", coverage.boundingBox.maxLatitude), react.jsx(T$c, null, "Longitude"), react.jsx(V$c, null, "From ", coverage.boundingBox.minLongitude, " to ", coverage.boundingBox.maxLongitude))));
}

function temporalCoverage(period) {
  return react.jsx(Properties, null, react.jsx(T$c, null, period.type), period['@type'] == 'range' && react.jsx(V$c, null, react.jsx(reactIntl.FormattedDate, {
    value: period.start,
    year: "numeric",
    month: "long",
    day: "2-digit"
  }), " - ", react.jsx(reactIntl.FormattedDate, {
    value: period.end,
    year: "numeric",
    month: "long",
    day: "2-digit"
  })), period['@type'] == 'single' && react.jsx(V$c, null, react.jsx(reactIntl.FormattedDate, {
    value: period.date,
    year: "numeric",
    month: "long",
    day: "2-digit"
  })), period['@type'] == 'verbatim' && react.jsx(V$c, null, period.period));
}

var _excluded$17 = ["url", "style"];
function Logo(_ref) {
  var url = _ref.url,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {
    maxHeight: "64px",
    maxWidth: "100px"
  } : _ref$style;
      _objectWithoutProperties__default["default"](_ref, _excluded$17);

  var _useState = React.useState(true),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      error = _useState2[0],
      setError = _useState2[1];

  var _useState3 = React.useState(true),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      loading = _useState4[0],
      setLoading = _useState4[1];

  return loading || !error ? react.jsx("img", {
    style: style,
    src: url,
    onLoad: function onLoad() {
      setError(false);
      setLoading(false);
    },
    onError: function onError() {
      setError(true);
      setLoading(false);
    }
  }) : null;
}

var _excluded$16 = ["url"];
function License(_ref) {
  var url = _ref.url;
      _objectWithoutProperties__default["default"](_ref, _excluded$16);

  if (!url) {
    return react.jsx(reactIntl.FormattedMessage, {
      id: "enums.license.UNSPECIFIED",
      defaultMessage: "Unspecified"
    });
  } else if (isLink(url)) {
    switch (url) {
      case 'http://creativecommons.org/publicdomain/zero/1.0/legalcode':
        return react.jsx("a", {
          href: url
        }, react.jsx(reactIntl.FormattedMessage, {
          id: "enums.license.CC0_1_0",
          defaultMessage: "CC0_1_0"
        }));

      case 'http://creativecommons.org/licenses/by/4.0/legalcode':
        return react.jsx("a", {
          href: url
        }, react.jsx(reactIntl.FormattedMessage, {
          id: "enums.license.CC_BY_4_0",
          defaultMessage: "CC_BY_4_0"
        }));

      case 'http://creativecommons.org/licenses/by-nc/4.0/legalcode':
        return react.jsx("a", {
          href: url
        }, react.jsx(reactIntl.FormattedMessage, {
          id: "enums.license.CC_BY_NC_4_0",
          defaultMessage: "CC_BY_NC_4_0"
        }));

      default:
        return react.jsx(reactIntl.FormattedMessage, {
          id: "enums.license.UNSUPPORTED",
          defaultMessage: "UNSUPPORTED"
        });
    }
  } else {
    return react.jsx(reactIntl.FormattedMessage, {
      id: "enums.license.UNSPECIFIED",
      defaultMessage: "Unspecified"
    });
  }
}

var isLink = function isLink(data) {
  if (typeof data !== 'string') {
    return false;
  }

  return urlRegex__default["default"]({
    exact: true
  }).test(data);
};

var _excluded$15 = ["data", "loading", "error"];
var T$b = Properties.Term,
    V$b = Properties.Value;
function Header$1(_ref) {
  var _data$dataset, _data$dataset2, _data$dataset3, _data$dataset4, _data$dataset5, _data$dataset6, _data$dataset7, _data$dataset8;

  var data = _ref.data;
      _ref.loading;
      _ref.error;
      _objectWithoutProperties__default["default"](_ref, _excluded$15);

  var theme = React.useContext(ThemeContext);
  var item = data === null || data === void 0 ? void 0 : data.dataset;
  return react.jsx(React__default["default"].Fragment, null, react.jsx(Row, null, react.jsx("div", {
    css: breadcrumb({
      theme: theme
    })
  }, "Dataset", react.jsx("span", {
    css: breadcrumbSeperator({
      theme: theme
    })
  }, react.jsx(reactIntl.FormattedDate, {
    value: item === null || item === void 0 ? void 0 : item.created,
    year: "numeric",
    month: "long",
    day: "2-digit"
  })))), react.jsx(Row, {
    wrap: "no-wrap",
    css: header$1({
      theme: theme
    })
  }, react.jsx(Col, {
    grow: true
  }, react.jsx("div", {
    css: headline$1({
      theme: theme
    })
  }, react.jsx("h3", null, data === null || data === void 0 ? void 0 : (_data$dataset = data.dataset) === null || _data$dataset === void 0 ? void 0 : _data$dataset.title)), (data === null || data === void 0 ? void 0 : (_data$dataset2 = data.dataset) === null || _data$dataset2 === void 0 ? void 0 : _data$dataset2.volatileContributors) && getHighlightedContributors(data.dataset)), react.jsx(Col, null, (data === null || data === void 0 ? void 0 : (_data$dataset3 = data.dataset) === null || _data$dataset3 === void 0 ? void 0 : _data$dataset3.logoUrl) && react.jsx(Logo, {
    url: data.dataset.logoUrl
  }))), react.jsx(Row, null, react.jsx(Properties, {
    style: {
      fontSize: 13,
      marginBottom: 12
    },
    horizontal: true
  }, (data === null || data === void 0 ? void 0 : (_data$dataset4 = data.dataset) === null || _data$dataset4 === void 0 ? void 0 : _data$dataset4.publishingOrganizationKey) && (data === null || data === void 0 ? void 0 : (_data$dataset5 = data.dataset) === null || _data$dataset5 === void 0 ? void 0 : _data$dataset5.publishingOrganizationTitle) && react.jsx(React__default["default"].Fragment, null, " ", react.jsx(T$b, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.publishBy",
    defaultMessage: "Published by"
  })), react.jsx(V$b, null, react.jsx("a", {
    href: "https://www.gbif.org/publisher/".concat(data === null || data === void 0 ? void 0 : (_data$dataset6 = data.dataset) === null || _data$dataset6 === void 0 ? void 0 : _data$dataset6.publishingOrganizationKey)
  }, data === null || data === void 0 ? void 0 : (_data$dataset7 = data.dataset) === null || _data$dataset7 === void 0 ? void 0 : _data$dataset7.publishingOrganizationTitle))), (data === null || data === void 0 ? void 0 : (_data$dataset8 = data.dataset) === null || _data$dataset8 === void 0 ? void 0 : _data$dataset8.license) && react.jsx(React__default["default"].Fragment, null, " ", react.jsx(T$b, null, react.jsx(reactIntl.FormattedMessage, {
    id: "license",
    defaultMessage: "License"
  })), react.jsx(V$b, null, react.jsx(License, {
    url: data.dataset.license
  }))))));
}

var getHighlightedContributors = function getHighlightedContributors(dataset, theme) {
  var _dataset$volatileCont;

  if (!dataset) return null;
  var highlighted = ((_dataset$volatileCont = dataset.volatileContributors) === null || _dataset$volatileCont === void 0 ? void 0 : _dataset$volatileCont.length) > 0 ? dataset.volatileContributors.filter(function (c) {
    return c._highlighted;
  }) : null;
  if (!highlighted || highlighted.length === 0) return null;
  return react.jsx("p", {
    style: {
      fontSize: '14px'
    }
  }, highlighted.map(function (p) {
    return "".concat(p.firstName ? p.firstName + " " : "").concat(p.lastName);
  }).join(" • "));
};

var _excluded$14 = ["data", "loading", "error"];
var T$a = Properties.Term,
    V$a = Properties.Value;
function Contacts(_ref) {
  var _dataset$volatileCont;

  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data;
      _ref.loading;
      _ref.error;
      _objectWithoutProperties__default["default"](_ref, _excluded$14);

  React.useContext(ThemeContext);
  var dataset = data.dataset;
  return (dataset === null || dataset === void 0 ? void 0 : (_dataset$volatileCont = dataset.volatileContributors) === null || _dataset$volatileCont === void 0 ? void 0 : _dataset$volatileCont.length) > 0 ? react.jsx(Accordion, {
    summary: "Contacts",
    defaultOpen: true
  }, dataset.volatileContributors.map(contact)) : null;
}

function contact(ctct) {
  var _ctct$userId;

  return react.jsx(Properties, {
    style: {
      fontSize: 13,
      marginBottom: 12
    },
    horizontal: true,
    key: ctct.type + ctct.firstName + ctct.lastName
  }, react.jsx(T$a, null, ctct.roles && ctct.roles.map(function (r) {
    return react.jsx("div", {
      key: r
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "enums.role.".concat(r),
      defaultMessage: r
    }));
  })), react.jsx(V$a, null, (ctct.firstName || ctct.lastName) && react.jsx("div", null, ctct.firstName, " ", ctct.lastName), ctct.position && react.jsx("div", null, ctct.position), (ctct === null || ctct === void 0 ? void 0 : (_ctct$userId = ctct.userId) === null || _ctct$userId === void 0 ? void 0 : _ctct$userId.length) > 0 && ctct.userId.map(function (id) {
    return react.jsx(HyperText, {
      text: id,
      key: id
    });
  }), ctct.organization && react.jsx("div", null, ctct.organization), ctct.address && react.jsx("div", null, ctct.address)));
}

var _excluded$13 = ["data", "loading", "error"];
var T$9 = Properties.Term,
    V$9 = Properties.Value;
function BibliographicCitations$1(_ref) {
  var _dataset$bibliographi;

  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data;
      _ref.loading;
      _ref.error;
      _objectWithoutProperties__default["default"](_ref, _excluded$13);

  var dataset = data.dataset;
  return (dataset === null || dataset === void 0 ? void 0 : (_dataset$bibliographi = dataset.bibliographicCitations) === null || _dataset$bibliographi === void 0 ? void 0 : _dataset$bibliographi.length) > 0 ? react.jsx(Accordion, {
    summary: "Bibliography",
    defaultOpen: true
  }, dataset.bibliographicCitations.map(bibiliographicCitation)) : null;
}

function bibiliographicCitation(citation) {
  return react.jsx(Properties, {
    style: {
      fontSize: 13,
      marginBottom: 12
    },
    horizontal: true,
    key: citation.text
  }, react.jsx(T$9, null), react.jsx(V$9, null, citation.text && react.jsx("div", null, react.jsx(HyperText, {
    text: citation.text
  })), citation.identifier && react.jsx("div", null, react.jsx(HyperText, {
    text: citation.identifier
  }))));
}

var _excluded$12 = ["data", "loading", "error"];
var T$8 = Properties.Term,
    V$8 = Properties.Value;
function SamplingDescription$1(_ref) {
  var _data$dataset, _dataset$samplingDesc, _dataset$samplingDesc2, _dataset$samplingDesc3, _dataset$samplingDesc4, _dataset$samplingDesc5, _dataset$samplingDesc6;

  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data;
      _ref.loading;
      _ref.error;
      _objectWithoutProperties__default["default"](_ref, _excluded$12);

  /*sampling
    qualityControl
    methodSteps*/
  var dataset = data.dataset;
  return data !== null && data !== void 0 && (_data$dataset = data.dataset) !== null && _data$dataset !== void 0 && _data$dataset.samplingDescription ? react.jsx(Accordion, {
    summary: "Sampling",
    defaultOpen: true
  }, react.jsx(Properties, {
    style: {
      fontSize: 13,
      marginBottom: 12
    },
    horizontal: true
  }, ((_dataset$samplingDesc = dataset.samplingDescription) === null || _dataset$samplingDesc === void 0 ? void 0 : _dataset$samplingDesc.sampling) && react.jsx(React__default["default"].Fragment, null, react.jsx(T$8, null), react.jsx(V$8, null, react.jsx(HyperText, {
    text: dataset.samplingDescription.sampling
  }))), ((_dataset$samplingDesc2 = dataset.samplingDescription) === null || _dataset$samplingDesc2 === void 0 ? void 0 : _dataset$samplingDesc2.studyExtent) && react.jsx(React__default["default"].Fragment, null, react.jsx(T$8, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.samplingDescription.studyExtent",
    defaultMessage: "Study extent"
  })), react.jsx(V$8, null, react.jsx(HyperText, {
    text: dataset.samplingDescription.studyExtent
  }))), ((_dataset$samplingDesc3 = dataset.samplingDescription) === null || _dataset$samplingDesc3 === void 0 ? void 0 : _dataset$samplingDesc3.qualityControl) && react.jsx(React__default["default"].Fragment, null, react.jsx(T$8, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.samplingDescription.qualityControl",
    defaultMessage: "Quality control"
  })), react.jsx(V$8, null, react.jsx(HyperText, {
    text: dataset.samplingDescription.qualityControl
  }))), ((_dataset$samplingDesc4 = dataset.samplingDescription) === null || _dataset$samplingDesc4 === void 0 ? void 0 : _dataset$samplingDesc4.methodSteps) && ((_dataset$samplingDesc5 = dataset.samplingDescription) === null || _dataset$samplingDesc5 === void 0 ? void 0 : (_dataset$samplingDesc6 = _dataset$samplingDesc5.methodSteps) === null || _dataset$samplingDesc6 === void 0 ? void 0 : _dataset$samplingDesc6.length) > 0 && react.jsx(React__default["default"].Fragment, null, react.jsx(T$8, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.samplingDescription.methodSteps",
    defaultMessage: "Method steps"
  })), react.jsx(V$8, null, react.jsx("ol", {
    style: {
      padding: "0px",
      margin: 0
    }
  }, dataset.samplingDescription.methodSteps.map(function (s, i) {
    return react.jsx("li", {
      key: s,
      style: i < dataset.samplingDescription.methodSteps.length - 1 ? {
        marginBottom: "12px"
      } : null
    }, react.jsx(HyperText, {
      text: s
    }));
  })))))) : null;
}

var _excluded$11 = ["data", "loading", "error"];
var T$7 = Properties.Term,
    V$7 = Properties.Value;
function Citation$1(_ref) {
  var _dataset$citation;

  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data;
      _ref.loading;
      _ref.error;
      _objectWithoutProperties__default["default"](_ref, _excluded$11);

  var dataset = data.dataset;
  return dataset !== null && dataset !== void 0 && (_dataset$citation = dataset.citation) !== null && _dataset$citation !== void 0 && _dataset$citation.text ? react.jsx(Accordion, {
    summary: "Citation",
    defaultOpen: true
  }, react.jsx(Properties, {
    style: {
      fontSize: 13,
      marginBottom: 12
    },
    horizontal: true
  }, react.jsx(T$7, null), react.jsx(V$7, null, react.jsx(HyperText, {
    text: dataset.citation.text
  })))) : null;
}

var _excluded$10 = ["onImageChange", "onCloseRequest", "id", "defaultTab", "className", "style"];
var TabList$3 = Tabs.TabList,
    Tab = Tabs.Tab,
    TabPanel = Tabs.TabPanel,
    TapSeperator = Tabs.TapSeperator;
function DatasetSidebar(_ref) {
  _ref.onImageChange;
      var onCloseRequest = _ref.onCloseRequest,
      id = _ref.id,
      defaultTab = _ref.defaultTab;
      _ref.className;
      var style = _ref.style;
      _objectWithoutProperties__default["default"](_ref, _excluded$10);

  var _useQuery = useQuery(DATASET$1, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var _useState = React.useState(defaultTab || 'details'),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      activeId = _useState2[0],
      setTab = _useState2[1];

  var theme = React.useContext(ThemeContext);
  React.useEffect(function () {
    if (typeof id !== 'undefined') {
      load({
        variables: {
          key: id
        }
      });
    }
  }, [id]);
  return react.jsx(Tabs, {
    activeId: activeId,
    onChange: function onChange(id) {
      return setTab(id);
    }
  }, react.jsx(Row, {
    wrap: "nowrap",
    style: style,
    css: sideBar$2({
      theme: theme
    })
  }, react.jsx(Col, {
    shrink: false,
    grow: false,
    css: detailDrawerBar({
      theme: theme
    })
  }, react.jsx(TabList$3, {
    style: {
      paddingTop: '12px'
    },
    vertical: true
  }, onCloseRequest && react.jsx(React__default["default"].Fragment, null, react.jsx(Tab, {
    direction: "left",
    onClick: onCloseRequest
  }, react.jsx(md.MdClose, null)), react.jsx(TapSeperator, {
    vertical: true
  })), react.jsx(Tab, {
    tabId: "details",
    direction: "left"
  }, react.jsx(md.MdInfo, null)))), react.jsx(Col, {
    shrink: false,
    grow: false,
    css: detailDrawerContent({
      theme: theme
    })
  }, react.jsx(TabPanel, {
    tabId: "details"
  }, react.jsx(Row, {
    direction: "column"
  }, react.jsx(Col, {
    style: {
      padding: '12px 16px',
      paddingBottom: 50
    },
    grow: true
  }, react.jsx(Header$1, {
    data: data,
    error: error
  }), react.jsx(Intro, {
    data: data,
    loading: loading,
    error: error
  }), react.jsx(SamplingDescription$1, {
    data: data
  }), react.jsx(BibliographicCitations$1, {
    data: data
  }), react.jsx(Contacts, {
    data: data
  }), react.jsx(Citation$1, {
    data: data
  })))))));
}
var DATASET$1 = "\nquery dataset($key: ID!){\n  dataset(key: $key) {\n    title\n    created\n    description\n    temporalCoverages\n    logoUrl\n    publishingOrganizationKey\n    publishingOrganizationTitle\n    volatileContributors {\n      firstName\n      lastName\n      position\n      organization\n      address\n      userId\n      type\n      _highlighted\n      roles\n    }\n    geographicCoverages {\n      description\n      boundingBox {\n        minLatitude\n        maxLatitude\n        minLongitude\n        maxLongitude\n        globalCoverage\n      }\n    }\n    taxonomicCoverages {\n      description\n      coverages {\n        scientificName\n        rank {\n          interpreted\n        }\n      }\n    }\n    bibliographicCitations {\n      identifier\n      text\n    }\n    samplingDescription {\n      studyExtent\n      sampling\n      qualityControl\n      methodSteps\n    } \n    citation {\n      text\n    }\n    license\n  }\n}\n";

var _excluded$$ = ["BasisOfRecordLabel", "id", "item", "imageSrc", "onClick"],
    _excluded2$2 = ["labelMap", "onCloseRequest", "onClick", "data", "error", "loading"],
    _excluded3 = ["theme"],
    _excluded4 = ["theme"],
    _excluded5 = ["theme"];

function ListItem(_ref2) {
  var _item$primaryImage, _item$primaryImage2;

  var BasisOfRecordLabel = _ref2.BasisOfRecordLabel,
      id = _ref2.id,
      item = _ref2.item;
      _ref2.imageSrc;
      var _ref2$onClick = _ref2.onClick,
      _onClick = _ref2$onClick === void 0 ? function () {} : _ref2$onClick;
      _objectWithoutProperties__default["default"](_ref2, _excluded$$);

  var theme = React.useContext(ThemeContext);
  return react.jsx("div", {
    css: listItem({
      theme: theme
    }),
    onClick: function onClick(e) {
      return _onClick({
        id: id
      });
    }
  }, react.jsx(Row, {
    wrap: "no-wrap",
    alignItems: "center"
  }, react.jsx(Col, {
    grow: true,
    css: listItemContent({
      theme: theme
    })
  }, react.jsx("h4", {
    dangerouslySetInnerHTML: {
      __html: item.gbifClassification.usage.formattedName
    }
  }), item.eventDate && react.jsx("div", null, react.jsx(reactIntl.FormattedDate, {
    value: item.eventDate,
    year: "numeric",
    month: "long",
    day: "2-digit"
  })), react.jsx("div", null, react.jsx(BasisOfRecordLabel, {
    id: item.basisOfRecord
  }))), react.jsx(Col, {
    grow: false
  }, react.jsx(Button, {
    className: "gbif-map-listItem-chevreon",
    appearance: "text",
    style: {
      padding: 3
    },
    onClick: function onClick(e) {
      return _onClick({
        id: id
      });
    }
  }, react.jsx(md.MdChevronRight, null))), ((_item$primaryImage = item.primaryImage) === null || _item$primaryImage === void 0 ? void 0 : _item$primaryImage.identifier) && react.jsx(Col, {
    grow: false
  }, react.jsx(Image$1, {
    src: (_item$primaryImage2 = item.primaryImage) === null || _item$primaryImage2 === void 0 ? void 0 : _item$primaryImage2.identifier,
    w: 80,
    h: 80,
    style: {
      display: 'block',
      background: theme.paperBackground200,
      width: 80,
      height: 80
    }
  }))));
}

function ListBox(_ref3) {
  var _data$occurrenceSearc3;

  var labelMap = _ref3.labelMap,
      onCloseRequest = _ref3.onCloseRequest,
      _onClick2 = _ref3.onClick,
      data = _ref3.data,
      error = _ref3.error,
      loading = _ref3.loading,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded2$2);

  var theme = React.useContext(ThemeContext);
  if (!error && !loading && !data) return null;
  var BasisOfRecordLabel = labelMap.basisOfRecord;
  var content;

  if (loading) {
    return react.jsx("section", props, react.jsx("div", {
      css: container({
        theme: theme
      })
    }, react.jsx(StripeLoader, {
      active: true
    }), react.jsx("div", {
      css: listItemContent({
        theme: theme
      })
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "phrases.loading"
    }))));
  } else if (error) {
    return react.jsx("section", props, react.jsx("div", {
      css: container({
        theme: theme
      })
    }, react.jsx(StripeLoader, {
      active: true,
      error: true
    }), react.jsx("div", {
      css: listItemContent({
        theme: theme
      })
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "phrases.loadError"
    }))));
  } else if (data) {
    var _data$occurrenceSearc, _data$occurrenceSearc2;

    var results = (data === null || data === void 0 ? void 0 : (_data$occurrenceSearc = data.occurrenceSearch) === null || _data$occurrenceSearc === void 0 ? void 0 : (_data$occurrenceSearc2 = _data$occurrenceSearc.documents) === null || _data$occurrenceSearc2 === void 0 ? void 0 : _data$occurrenceSearc2.results) || [];
    content = react.jsx("ul", {
      css: list({
        theme: theme
      })
    }, results.map(function (x, index) {
      return react.jsx("li", {
        key: x.key
      }, react.jsx(ListItem, {
        BasisOfRecordLabel: BasisOfRecordLabel,
        onClick: function onClick() {
          return _onClick2({
            index: index
          });
        },
        id: x.key,
        item: x
      }));
    }));
  }

  return react.jsx("section", props, react.jsx(Row, {
    css: container({
      theme: theme
    }),
    direction: "column"
  }, react.jsx(Col, {
    grow: false,
    as: "header"
  }, react.jsx(Row, {
    alignItems: "center"
  }, react.jsx(Col, {
    grow: true
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "counts.nResults",
    values: {
      total: data === null || data === void 0 ? void 0 : (_data$occurrenceSearc3 = data.occurrenceSearch) === null || _data$occurrenceSearc3 === void 0 ? void 0 : _data$occurrenceSearc3.documents.total
    }
  })), react.jsx(Col, {
    grow: false
  }, react.jsx(Button, {
    appearance: "outline",
    onClick: onCloseRequest
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "phrases.close"
  }))))), react.jsx(Col, {
    grow: true,
    as: "main"
  }, content)));
}

var container = function container(_ref4) {
  var theme = _ref4.theme;
      _objectWithoutProperties__default["default"](_ref4, _excluded3);

  return /*#__PURE__*/react.css("background:", theme.paperBackground500, ";overflow:auto;border-radius:", theme.borderRadius, "px;border:1px solid ", theme.paperBorderColor, ";max-height:inherit;flex-wrap:nowrap;header{padding:8px 16px;border-bottom:1px solid ", theme.paperBorderColor, ";font-size:12px;font-weight:500;}main{overflow:auto;", styledScrollBars({
    theme: theme
  }), ";}footer{border-top:1px solid ", theme.paperBorderColor, ";padding:8px 16px;}" + ("" ), "" );
};

var list = function list(_ref5) {
  var theme = _ref5.theme;
      _objectWithoutProperties__default["default"](_ref5, _excluded4);

  return /*#__PURE__*/react.css("list-style:none;padding:0;margin:0;border-top:1px solid ", theme.paperBorderColor, ";" + ("" ), "" );
};

var _ref$i = {
  name: "in1zdj",
  styles: "padding:8px 16px;font-size:13px;overflow:hidden;h4{margin:0 0 8px 0;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;}"
} ;

var listItemContent = function listItemContent(_ref6) {
  _extends__default["default"]({}, _ref6);

  return _ref$i;
};

var listItem = function listItem(_ref7) {
  var theme = _ref7.theme;
      _objectWithoutProperties__default["default"](_ref7, _excluded5);

  return /*#__PURE__*/react.css("border-bottom:1px solid ", theme.paperBorderColor, ";cursor:pointer;:hover{background:", theme.paperBackground700, ";}.gbif-map-listItem-chevreon{color:", theme.color500, ";}" + ("" ), "" );
};

var ViewHeader = function ViewHeader(_ref) {
  var children = _ref.children,
      total = _ref.total,
      loading = _ref.loading,
      message = _ref.message,
      props = _ref.props;
  var theme = React.useContext(ThemeContext);
  var showSkeleton = loading || typeof total !== 'number';
  return react.jsx("div", _extends__default["default"]({
    css: /*#__PURE__*/react.css("color:", theme.color500, ";font-size:12px;margin:0 0 4px 4px;" + ("" ), "" )
  }, props), showSkeleton && react.jsx(Skeleton, {
    style: {
      width: 100
    }
  }), !showSkeleton && react.jsx(reactIntl.FormattedMessage, {
    id: message || "counts.nResults",
    values: {
      total: total
    }
  }), children);
};

function getLayerConfig(_ref) {
  var tileString = _ref.tileString,
      theme = _ref.theme;
  return {
    id: "occurrences",
    type: "circle",
    source: {
      type: "vector",
      tiles: [tileString]
    },
    "source-layer": "occurrence",
    paint: {
      // make circles larger as the user zooms from z12 to z22
      "circle-radius": {
        property: "total",
        type: "interval",
        //stops: [[0, 2]]
        stops: [[0, 2], [10, 3], [100, 5], [1000, 8], [10000, 12]]
      },
      // color circles by ethnicity, using data-driven styles
      "circle-color": {
        property: "total",
        type: "interval",
        stops: [0, 10, 100, 1000, 10000].map(function (x, i) {
          return [x, theme.mapDensityColors[i]];
        })
      },
      "circle-opacity": {
        property: "total",
        type: "interval",
        // stops: theme.darkTheme ? [[0, .6], [10, 0.7], [100, 0.8], [1000, 0.8], [10000, 0.9]] : [[0, 1], [10, 0.8], [100, 0.7], [1000, 0.6], [10000, 0.6]]
        stops: [[0, 1], [10, 0.8], [100, 0.7], [1000, 0.6], [10000, 0.6]]
      },
      "circle-stroke-color": theme.mapDensityColors[1],
      "circle-stroke-width": {
        property: "total",
        type: "interval",
        stops: [[0, 1], [10, 0]]
      }
    }
  };
}

var _excluded$_ = ["query", "onMapClick", "onPointClick", "predicateHash", "style", "className"];

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf__default["default"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default["default"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default["default"](this, result); }; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Map$2 = /*#__PURE__*/function (_Component) {
  _inherits__default["default"](Map, _Component);

  var _super = _createSuper$2(Map);

  function Map(props) {
    var _this;

    _classCallCheck__default["default"](this, Map);

    _this = _super.call(this, props);
    _this.addLayer = _this.addLayer.bind(_assertThisInitialized__default["default"](_this));
    _this.updateLayer = _this.updateLayer.bind(_assertThisInitialized__default["default"](_this));
    _this.onPointClick = _this.onPointClick.bind(_assertThisInitialized__default["default"](_this));
    _this.myRef = /*#__PURE__*/React__default["default"].createRef();
    _this.state = {};
    return _this;
  }

  _createClass__default["default"](Map, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props$defaultMa, _this$props$defaultMa2, _this$props$defaultMa3;

      var mapStyle = this.props.theme.darkTheme ? 'dark-v9' : 'light-v9';
      mapboxgl__default["default"].accessToken = env.MAPBOX_KEY;
      this.map = new mapboxgl__default["default"].Map({
        container: this.myRef.current,
        style: "mapbox://styles/mapbox/".concat(mapStyle),
        zoom: sessionStorage.getItem('mapZoom') || ((_this$props$defaultMa = this.props.defaultMapSettings) === null || _this$props$defaultMa === void 0 ? void 0 : _this$props$defaultMa.zoom) || 0,
        center: [sessionStorage.getItem('mapLng') || ((_this$props$defaultMa2 = this.props.defaultMapSettings) === null || _this$props$defaultMa2 === void 0 ? void 0 : _this$props$defaultMa2.lng) || 0, sessionStorage.getItem('mapLat') || ((_this$props$defaultMa3 = this.props.defaultMapSettings) === null || _this$props$defaultMa3 === void 0 ? void 0 : _this$props$defaultMa3.lat) || 0]
      });
      this.map.addControl(new mapboxgl__default["default"].NavigationControl({
        showCompass: false
      }), 'top-left');
      this.map.on("load", this.addLayer);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.map.remove();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      if (prevProps.query !== this.props.query && this.mapLoaded) {
        this.updateLayer();
      }

      if (prevProps.theme !== this.props.theme && this.mapLoaded) {
        var mapStyle = this.props.theme.darkTheme ? 'dark-v9' : 'light-v9';
        this.map.setStyle("mapbox://styles/mapbox/".concat(mapStyle));
        this.map.on('style.load', function () {
          _this2.updateLayer();
        });
      }
    }
  }, {
    key: "updateLayer",
    value: function updateLayer() {
      var layer = this.map.getSource("occurrences");

      if (layer) {
        this.map.removeLayer("occurrences");
        this.map.removeSource("occurrences");
        this.addLayer();
      } else {
        this.addLayer();
      }
    }
  }, {
    key: "onPointClick",
    value: function onPointClick(pointData) {
      this.props.onPointClick(pointData);
    }
  }, {
    key: "addLayer",
    value: function addLayer() {
      var _this3 = this;

      var tileString = "".concat(env.API_V2, "/map/occurrence/adhoc/{z}/{x}/{y}.mvt?style=scaled.circles&mode=GEO_CENTROID&srs=EPSG%3A3857&squareSize=256&predicateHash=").concat(this.props.predicateHash, "&").concat(this.props.q ? "&q=".concat(this.props.q, " ") : '');
      this.map.addLayer(getLayerConfig({
        tileString: tileString,
        theme: this.props.theme
      }), "poi-scalerank2");
      var map = this.map;

      if (!this.mapLoaded) {
        // remember map position
        map.on('zoomend', function () {
          var center = map.getCenter();
          sessionStorage.setItem('mapZoom', map.getZoom());
          sessionStorage.setItem('mapLng', center.lng);
          sessionStorage.setItem('mapLat', center.lat);
        });
        map.on('moveend', function () {
          var center = map.getCenter();
          sessionStorage.setItem('mapZoom', map.getZoom());
          sessionStorage.setItem('mapLng', center.lng);
          sessionStorage.setItem('mapLat', center.lat);
        });
        map.on('mouseenter', 'occurrences', function (e) {
          // Change the cursor style as a UI indicator.
          map.getCanvas().style.cursor = 'pointer';
        });
        map.on('click', 'occurrences', function (e) {
          _this3.onPointClick({
            geohash: e.features[0].properties.geohash,
            count: e.features[0].properties.count
          });

          e.preventDefault();
        });
        map.on('mouseleave', 'occurrences', function () {
          map.getCanvas().style.cursor = '';
        });
        map.on('click', function (e) {
          if (!e._defaultPrevented && _this3.props.onMapClick) _this3.props.onMapClick();
        });
        map.on('error', function (e) {
          var _e$error;

          if ((e === null || e === void 0 ? void 0 : (_e$error = e.error) === null || _e$error === void 0 ? void 0 : _e$error.status) === 400 && _this3.props.registerPredicate) {
            _this3.props.registerPredicate();
          }
        });
      }

      this.mapLoaded = true;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props;
          _this$props.query;
          _this$props.onMapClick;
          _this$props.onPointClick;
          _this$props.predicateHash;
          var style = _this$props.style,
          className = _this$props.className;
          _objectWithoutProperties__default["default"](_this$props, _excluded$_);

      return react.jsx("div", {
        ref: this.myRef,
        style: style,
        className: className
      });
    }
  }]);

  return Map;
}(React.Component);

var _ref2$a = {
  name: "1ur9udb",
  styles: "flex:1 1 100%;display:flex;height:100%;max-height:100vh;flex-direction:column;position:relative"
} ;

var mapArea = function mapArea(_ref3) {
  _ref3.theme;
  return _ref2$a;
};
var mapComponent = function mapComponent(_ref4) {
  var theme = _ref4.theme;
  return /*#__PURE__*/react.css("flex:1 1 100%;border:1px solid ", theme.paperBorderColor, ";border-radius:", theme.borderRadius, "px;display:flex;flex-direction:column;height:100%;canvas:focus{outline:none;}" + ("" ), "" );
};

var _ref$h = {
  name: "iz8ie5",
  styles: "z-index:10;margin:12px;position:absolute;left:0;top:0;width:350px;max-width:100%;height:auto;max-height:calc(100% - 24px);display:flex;flex-direction:column"
} ;

var resultList = function resultList(_ref5) {
  _objectDestructuringEmpty__default["default"](_ref5);

  return _ref$h;
};

var _excluded$Z = ["labelMap", "query", "q", "pointData", "pointError", "pointLoading", "loading", "total", "predicateHash", "registerPredicate", "loadPointData", "defaultMapSettings"];

function Map$1(_ref) {
  var _pointData$occurrence, _pointData$occurrence2;

  var labelMap = _ref.labelMap,
      query = _ref.query,
      q = _ref.q,
      pointData = _ref.pointData,
      pointError = _ref.pointError,
      pointLoading = _ref.pointLoading,
      loading = _ref.loading,
      total = _ref.total,
      predicateHash = _ref.predicateHash,
      registerPredicate = _ref.registerPredicate,
      loadPointData = _ref.loadPointData,
      defaultMapSettings = _ref.defaultMapSettings;
      _objectWithoutProperties__default["default"](_ref, _excluded$Z);

  var dialog = Dialog.useDialogState({
    animated: true,
    modal: false
  });
  var theme = React.useContext(ThemeContext);

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      activeId = _useState2[0],
      setActive = _useState2[1];

  var _useState3 = React.useState(),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      activeItem = _useState4[0],
      setActiveItem = _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = _slicedToArray__default["default"](_useState5, 2),
      listVisible = _useState6[0],
      showList = _useState6[1];

  var items = (pointData === null || pointData === void 0 ? void 0 : (_pointData$occurrence = pointData.occurrenceSearch) === null || _pointData$occurrence === void 0 ? void 0 : (_pointData$occurrence2 = _pointData$occurrence.documents) === null || _pointData$occurrence2 === void 0 ? void 0 : _pointData$occurrence2.results) || [];
  React.useEffect(function () {
    setActiveItem(items[activeId]);
  }, [activeId, items]);
  var nextItem = React.useCallback(function () {
    setActive(Math.min(items.length - 1, activeId + 1));
  }, [items, activeId]);
  var previousItem = React.useCallback(function () {
    setActive(Math.max(0, activeId - 1));
  }, [items, activeId]);
  return react.jsx(React__default["default"].Fragment, null, react.jsx(DetailsDrawer, {
    href: "https://www.gbif.org/occurrence/".concat(activeItem === null || activeItem === void 0 ? void 0 : activeItem.key),
    dialog: dialog,
    nextItem: nextItem,
    previousItem: previousItem
  }, react.jsx(OccurrenceSidebar, {
    id: activeItem === null || activeItem === void 0 ? void 0 : activeItem.key,
    defaultTab: "details",
    style: {
      maxWidth: '100%',
      width: 700,
      height: '100%'
    },
    onCloseRequest: function onCloseRequest() {
      return dialog.setVisible(false);
    }
  })), react.jsx("div", {
    css: mapArea({
      theme: theme
    })
  }, react.jsx(ViewHeader, {
    message: "counts.nResultsWithCoordinates",
    loading: loading,
    total: total
  }), react.jsx("div", {
    style: {
      position: 'relative',
      height: '100%',
      flex: '1 1 auto',
      display: 'flex',
      flexDirection: 'column'
    }
  }, listVisible && react.jsx(ListBox, {
    onCloseRequest: function onCloseRequest(e) {
      return showList(false);
    },
    labelMap: labelMap,
    onClick: function onClick(_ref2) {
      var index = _ref2.index;
      dialog.show();
      setActive(index);
    },
    data: pointData,
    error: pointError,
    loading: pointLoading,
    css: resultList({})
  }), react.jsx(Map$2, {
    defaultMapSettings: defaultMapSettings,
    predicateHash: predicateHash,
    q: q,
    css: mapComponent({
      theme: theme
    }),
    theme: theme,
    query: query,
    onMapClick: function onMapClick(e) {
      return showList(false);
    },
    onPointClick: function onPointClick(data) {
      showList(true);
      loadPointData(data);
    },
    registerPredicate: registerPredicate
  }))));
}

var OCCURRENCE_MAP = "\nquery map($predicate: Predicate){\n  occurrenceSearch(predicate: $predicate) {\n    _meta\n    documents {\n      total\n    }\n    _v1PredicateHash\n  }\n}\n";
var OCCURRENCE_POINT = "\nquery point($predicate: Predicate){\n  occurrenceSearch(predicate: $predicate) {\n    documents {\n      total\n      results {\n        key\n        basisOfRecord\n        eventDate\n        gbifClassification{\n          usage {\n            rank\n            formattedName\n          }\n        }\n        primaryImage {\n          identifier\n        }\n      }\n    }\n  }\n}\n";
var wktBBoxTemplate = '((W S,E S,E N,W N,W S))';

function Map() {
  var _currentFilterContext, _currentFilterContext2, _currentFilterContext3, _data$occurrenceSearc, _data$occurrenceSearc2, _data$occurrenceSearc3, _data$occurrenceSearc4, _data$occurrenceSearc5;

  var currentFilterContext = React.useContext(FilterContext);

  var _useContext = React.useContext(SearchContext),
      labelMap = _useContext.labelMap,
      rootPredicate = _useContext.rootPredicate,
      predicateConfig = _useContext.predicateConfig,
      more = _useContext.more;

  var _useQuery = useQuery(OCCURRENCE_MAP, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var _useQuery2 = useQuery(OCCURRENCE_POINT, {
    lazyLoad: true
  }),
      pointData = _useQuery2.data,
      pointError = _useQuery2.error,
      pointLoading = _useQuery2.loading,
      pointLoad = _useQuery2.load;

  React.useEffect(function () {
    loadHashAndCount({
      filter: currentFilterContext.filter,
      predicateConfig: predicateConfig,
      rootPredicate: rootPredicate
    });
  }, [currentFilterContext.filterHash, rootPredicate, predicateConfig]);
  var loadHashAndCount = React.useCallback(function (_ref) {
    var filter = _ref.filter,
        predicateConfig = _ref.predicateConfig,
        rootPredicate = _ref.rootPredicate;
    var predicate = {
      type: 'and',
      predicates: [rootPredicate, filter2predicate(filter, predicateConfig), {
        type: 'equals',
        key: 'hasCoordinate',
        value: true
      }].filter(function (x) {
        return x;
      })
    };
    load({
      keepDataWhileLoading: true,
      variables: {
        predicate: predicate
      }
    });
  }, []);
  var registrationEmbargo;
  /**
   * Allow the map to register the predicate again. This can be useful when tile with status code 400 errors come back. 
   * But it should only be allowed to do every so often as we do not want to send request 500 times a second when an error is persistent.
   * In theory it should only ever be called once and that is in the relatively rare case when the tile server is redployed just as someone is browsing the map.
   */

  var registerPredicate = React.useCallback(function () {
    if (registrationEmbargo) return;
    registrationEmbargo = true;
    window.setTimeout(function () {
      return registrationEmbargo = false;
    }, 10000); //only allow registering an error every 10 seconds.

    loadHashAndCount({
      filter: currentFilterContext.filter,
      predicateConfig: predicateConfig,
      rootPredicate: rootPredicate
    });
  }, [currentFilterContext.filterHash, rootPredicate, predicateConfig]);
  var loadPointData = React.useCallback(function (_ref2) {
    var geohash = _ref2.geohash;
    var latLon = Geohash__default["default"].bounds(geohash);
    var N = latLon.ne.lat,
        S = latLon.sw.lat,
        W = latLon.sw.lon,
        E = latLon.ne.lon;
    var wkt = 'POLYGON' + wktBBoxTemplate.replace(/N/g, N).replace(/S/g, S).replace(/W/g, W).replace(/E/g, E);
    var predicate = {
      type: 'and',
      predicates: [rootPredicate, filter2predicate(currentFilterContext.filter, predicateConfig), {
        type: 'within',
        key: 'scoordinates',
        value: wkt
      }].filter(function (x) {
        return x;
      })
    };
    pointLoad({
      variables: {
        predicate: predicate
      }
    });
  }, [currentFilterContext.filterHash, rootPredicate]);
  var q = (_currentFilterContext = currentFilterContext.filter) === null || _currentFilterContext === void 0 ? void 0 : (_currentFilterContext2 = _currentFilterContext.must) === null || _currentFilterContext2 === void 0 ? void 0 : (_currentFilterContext3 = _currentFilterContext2.q) === null || _currentFilterContext3 === void 0 ? void 0 : _currentFilterContext3[0];
  var options = {
    loading: loading,
    error: error,
    total: data === null || data === void 0 ? void 0 : (_data$occurrenceSearc = data.occurrenceSearch) === null || _data$occurrenceSearc === void 0 ? void 0 : (_data$occurrenceSearc2 = _data$occurrenceSearc.documents) === null || _data$occurrenceSearc2 === void 0 ? void 0 : _data$occurrenceSearc2.total,
    query: (data === null || data === void 0 ? void 0 : (_data$occurrenceSearc3 = data.occurrenceSearch) === null || _data$occurrenceSearc3 === void 0 ? void 0 : (_data$occurrenceSearc4 = _data$occurrenceSearc3._meta) === null || _data$occurrenceSearc4 === void 0 ? void 0 : _data$occurrenceSearc4.query) || {},
    predicateHash: data === null || data === void 0 ? void 0 : (_data$occurrenceSearc5 = data.occurrenceSearch) === null || _data$occurrenceSearc5 === void 0 ? void 0 : _data$occurrenceSearc5._v1PredicateHash,
    rootPredicate: rootPredicate,
    predicateConfig: predicateConfig,
    loadPointData: loadPointData,
    registerPredicate: registerPredicate,
    pointData: pointData,
    pointLoading: pointLoading,
    pointError: pointError,
    labelMap: labelMap,
    q: q,
    defaultMapSettings: more === null || more === void 0 ? void 0 : more.mapSettings
  };

  if (typeof window !== 'undefined') {
    return react.jsx(Map$1, options);
  } else {
    return react.jsx("h1", null, "Map placeholder");
  }
}

// Better would be to calculate the available space and decide based on that since the number of 
// filters applied influence the decision. But this simple approach will perform better and is used for now.

var _ref$g = {
  name: "fks3ly",
  styles: "display:flex;flex-direction:column;@media (min-height: 700px){height:100px;flex:1 1 auto;}"
} ;

var table = function table(props) {
  return _ref$g;
};

var TablePresentation = function TablePresentation(_ref) {
  var _data$occurrenceSearc, _data$occurrenceSearc2;

  var first = _ref.first,
      prev = _ref.prev,
      next = _ref.next,
      size = _ref.size,
      from = _ref.from,
      data = _ref.data,
      total = _ref.total,
      loading = _ref.loading,
      _ref$columns = _ref.columns,
      columns = _ref$columns === void 0 ? [] : _ref$columns;

  // const [activeKey, setActiveKey] = useUrlState({ param: 'entity' });
  var _useQueryParam = useQueryParams.useQueryParam('entity', useQueryParams.NumberParam),
      _useQueryParam2 = _slicedToArray__default["default"](_useQueryParam, 2),
      activeKey = _useQueryParam2[0],
      setActiveKey = _useQueryParam2[1];

  var _useContext = React.useContext(SearchContext),
      filters = _useContext.filters,
      labelMap = _useContext.labelMap;

  var _useState = React.useState(true),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      fixedColumn = _useState2[0],
      setFixed = _useState2[1];

  var dialog = Dialog.useDialogState({
    animated: true,
    modal: false
  });
  var items = (data === null || data === void 0 ? void 0 : (_data$occurrenceSearc = data.occurrenceSearch) === null || _data$occurrenceSearc === void 0 ? void 0 : (_data$occurrenceSearc2 = _data$occurrenceSearc.documents) === null || _data$occurrenceSearc2 === void 0 ? void 0 : _data$occurrenceSearc2.results) || [];
  /*
  const {setActiveKey, activeKey} = useDetailDrawerState({name: 'entity', items});
  */

  React.useEffect(function () {
    if (activeKey) {
      dialog.show();
    } else {
      dialog.hide();
    }
  }, [activeKey]);
  reactUse.useUpdateEffect(function () {
    if (!dialog.visible) {
      setActiveKey();
    }
  }, [dialog.visible]);
  var nextItem = React.useCallback(function () {
    var activeIndex = items.findIndex(function (x) {
      return x.key === activeKey;
    });
    var next = Math.min(items.length - 1, activeIndex + 1);

    if (items[next]) {
      setActiveKey(items[next].key);
    }
  }, [activeKey, items]);
  var previousItem = React.useCallback(function () {
    var activeIndex = items.findIndex(function (x) {
      return x.key === activeKey;
    });
    var prev = Math.max(0, activeIndex - 1);

    if (items[prev]) {
      setActiveKey(items[prev].key);
    }
  }, [activeKey, items]);
  var fixed = fixedColumn; // && !dialog.visible;

  var headerss = columns.map(function (col, index) {
    var _filters$col$filterKe;

    var options = index === 0 ? {
      locked: fixed,
      toggle: function toggle() {
        return setFixed(!fixedColumn);
      }
    } : null;
    var FilterPopover = col.filterKey ? (_filters$col$filterKe = filters[col.filterKey]) === null || _filters$col$filterKe === void 0 ? void 0 : _filters$col$filterKe.Popover : null;
    return react.jsx(Th, _extends__default["default"]({
      key: col.trKey,
      width: col.width
    }, options), react.jsx(Row, {
      wrap: "nowrap"
    }, react.jsx(Col, {
      grow: false,
      style: {
        whiteSpace: 'nowrap'
      }
    }, react.jsx(reactIntl.FormattedMessage, {
      id: col.trKey
    })), FilterPopover && react.jsx(Col, null, react.jsx(FilterPopover, {
      modal: true,
      placement: "auto"
    }, react.jsx(Button, {
      appearance: "text",
      style: {
        display: 'flex'
      }
    }, react.jsx(md.MdFilterList, null))))));
  }); // const headers = [
  //   <Th key='scientificName' width='wide' locked={fixed} toggle={() => setFixed(!fixedColumn)}>
  //     <Row>
  //       <Col grow={false}>scientificName</Col>
  //       <Col>
  //         <filters.taxonKey.Popover modal placement="auto">
  //           <Button appearance="text" style={{ display: 'flex' }}>
  //             <MdFilterList />
  //             {get(currentFilterContext.filter, 'must.taxonKey.length', '')}
  //           </Button>
  //         </filters.taxonKey.Popover>
  //       </Col>
  //     </Row>
  //   </Th>,
  //   <Th key='year'>
  //     <Row wrap="nowrap">
  //       <Col grow={false}>Year</Col>
  //       <Col>
  //         <filters.year.Popover modal placement="auto">
  //           <Button appearance="text" style={{ display: 'flex' }}>
  //             <MdFilterList />
  //           </Button>
  //         </filters.year.Popover>
  //       </Col>
  //     </Row>
  //   </Th>,
  //   <Th key='basisOfRecord' width='wide'>
  //     <Row>
  //       <Col grow={false}>Basis of record</Col>
  //       <Col>
  //         <filters.basisOfRecord.Popover modal placement="auto">
  //           <Button appearance="text" style={{ display: 'flex' }}>
  //             <MdFilterList />
  //           </Button>
  //         </filters.basisOfRecord.Popover>
  //       </Col>
  //     </Row>
  //   </Th>,
  //   <Th key='datasetTitle' width='wide'>
  //     <Row>
  //       <Col grow={false}>Dataset</Col>
  //       <Col>
  //         <filters.datasetKey.Popover modal placement="auto">
  //           <Button appearance="text" style={{ display: 'flex' }}>
  //             <MdFilterList />
  //           </Button>
  //         </filters.datasetKey.Popover>
  //       </Col>
  //     </Row>
  //   </Th>,
  //   <Th key='publisherTitle' width='wide'>
  //     <Row>
  //       <Col grow={false}>Publisher</Col>
  //       <Col>
  //         <filters.publisherKey.Popover modal placement="auto">
  //           <Button appearance="text" style={{ display: 'flex' }}>
  //             <MdFilterList />
  //           </Button>
  //         </filters.publisherKey.Popover>
  //       </Col>
  //     </Row>
  //   </Th>,
  //   <Th key='countryCode'>
  //     countryCode
  //   </Th>,
  //   <Th key='gbifTaxonRank'>
  //     rank
  //   </Th>
  // ];

  return react.jsx(React__default["default"].Fragment, null, dialog.visible && react.jsx(DetailsDrawer, {
    href: "https://www.gbif.org/occurrence/".concat(activeKey),
    dialog: dialog,
    nextItem: nextItem,
    previousItem: previousItem
  }, react.jsx(OccurrenceSidebar, {
    id: activeKey,
    defaultTab: "details",
    style: {
      maxWidth: '100%',
      width: 700,
      height: '100%'
    },
    onCloseRequest: function onCloseRequest() {
      return dialog.setVisible(false);
    }
  })), react.jsx("div", {
    style: {
      flex: "1 1 100%",
      display: "flex",
      height: "100%",
      maxHeight: "100vh",
      flexDirection: "column"
    }
  }, react.jsx(ViewHeader, {
    loading: loading,
    total: total
  }), react.jsx(DataTable, {
    fixedColumn: fixed,
    first: first,
    prev: prev,
    next: next,
    size: size,
    from: from,
    total: total,
    loading: loading,
    css: table()
  }, react.jsx("thead", null, react.jsx("tr", null, headerss)), react.jsx(TBody, {
    rowCount: size,
    columnCount: 7,
    loading: loading
  }, getRows$2({
    columns: columns,
    labelMap: labelMap,
    data: data,
    setActiveKey: setActiveKey,
    dialog: dialog
  })))));
};

var getRows$2 = function getRows(_ref2) {
  var _data$occurrenceSearc3, _data$occurrenceSearc4;

  var columns = _ref2.columns,
      labelMap = _ref2.labelMap,
      data = _ref2.data,
      setActiveKey = _ref2.setActiveKey;
      _ref2.dialog;
  var results = (data === null || data === void 0 ? void 0 : (_data$occurrenceSearc3 = data.occurrenceSearch) === null || _data$occurrenceSearc3 === void 0 ? void 0 : (_data$occurrenceSearc4 = _data$occurrenceSearc3.documents) === null || _data$occurrenceSearc4 === void 0 ? void 0 : _data$occurrenceSearc4.results) || [];
  var rows = results.map(function (row, index) {
    var cells = columns.map(function (field, i) {
      // const FormatedName = formatters(field).component;
      // const Presentation = <FormatedName id={row._source[field]} />;
      // if (i === 0) return <Td key={field}><Action onSelect={() => console.log(row._id)}>{Presentation}</Action></Td>;
      // else return <Td key={field}>{Presentation}</Td>;
      var val = get_1(row, field.value.key);
      var formattedVal = val;

      if (field.value.formatter) {
        formattedVal = field.value.formatter(val, row);
      } else if (field.value.labelHandle) {
        var Label = labelMap[field.value.labelHandle];
        formattedVal = react.jsx(Label, {
          id: val
        });
      }

      return react.jsx(Td, {
        key: field.trKey,
        noWrap: field.noWrap
      }, formattedVal); // if (i === 0) {
      //   return <Td key={field}>
      //     <TextButton onClick={() => console.log(row)}>{val}</TextButton>
      //   </Td>
      // } else {
      //   return <Td key={field}>{val}</Td>;
      // }
    });
    return react.jsx("tr", {
      key: row.key,
      onClick: function onClick() {
        setActiveKey(row.key);
      }
    }, cells);
  });
  return rows;
};

/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */

function arrayAggregator$1(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }
  return accumulator;
}

var _arrayAggregator = arrayAggregator$1;

var baseFor = _baseFor,
    keys = keys_1;

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn$1(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

var _baseForOwn = baseForOwn$1;

var isArrayLike$1 = isArrayLike_1;

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach$1(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike$1(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

var _createBaseEach = createBaseEach$1;

var baseForOwn = _baseForOwn,
    createBaseEach = _createBaseEach;

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach$2 = createBaseEach(baseForOwn);

var _baseEach = baseEach$2;

var baseEach$1 = _baseEach;

/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function baseAggregator$1(collection, setter, iteratee, accumulator) {
  baseEach$1(collection, function(value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

var _baseAggregator = baseAggregator$1;

var arrayAggregator = _arrayAggregator,
    baseAggregator = _baseAggregator,
    baseIteratee$2 = _baseIteratee,
    isArray$2 = isArray_1;

/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator$1(setter, initializer) {
  return function(collection, iteratee) {
    var func = isArray$2(collection) ? arrayAggregator : baseAggregator,
        accumulator = initializer ? initializer() : {};

    return func(collection, setter, baseIteratee$2(iteratee), accumulator);
  };
}

var _createAggregator = createAggregator$1;

var baseAssignValue = _baseAssignValue,
    createAggregator = _createAggregator;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the last element responsible for generating the key. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * var array = [
 *   { 'dir': 'left', 'code': 97 },
 *   { 'dir': 'right', 'code': 100 }
 * ];
 *
 * _.keyBy(array, function(o) {
 *   return String.fromCharCode(o.code);
 * });
 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
 *
 * _.keyBy(array, 'dir');
 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
 */
var keyBy = createAggregator(function(result, value, key) {
  baseAssignValue(result, key, value);
});

var keyBy_1 = keyBy;

var OCCURRENCE_TABLE = "\nquery table($predicate: Predicate, $size: Int = 20, $from: Int = 0){\n  occurrenceSearch(predicate: $predicate, size: $size, from: $from) {\n    documents(size: $size, from: $from) {\n      total\n      size\n      from\n      results {\n        key\n        gbifClassification{\n          usage {\n            rank\n            formattedName\n          }\n        }\n        year\n\t\t\t\tbasisOfRecord\n        datasetTitle\n        publisherTitle\n        countryCode\n        formattedCoordinates\n        catalogNumber\n        recordedBy\n        identifiedBy\n        recordNumber\n        preparations\n        institutionCode\n        collectionCode\n        locality\n\n        stillImageCount\n        movingImageCount\n        soundCount\n        typeStatus\n        issues\n        \n        volatile {\n          features {\n            isTreament\n            isSequenced\n            isClustered\n            isSamplingEvent\n          }\n        }\n      }\n    }\n  }\n}\n";

function Table$6() {
  var _data$occurrenceSearc, _data$occurrenceSearc2;

  var _useQueryParam = useQueryParams.useQueryParam('from', useQueryParams.NumberParam),
      _useQueryParam2 = _slicedToArray__default["default"](_useQueryParam, 2),
      _useQueryParam2$ = _useQueryParam2[0],
      from = _useQueryParam2$ === void 0 ? 0 : _useQueryParam2$,
      setFrom = _useQueryParam2[1];

  var _useState = React.useState([]),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      columns = _useState2[0],
      setColumns = _useState2[1];

  var size = 50;
  var currentFilterContext = React.useContext(FilterContext);

  var _useContext = React.useContext(SearchContext),
      rootPredicate = _useContext.rootPredicate,
      predicateConfig = _useContext.predicateConfig,
      tableConfig = _useContext.tableConfig,
      defaultTableColumns = _useContext.defaultTableColumns;

  var _useQuery = useQuery(OCCURRENCE_TABLE, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      loading = _useQuery.loading,
      load = _useQuery.load;

  React.useEffect(function () {
    var predicate = {
      type: 'and',
      predicates: [rootPredicate, filter2predicate(currentFilterContext.filter, predicateConfig)].filter(function (x) {
        return x;
      })
    };
    load({
      keepDataWhileLoading: true,
      variables: {
        predicate: predicate,
        size: size,
        from: from
      }
    });
  }, [currentFilterContext.filterHash, rootPredicate, from]);
  React.useEffect(function () {
    return function cleanup() {
      setFrom();
    };
  }, []); // https://stackoverflow.com/questions/55075604/react-hooks-useeffect-only-on-update

  reactUse.useUpdateEffect(function () {// if (from !== 0) setFrom(0);
  }, [currentFilterContext.filterHash]);
  var next = React.useCallback(function () {
    setFrom(Math.max(0, from + size));
  });
  var prev = React.useCallback(function () {
    setFrom(Math.max(0, from - size));
  });
  var first = React.useCallback(function () {
    setFrom(0);
  });
  React.useEffect(function () {
    var cols = ['scientificName'].concat(_toConsumableArray__default["default"](defaultTableColumns || tableConfig.defaultColumns));
    var colMap = keyBy_1(tableConfig.columns, 'name');
    var activeCols = cols.map(function (name) {
      return colMap[name];
    }).filter(function (x) {
      return x;
    });
    setColumns(activeCols);
  }, [tableConfig, defaultTableColumns]);
  return react.jsx(React__default["default"].Fragment, null, react.jsx(TablePresentation, {
    loading: loading,
    data: data,
    next: next,
    prev: prev,
    first: first,
    size: size,
    from: from,
    total: data === null || data === void 0 ? void 0 : (_data$occurrenceSearc = data.occurrenceSearch) === null || _data$occurrenceSearc === void 0 ? void 0 : (_data$occurrenceSearc2 = _data$occurrenceSearc.documents) === null || _data$occurrenceSearc2 === void 0 ? void 0 : _data$occurrenceSearc2.total,
    columns: columns
  }));
}

var paper$5 = function paper(_ref2) {
  var theme = _ref2.theme;
  return /*#__PURE__*/react.css("background:", theme.paperBackground500, ";border:1px solid ", theme.paperBorderColor, ";border-radius:", theme.borderRadius, "px;padding:12px;" + ("" ), "" );
};

var _ref$f = {
  name: "pjnpkg",
  styles: "height:100%;min-height:150px;min-width:100px"
} ;

var more = function more(_ref3) {
  _ref3.theme;
  return _ref$f;
};
var features = function features(_ref4) {
  var theme = _ref4.theme;
  return /*#__PURE__*/react.css("font-size:11px;color:", theme.color500, ";" + ("" ), "" );
};

var GalleryPresentation = function GalleryPresentation(_ref) {
  _ref.first;
      _ref.prev;
      var next = _ref.next,
      size = _ref.size,
      from = _ref.from,
      data = _ref.data,
      total = _ref.total,
      loading = _ref.loading,
      error = _ref.error;
  var theme = React.useContext(ThemeContext);

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      activeId = _useState2[0],
      setActive = _useState2[1];

  var _useState3 = React.useState(),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      activeItem = _useState4[0],
      setActiveItem = _useState4[1];

  var dialog = Dialog.useDialogState({
    animated: true,
    modal: false
  });
  var items = data;
  React.useEffect(function () {
    setActiveItem(items[activeId]);
  }, [activeId, items]);
  var nextItem = React.useCallback(function () {
    setActive(Math.min(items.length - 1, activeId + 1));
  }, [items, activeId]);
  var previousItem = React.useCallback(function () {
    setActive(Math.max(0, activeId - 1));
  }, [activeId]);
  if (total === 0) return react.jsx("div", null, react.jsx("h2", null, "No content"), error && react.jsx("p", null, "Backend failure"));
  //   return Array(size).fill().map((e, i) => <GalleryTileSkeleton key={i} />)
  // }

  if (error && !total) {
    return react.jsx("h2", null, "Error");
  }

  return react.jsx(React__default["default"].Fragment, null, react.jsx(DetailsDrawer, {
    href: "https://www.gbif.org/occurrence/".concat(activeItem === null || activeItem === void 0 ? void 0 : activeItem.key),
    dialog: dialog,
    nextItem: nextItem,
    previousItem: previousItem
  }, react.jsx(OccurrenceSidebar, {
    id: activeItem === null || activeItem === void 0 ? void 0 : activeItem.key,
    defaultTab: "images",
    style: {
      maxWidth: '100%',
      width: 700,
      height: '100%'
    },
    onCloseRequest: function onCloseRequest() {
      return dialog.setVisible(false);
    }
  })), react.jsx(ViewHeader, {
    message: "counts.nResultsWithImages",
    loading: loading,
    total: total
  }), react.jsx("div", {
    css: paper$5({
      theme: theme
    })
  }, react.jsx(GalleryTiles, null, items.map(function (item, index) {
    return react.jsx(GalleryTile, {
      height: 150,
      key: item.key,
      minWidth: 100,
      src: item.primaryImage.identifier,
      onSelect: function onSelect() {
        setActive(index);
        dialog.show();
      }
    }, react.jsx(GalleryCaption, null, react.jsx("div", {
      style: {
        marginBottom: 2
      },
      dangerouslySetInnerHTML: {
        __html: item.gbifClassification.usage.formattedName
      }
    }), react.jsx(IconFeatures, {
      css: features({
        theme: theme
      }),
      typeStatus: item.typeStatus,
      basisOfRecord: item.basisOfRecord,
      eventDate: item.eventDate,
      isSequenced: item["volatile"].features.isSequenced,
      isTreament: item["volatile"].features.isTreament,
      isClustered: item["volatile"].features.isClustered,
      isSamplingEvent: item["volatile"].features.isSamplingEvent // formattedCoordinates={item.formattedCoordinates} 
      ,
      countryCode: item.countryCode // locality={item.locality}

    })));
  }), loading ? Array(size).fill().map(function (e, i) {
    return react.jsx(GalleryTileSkeleton, {
      key: i
    });
  }) : null, react.jsx("div", null, from + size < total && !loading && react.jsx(Button, {
    css: more({
      theme: theme
    }),
    appearance: "outline",
    onClick: next
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "search.loadMore",
    defaultMessage: "Load more"
  }))))));
};

var OCCURRENCE_GALLERY = "\nquery gallery($predicate: Predicate, $size: Int = 20, $from: Int = 0){\n  occurrenceSearch(predicate: $predicate, size: $size, from: $from) {\n    documents(size: $size, from: $from) {\n      total\n      size\n      from\n      results {\n        key\n        countryCode\n        locality\n        basisOfRecord\n        typeStatus\n        eventDate\n        gbifClassification{\n          usage {\n            formattedName\n          }\n        }\n        primaryImage {\n          identifier\n        }\n        formattedCoordinates\n        volatile {\n          features {\n            isSpecimen\n            isTreament\n            isSequenced\n            isClustered\n            isSamplingEvent\n          }\n        }\n      }\n    }\n  }\n}\n";

function Table$5() {
  var _data$occurrenceSearc3, _data$occurrenceSearc4;

  var _useState = React.useState(0),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      from = _useState2[0],
      setFrom = _useState2[1];

  var size = 50;
  var currentFilterContext = React.useContext(FilterContext);

  var _useContext = React.useContext(SearchContext),
      rootPredicate = _useContext.rootPredicate,
      predicateConfig = _useContext.predicateConfig;

  var _useQuery = useQuery(OCCURRENCE_GALLERY, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var _useState3 = React.useState([]),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      allData = _useState4[0],
      setAllData = _useState4[1];

  React.useEffect(function () {
    var _data$occurrenceSearc, _data$occurrenceSearc2;

    setAllData([].concat(_toConsumableArray__default["default"](allData), _toConsumableArray__default["default"]((data === null || data === void 0 ? void 0 : (_data$occurrenceSearc = data.occurrenceSearch) === null || _data$occurrenceSearc === void 0 ? void 0 : (_data$occurrenceSearc2 = _data$occurrenceSearc.documents) === null || _data$occurrenceSearc2 === void 0 ? void 0 : _data$occurrenceSearc2.results) || [])));
  }, [data]);
  React.useEffect(function () {
    var predicate = {
      type: 'and',
      predicates: [rootPredicate, filter2predicate(currentFilterContext.filter, predicateConfig), {
        type: 'equals',
        key: 'mediaType',
        value: 'StillImage'
      }].filter(function (x) {
        return x;
      })
    };
    load({
      keepDataWhileLoading: true,
      variables: {
        predicate: predicate,
        size: size,
        from: from
      }
    });
  }, [from, currentFilterContext.filterHash, rootPredicate]);
  React.useEffect(function () {
    setFrom(0);
    setAllData([]);
  }, [currentFilterContext.filterHash, rootPredicate]);
  var next = React.useCallback(function () {
    setFrom(Math.max(0, from + size));
  });
  var prev = React.useCallback(function () {
    setFrom(Math.max(0, from - size));
  });
  var first = React.useCallback(function () {
    setFrom(0);
  });
  return react.jsx(React__default["default"].Fragment, null, react.jsx(GalleryPresentation, {
    error: error,
    loading: loading,
    data: allData,
    total: data === null || data === void 0 ? void 0 : (_data$occurrenceSearc3 = data.occurrenceSearch) === null || _data$occurrenceSearc3 === void 0 ? void 0 : (_data$occurrenceSearc4 = _data$occurrenceSearc3.documents) === null || _data$occurrenceSearc4 === void 0 ? void 0 : _data$occurrenceSearc4.total,
    next: next,
    prev: prev,
    first: first,
    size: size,
    from: from
  }));
}

var _ref2$9 = {
  name: "mqzxz1",
  styles: "background:white;border:1px solid #eee;border-radius:3px"
} ;

var paper$4 = function paper(_ref3) {
  _ref3.theme;
  return _ref2$9;
};
var dataset = function dataset(_ref4) {
  var theme = _ref4.theme;
  return /*#__PURE__*/react.css(paper$4({
    theme: theme
  }), " position:relative;padding:10px 20px;font-size:14px;margin-bottom:8px;" + ("" ), "" );
};
var actionOverlay = function actionOverlay(_ref5) {
  _ref5.theme;
  return /*#__PURE__*/react.css("position:absolute;bottom:0;left:0;right:0;top:0;", focusStyle(), ";" + ("" ), "" );
};

var _ref$e = {
  name: "1t6lby3",
  styles: "display:flex;flex-direction:row;align-items:center;margin:5px 0;span{font-size:80%;color:#999;}"
} ;

var title$1 = function title(_ref6) {
  _ref6.theme;
  return _ref$e;
};

var _excluded$Y = ["largest", "item", "indicator", "theme", "setActive", "index", "dialog"];
var DatasetsPresentation = function DatasetsPresentation(_ref) {
  var _data$occurrenceSearc, _data$occurrenceSearc2, _data$occurrenceSearc3, _data$occurrenceSearc4, _activeItem$dataset, _activeItem$dataset2;

  _ref.more;
      _ref.size;
      var data = _ref.data;
      _ref.total;
      var loading = _ref.loading;

  var _useContext = React.useContext(SearchContext);
      _useContext.labelMap;

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      activeId = _useState2[0],
      setActive = _useState2[1];

  var _useState3 = React.useState(),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      activeItem = _useState4[0],
      setActiveItem = _useState4[1];

  var dialog = Dialog.useDialogState({
    animated: true,
    modal: false
  });
  var items = (data === null || data === void 0 ? void 0 : (_data$occurrenceSearc = data.occurrenceSearch) === null || _data$occurrenceSearc === void 0 ? void 0 : (_data$occurrenceSearc2 = _data$occurrenceSearc.facet) === null || _data$occurrenceSearc2 === void 0 ? void 0 : _data$occurrenceSearc2.datasetKey) || [];
  var cardinality = data === null || data === void 0 ? void 0 : (_data$occurrenceSearc3 = data.occurrenceSearch) === null || _data$occurrenceSearc3 === void 0 ? void 0 : (_data$occurrenceSearc4 = _data$occurrenceSearc3.cardinality) === null || _data$occurrenceSearc4 === void 0 ? void 0 : _data$occurrenceSearc4.datasetKey;
  React.useEffect(function () {
    setActiveItem(items[activeId]);
  }, [activeId, items]);
  var nextItem = React.useCallback(function () {
    setActive(Math.min(items.length - 1, activeId + 1));
  }, [items, activeId]);
  var previousItem = React.useCallback(function () {
    setActive(Math.max(0, activeId - 1));
  }, [activeId]);
  return react.jsx(React__default["default"].Fragment, null, react.jsx(DetailsDrawer, {
    href: "https://www.gbif.org/dataset/".concat(activeItem === null || activeItem === void 0 ? void 0 : (_activeItem$dataset = activeItem.dataset) === null || _activeItem$dataset === void 0 ? void 0 : _activeItem$dataset.key),
    dialog: dialog,
    nextItem: nextItem,
    previousItem: previousItem
  }, react.jsx(DatasetSidebar, {
    id: activeItem === null || activeItem === void 0 ? void 0 : (_activeItem$dataset2 = activeItem.dataset) === null || _activeItem$dataset2 === void 0 ? void 0 : _activeItem$dataset2.key,
    defaultTab: "details",
    style: {
      maxWidth: '100%',
      width: 700,
      height: '100%'
    },
    onCloseRequest: function onCloseRequest() {
      return dialog.setVisible(false);
    }
  })), react.jsx("div", null, react.jsx(ViewHeader, {
    loading: loading,
    total: cardinality
  }), react.jsx("div", null, react.jsx("ul", {
    style: {
      padding: 0,
      margin: 0
    }
  }, items.length > 0 && items.map(function (item, index) {
    return react.jsx("li", null, react.jsx(DatasetResult, {
      setActive: setActive,
      index: index,
      dialog: dialog,
      key: item.key,
      item: item,
      largest: items[0].count
    }));
  })))));
};

function DatasetResult(_ref2) {
  var largest = _ref2.largest,
      item = _ref2.item;
      _ref2.indicator;
      var theme = _ref2.theme,
      setActive = _ref2.setActive,
      index = _ref2.index,
      dialog = _ref2.dialog;
      _objectWithoutProperties__default["default"](_ref2, _excluded$Y);

  return react.jsx("div", {
    css: dataset({
      theme: theme
    })
  }, react.jsx("a", {
    css: actionOverlay({
      theme: theme
    }),
    href: "https://www.gbif.org/dataset/".concat(item.dataset.key),
    onClick: function onClick(event) {
      if (event.ctrlKey || event.shiftKey || event.metaKey || // apple
      event.button && event.button == 1 // middle click, >IE9 + everyone else
      ) {
        return;
      } else {
        setActive(index);
        dialog.show();
        event.preventDefault();
      }
    }
  }), react.jsx("div", {
    css: title$1({
      theme: theme
    })
  }, react.jsx("div", {
    style: {
      flex: '1 1 auto'
    }
  }, item.dataset.title), react.jsx("span", null, react.jsx(reactIntl.FormattedNumber, {
    value: item.count
  }))), react.jsx(Progress, {
    percent: 100 * item.count / largest
  }));
} // function getIndicatorValues(values) {
//   const min = Math.min(...values);
//   const max = Math.max(...values);
//   const logMin = Math.log(min);
//   const logMax = Math.log(max);
//   const logStart = Math.max(0, Math.floor(logMin));
//   return values.map(x => x === 0 
//     ? 0 
//     : 100 * (Math.log(x) - logStart) / (logMax - logStart)
//     );
// }

var DATASETS = "\nquery table($predicate: Predicate, $size: Int = 100){\n  occurrenceSearch(predicate: $predicate, size: 0, from: 0) {\n    cardinality {\n      datasetKey\n    }\n    facet {\n      datasetKey(size: $size) {\n        count\n        dataset {\n          key\n          title\n          description\n          license\n        }\n      }\n    }\n  }\n}\n";

function Datasets() {
  var _useState = React.useState(200),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];

  var currentFilterContext = React.useContext(FilterContext);

  var _useContext = React.useContext(SearchContext),
      rootPredicate = _useContext.rootPredicate,
      predicateConfig = _useContext.predicateConfig;

  var _useQuery = useQuery(DATASETS, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      loading = _useQuery.loading,
      load = _useQuery.load;

  React.useEffect(function () {
    var predicate = {
      type: 'and',
      predicates: [rootPredicate, filter2predicate(currentFilterContext.filter, predicateConfig)].filter(function (x) {
        return x;
      })
    };
    load({
      keepDataWhileLoading: true,
      variables: {
        predicate: predicate,
        size: size
      }
    });
  }, [currentFilterContext.filterHash, rootPredicate]);
  React.useEffect(function () {
    setSize(100);
  }, [currentFilterContext.filterHash]);
  var more = React.useCallback(function () {
    setSize(size + 100);
  });
  return react.jsx(React__default["default"].Fragment, null, react.jsx(DatasetsPresentation, {
    loading: loading,
    data: data,
    more: more,
    size: size
  }));
}

var _ref3$6 = {
  name: "p8m6wo",
  styles: "background:white;padding:24px;border-radius:8px;max-width:100%;width:300px;text-align:center"
} ;

var card$1 = function card(_ref4) {
  _extends__default["default"]({}, _ref4);

  return _ref3$6;
};

var _ref2$8 = {
  name: "1ee42c1",
  styles: "margin:12px 0"
} ;

var title = function title(_ref5) {
  _extends__default["default"]({}, _ref5);

  return _ref2$8;
};

var _ref$d = {
  name: "1uto9dc",
  styles: "color:#888;font-size:14px;margin:12px 0 24px 0;p{margin-bottom:12px;}"
} ;

var description = function description(_ref6) {
  _extends__default["default"]({}, _ref6);

  return _ref$d;
};
var icon = {
  name: "1i83uzg",
  styles: "width:50px;height:50px;margin:0 auto 12px auto;display:block;border:2px solid #cecfd8;color:#cecfd8;border-radius:50%;display:flex;justify-content:center;align-items:center;svg{height:40px;width:40px;}"
} ;

var DOWNLOAD = "\nquery($predicate: Predicate){\n  occurrenceSearch(predicate: $predicate, size: 0) {\n    _downloadPredicate\n  }\n}\n";

function Download() {
  var _localeSettings$local, _data$occurrenceSearc, _data$occurrenceSearc2, _data$occurrenceSearc3, _data$occurrenceSearc4, _currentFilterContext, _currentFilterContext2;

  var theme = React.useContext(ThemeContext);
  var localeSettings = React.useContext(LocaleContext);
  var currentFilterContext = React.useContext(FilterContext);

  var _useContext = React.useContext(SearchContext),
      rootPredicate = _useContext.rootPredicate,
      predicateConfig = _useContext.predicateConfig;

  var _useQuery = useQuery(DOWNLOAD, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var localePrefix = localeSettings === null || localeSettings === void 0 ? void 0 : (_localeSettings$local = localeSettings.localeMap) === null || _localeSettings$local === void 0 ? void 0 : _localeSettings$local.gbif_org;
  React.useEffect(function () {
    var predicate = {
      type: 'and',
      predicates: [rootPredicate, filter2predicate(currentFilterContext.filter, predicateConfig)].filter(function (x) {
        return x;
      })
    };
    load({
      keepDataWhileLoading: true,
      variables: {
        predicate: predicate
      }
    });
  }, [currentFilterContext.filterHash, rootPredicate]);
  var fullPredicate = data === null || data === void 0 ? void 0 : (_data$occurrenceSearc = data.occurrenceSearch) === null || _data$occurrenceSearc === void 0 ? void 0 : (_data$occurrenceSearc2 = _data$occurrenceSearc._downloadPredicate) === null || _data$occurrenceSearc2 === void 0 ? void 0 : _data$occurrenceSearc2.predicate;
  var err = data === null || data === void 0 ? void 0 : (_data$occurrenceSearc3 = data.occurrenceSearch) === null || _data$occurrenceSearc3 === void 0 ? void 0 : (_data$occurrenceSearc4 = _data$occurrenceSearc3._downloadPredicate) === null || _data$occurrenceSearc4 === void 0 ? void 0 : _data$occurrenceSearc4.err;
  var q = currentFilterContext === null || currentFilterContext === void 0 ? void 0 : (_currentFilterContext = currentFilterContext.filter) === null || _currentFilterContext === void 0 ? void 0 : (_currentFilterContext2 = _currentFilterContext.must) === null || _currentFilterContext2 === void 0 ? void 0 : _currentFilterContext2.q;
  var hasFreeTextSearch = q && q.length > 0;
  return react.jsx("div", {
    css: card$1({
      theme: theme
    }),
    style: {
      margin: '24px auto'
    }
  }, react.jsx("div", {
    css: icon
  }, react.jsx(md.MdFileDownload, null)), hasFreeTextSearch && react.jsx(React__default["default"].Fragment, null, react.jsx("h4", {
    css: title({
      theme: theme
    })
  }, react.jsx(Message, {
    id: "download.unsupported.title"
  })), react.jsx("div", {
    css: description({
      theme: theme
    })
  }, react.jsx(Message, {
    id: "download.unsupported.description"
  })), react.jsx(Button, {
    disabled: loading,
    onClick: function onClick(e) {
      return currentFilterContext.setField('q');
    },
    appearance: "primaryOutline"
  }, react.jsx(Message, {
    id: "download.unsupported.remove"
  }))), !hasFreeTextSearch && react.jsx(React__default["default"].Fragment, null, err && react.jsx(React__default["default"].Fragment, null, react.jsx("h4", {
    css: title({
      theme: theme
    })
  }, react.jsx(Message, {
    id: "download.unsupported.title"
  })), react.jsx("div", {
    css: description({
      theme: theme
    })
  }, react.jsx("p", null, react.jsx(Message, {
    id: "download.unsupported.error"
  })), err.message)), !err && fullPredicate && react.jsx(React__default["default"].Fragment, null, react.jsx("h4", {
    css: title({
      theme: theme
    })
  }, react.jsx(Message, {
    id: "download.download"
  })), react.jsx("div", {
    css: description({
      theme: theme
    })
  }, react.jsx(Message, {
    allowNewLines: true,
    id: "download.redirectNotice",
    values: {
      p: function p(chunks) {
        return react.jsx("p", null, chunks);
      },
      br: function br(chunks) {
        return react.jsx(React__default["default"].Fragment, null, react.jsx("br", null), chunks);
      },
      icon: react.jsx("svg", null)
    }
  })), react.jsx(Button, {
    as: "a",
    href: "".concat(env.GBIF_ORG, "/").concat(localePrefix ? "".concat(localePrefix, "/") : '', "occurrence/download/request?predicate=").concat(encodeURIComponent(JSON.stringify(fullPredicate)), "#create"),
    disabled: loading,
    appearance: "primary"
  }, react.jsx(Message, {
    id: "download.continueToGBIF"
  })))));
}

var Symbol = _Symbol,
    isArguments = isArguments_1,
    isArray$1 = isArray_1;

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable$1(value) {
  return isArray$1(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

var _isFlattenable = isFlattenable$1;

var arrayPush = _arrayPush,
    isFlattenable = _isFlattenable;

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten$4(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten$4(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

var _baseFlatten = baseFlatten$4;

var baseFlatten$3 = _baseFlatten,
    baseRest$3 = _baseRest,
    baseUniq$1 = _baseUniq,
    isArrayLikeObject$2 = isArrayLikeObject_1;

/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */
var union = baseRest$3(function(arrays) {
  return baseUniq$1(baseFlatten$3(arrays, 1, isArrayLikeObject$2, true));
});

var union_1 = union;

var _excluded$X = ["content", "placement", "modal", "children", "className", "style"];

function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$e(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Popover$8(_ref) {
  var content = _ref.content,
      placement = _ref.placement,
      modal = _ref.modal,
      children = _ref.children,
      className = _ref.className,
      style = _ref.style;
      _objectWithoutProperties__default["default"](_ref, _excluded$X);

  var _React$useState = React__default["default"].useState(nanoid.nanoid),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 1),
      labelledById = _React$useState2[0];

  var currentFilterContext = React.useContext(FilterContext);

  var _useState = React.useState(currentFilterContext.filter),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      tmpFilter = _useState2[0],
      setFilter = _useState2[1];

  var child = React__default["default"].Children.only(children);
  React.useEffect(function () {
    setFilter(currentFilterContext.filter);
  }, [currentFilterContext.filter]);
  var onApply = React.useCallback(function (_ref2) {
    var filter = _ref2.filter,
        hide = _ref2.hide;
    currentFilterContext.setFilter(filter);
    hide();
  }, [currentFilterContext]);
  var onCancel = React.useCallback(function (_ref3) {
    var hide = _ref3.hide;
    hide();
  }, []);
  var onFilterChange = React.useCallback(function (filter) {
    setFilter(filter);
  }, []);
  return react.jsx(Popover$9, {
    onClickOutside: function onClickOutside(popover) {
      currentFilterContext.setFilter(tmpFilter);
      popover.hide();
    },
    style: _objectSpread$e({
      width: '22em',
      maxWidth: '100%'
    }, style),
    "aria-labelledby": labelledById,
    placement: placement,
    trigger: child,
    modal: modal,
    className: className
  }, /*#__PURE__*/React__default["default"].cloneElement(content, {
    onApply: onApply,
    onCancel: onCancel,
    onFilterChange: onFilterChange,
    labelledById: labelledById,
    initFilter: currentFilterContext.filter
  }));
}

var _excluded$W = ["children", "menuItems", "labelledById"];

var Header = function Header(_ref) {
  var children = _ref.children,
      menuItems = _ref.menuItems,
      labelledById = _ref.labelledById,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$W);

  var theme = React.useContext(ThemeContext);
  return react.jsx(Row, _extends__default["default"]({
    as: "section"
  }, props, {
    css: header({
      theme: theme
    }),
    alignItems: "center"
  }), react.jsx(Col, {
    "aria-labelledby": labelledById
  }, children), menuItems && react.jsx(Col, {
    grow: false
  }, react.jsx(Menu, {
    "aria-label": "Custom menu",
    trigger: react.jsx(Button, {
      appearance: "text"
    }, react.jsx(md.MdMoreVert, {
      style: {
        fontSize: 24,
        color: theme.color800
      }
    })),
    items: menuItems
  })));
};

var header = function header(_ref2) {
  var theme = _ref2.theme;
  return /*#__PURE__*/react.css("border-bottom:1px solid ", theme.paperBorderColor, ";padding:1.2em 1.5em;flex:0 0 auto;" + ("" ), "" );
};

var _excluded$V = ["onApply", "onCancel", "onBack", "showBack", "formId"];

var Footer = function Footer(_ref2) {
  var onApply = _ref2.onApply,
      onCancel = _ref2.onCancel,
      onBack = _ref2.onBack,
      _ref2$showBack = _ref2.showBack,
      showBack = _ref2$showBack === void 0 ? false : _ref2$showBack,
      formId = _ref2.formId,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded$V);

  React.useContext(ThemeContext);
  return react.jsx(Row, _extends__default["default"]({}, props, {
    css: footer()
  }), react.jsx(Col, null, showBack && react.jsx(Button, {
    appearance: "ghost",
    onClick: onBack
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "filterSupport.back"
  })), !showBack && react.jsx(Button, {
    appearance: "ghost",
    onClick: onCancel
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "filterSupport.cancel"
  }))), react.jsx(Col, {
    grow: false
  }, !showBack && react.jsx(Button, {
    type: "submit",
    form: formId,
    onClick: onApply
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "filterSupport.apply"
  }))));
};

var _ref$c = {
  name: "1qq5h8y",
  styles: "padding:.8em 1em;flex:0 0 auto"
} ;

var footer = function footer(theme) {
  return _ref$c;
};

function FilterBox(props) {
  var theme = React.useContext(ThemeContext);
  return react.jsx("div", _extends__default["default"]({}, props, {
    css: /*#__PURE__*/react.css("display:flex;flex-direction:column;max-height:inherit;background:", theme.paperBackground200, ";" + ("" ), "" )
  }));
} // https://stackoverflow.com/questions/9333379/check-if-an-elements-content-is-overflowing
// I would never have thought of this myself.

var scrollBox = function scrollBox(_ref2) {
  var theme = _ref2.theme;
  return /*#__PURE__*/react.css("background:linear-gradient(", theme.paperBackground500, " 30%, ", theme.paperBackground500, "00),linear-gradient(", theme.paperBackground500, "00, ", theme.paperBackground500, " 70%) 0 100%,linear-gradient(to bottom, ", theme.paperBorderColor, " 1px, transparent 1px 100%),linear-gradient(to bottom, transparent calc(100% - 1px), ", theme.paperBorderColor, " calc(100% - 1px) 100%);background-repeat:no-repeat;background-color:", theme.paperBackground500, ";background-size:100% 10px,100% 10px,100% 20px,100% 100%;background-attachment:local,local,scroll,scroll;" + ("" ), "" );
};
function FilterBody(props) {
  var theme = React.useContext(ThemeContext);
  return react.jsx("div", _extends__default["default"]({}, props, {
    css: /*#__PURE__*/react.css(scrollBox({
      theme: theme
    }), "padding:.5em 1.5em;flex:1 1 auto;overflow:auto;scrollbar-width:thin;max-height:350px;", styledScrollBars({
      theme: theme
    }), ";" + ("" ), "" )
  }));
}

var _ref$b = {
  name: "13wbhe6",
  styles: "padding-top:20px;padding-bottom:20px"
} ;

function FilterBodyDescription(props) {
  return react.jsx(FilterBody, _extends__default["default"]({}, props, {
    css: _ref$b
  }));
}
//   padding-top: 20px;
//   padding-bottom: 20px;
// `;

function Filter(_ref) {
  var children = _ref.children,
      title = _ref.title,
      aboutText = _ref.aboutText,
      labelledById = _ref.labelledById,
      hasHelpTexts = _ref.hasHelpTexts,
      supportsExist = _ref.supportsExist,
      filterName = _ref.filterName,
      formId = _ref.formId,
      tmpFilter = _ref.filter,
      onFilterChange = _ref.onFilterChange,
      aboutVisible = _ref.aboutVisible,
      onAboutChange = _ref.onAboutChange,
      helpVisible = _ref.helpVisible,
      onHelpChange = _ref.onHelpChange,
      isExistenceFilter = _ref.isExistenceFilter,
      onExistenceChange = _ref.onExistenceChange,
      isNegated = _ref.isNegated,
      style = _ref.style;
  var type = isNegated ? 'must_not' : 'must'; //When mounting, then check the filter. If it is an existence filter then show those

  React.useEffect(function () {
    var mustType = get_1(tmpFilter, "must.".concat(filterName, "[0].type")) === 'isNotNull';
    var mustNotType = get_1(tmpFilter, "must_not.".concat(filterName, "[0].type")) === 'isNotNull';

    if (!isExistenceFilter && (mustType || mustNotType)) {
      onExistenceChange(true);
    } else {
      onExistenceChange(false);
    }
  }, []);
  return react.jsx(UncontrollableFilterState, {
    filter: tmpFilter,
    onChange: function onChange(updatedFilter) {
      return onFilterChange(updatedFilter);
    }
  }, react.jsx(FilterContext.Consumer, null, function (_ref2) {
    var setField = _ref2.setField,
        negateField = _ref2.negateField,
        setFullField = _ref2.setFullField,
        toggle = _ref2.toggle,
        filter = _ref2.filter;
    var selectedItems = get_1(filter, "".concat(type, ".").concat(filterName), []).map(function (x) {
      return _typeof__default["default"](x) === 'object' ? hash$1(x) : x;
    });
    var checkedMap = new Set(selectedItems);
    var summaryProps = {
      count: checkedMap.size,
      onClear: function onClear() {
        return setFullField(filterName, [], []);
      }
    };
    var footerProps = {
      formId: formId,
      showBack: aboutVisible,
      onBack: function onBack() {
        return onAboutChange(false);
      }
    };
    var menuItems = aboutText || hasHelpTexts || supportsExist ? function (menuState) {
      return [].concat(_toConsumableArray__default["default"](aboutText ? [react.jsx(MenuAction, {
        key: "About",
        onClick: function onClick() {
          onAboutChange(true);
          menuState.hide();
        }
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "filterSupport.aboutThisFilter",
        defaultMessage: "About this filter"
      }))] : []), _toConsumableArray__default["default"](hasHelpTexts ? [react.jsx(MenuToggle, {
        key: "Help",
        disabled: aboutVisible,
        style: {
          opacity: aboutVisible ? .5 : 1
        },
        checked: !!helpVisible,
        onChange: function onChange() {
          return onHelpChange(!helpVisible);
        }
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "filterSupport.showHelp",
        defaultMessage: "Show help text"
      }))] : []), _toConsumableArray__default["default"](supportsExist ? [react.jsx(MenuToggle, {
        key: "Exists",
        disabled: aboutVisible,
        style: {
          opacity: aboutVisible ? .5 : 1
        },
        checked: !!isExistenceFilter,
        onChange: function onChange() {
          if (isExistenceFilter) {
            setFullField(filterName, [], []);
          }

          onExistenceChange(!isExistenceFilter);
          menuState.hide();
        }
      }, react.jsx(reactIntl.FormattedMessage, {
        id: "filterSupport.existence",
        defaultMessage: "Filter for existence"
      }))] : []));
    } : undefined;
    return react.jsx(FilterBox, {
      style: style
    }, react.jsx(Header, {
      menuItems: menuItems,
      labelledById: labelledById
    }, title), !aboutVisible && react.jsx(React__default["default"].Fragment, null, children({
      formId: formId,
      summaryProps: summaryProps,
      footerProps: footerProps,
      helpVisible: helpVisible,
      setField: setField,
      setFullField: setFullField,
      toggle: toggle,
      filter: filter,
      selectedItems: selectedItems,
      checkedMap: checkedMap,
      isExistenceFilter: isExistenceFilter,
      negateField: negateField
    })), aboutVisible && react.jsx(React__default["default"].Fragment, null, react.jsx(Prose, {
      as: FilterBodyDescription
    }, aboutText), react.jsx(Footer, footerProps)));
  }));
}

var UncontrollableFilter = uncontrollable.uncontrollable(Filter, {
  aboutVisible: 'onAboutChange',
  helpVisible: 'onHelpChange',
  isExistenceFilter: 'onExistenceChange',
  filter: 'onFilterChange'
});

var _excluded$U = ["count", "onClear"];

var SummaryBar = function SummaryBar(_ref2) {
  var count = _ref2.count,
      onClear = _ref2.onClear,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded$U);

  React.useContext(ThemeContext);
  return react.jsx("div", _extends__default["default"]({}, props, {
    css: summary$4()
  }), react.jsx(Row, {
    as: "div"
  }, react.jsx(Col, null, react.jsx(reactIntl.FormattedMessage, {
    id: "counts.nSelected",
    values: {
      total: count
    }
  })), count > 0 && react.jsx(Col, {
    grow: false
  }, react.jsx(Button, {
    appearance: "text",
    onClick: onClear
  }, "Clear"))));
};

var _ref$a = {
  name: "1c03pjv",
  styles: "font-size:.85em;color:#999;font-weight:400;margin:.5em 1.5em"
} ;

var summary$4 = function summary(theme) {
  return _ref$a;
};

var _excluded$T = ["count", "onClear", "checked", "onChange", "children"];

var AdditionalControl = function AdditionalControl(_ref) {
  _ref.count;
      _ref.onClear;
      var checked = _ref.checked,
      onChange = _ref.onChange,
      children = _ref.children,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$T);

  var theme = React.useContext(ThemeContext);
  return react.jsx("div", _extends__default["default"]({}, props, {
    css: summary$3(theme)
  }), react.jsx(Row, {
    as: "div"
  }, react.jsx(Col, {
    grow: true
  }), react.jsx(Col, {
    grow: false
  }, children, " ", react.jsx(Switch, {
    checked: checked,
    onChange: onChange
  }))));
};

var summary$3 = function summary(theme) {
  return /*#__PURE__*/react.css("font-size:.85em;color:#999;font-weight:400;border-bottom:1px solid ", theme.paperBorderColor, ";>div{margin:.5em 1.5em;}" + ("" ), "" );
};

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf__default["default"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default["default"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default["default"](this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Suggest$2 = /*#__PURE__*/function (_React$Component) {
  _inherits__default["default"](Suggest, _React$Component);

  var _super = _createSuper$1(Suggest);

  function Suggest() {
    var _this;

    _classCallCheck__default["default"](this, Suggest);

    _this = _super.call(this); // Autosuggest is a controlled component.
    // This means that you need to provide an input value
    // and an onChange handler that updates this value (see below).
    // Suggestions also need to be provided to the Autosuggest,
    // and they are initially empty because the Autosuggest is closed.

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "onChange", function (event, _ref) {
      var newValue = _ref.newValue;

      _this.setState({
        value: newValue
      });
    });

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "onSuggestionsFetchRequested", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(_ref2) {
        var _this$suggestions;

        var value, _this$suggestions2, _this$suggestions2$pr, canceled, _this$props$getSugges, promise, _cancel;

        return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                value = _ref2.value;

                if ((_this$suggestions = _this.suggestions) !== null && _this$suggestions !== void 0 && _this$suggestions.cancel) {
                  _this.suggestions.cancel();

                  if ((_this$suggestions2 = _this.suggestions) !== null && _this$suggestions2 !== void 0 && (_this$suggestions2$pr = _this$suggestions2.promise) !== null && _this$suggestions2$pr !== void 0 && _this$suggestions2$pr.cancel) _this.suggestions.promise.cancel();
                }

                if (!(!_this.props.allowEmptyQueries && value === '')) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return");

              case 4:
                _this.setState({
                  loading: true,
                  error: undefined
                });

                canceled = false;
                _this$props$getSugges = _this.props.getSuggestions({
                  q: value,
                  localeContext: _this.context
                }), promise = _this$props$getSugges.promise, _cancel = _this$props$getSugges.cancel;
                _this.suggestions = {
                  promise: promise,
                  cancel: function cancel() {
                    if (_cancel) _cancel();
                    canceled = true;
                  }
                };

                _this.suggestions.promise.then(function (response) {
                  if (canceled) return;

                  _this.setState({
                    suggestions: response.data,
                    error: undefined,
                    loading: false
                  });
                })["catch"](function (err) {
                  if (canceled) return;

                  _this.setState({
                    suggestions: [],
                    error: 'Unable to load results',
                    loading: false
                  });
                });

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "onSuggestionsClearRequested", function () {
      _this.setState({
        suggestions: []
      });
    });

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "onSuggestionSelected", function (_ref4) {
      var item = _ref4.item,
          value = _ref4.value;

      if (_this.props.onSuggestionSelected) {
        _this.props.onSuggestionSelected({
          item: item,
          value: value
        });
      }

      _this.setState({
        item: item
      });
    });

    _this.state = {
      value: '',
      suggestions: []
    };
    return _this;
  }

  _createClass__default["default"](Suggest, [{
    key: "render",
    value: function render() {
      var _this$state = this.state,
          value = _this$state.value,
          suggestions = _this$state.suggestions,
          loading = _this$state.loading,
          error = _this$state.error;
      var _this$props = this.props,
          intl = _this$props.intl,
          render = _this$props.render,
          getValue = _this$props.getValue,
          placeholder = _this$props.placeholder; // Autosuggest will pass through all these props to the input

      var placeholderTranslationString = placeholder || 'search.placeholders.default';
      var inputProps = {
        placeholder: intl.formatMessage({
          id: placeholderTranslationString
        }),
        value: value,
        onChange: this.onChange,
        onKeyPress: this.props.onKeyPress
      }; // Finally, render it!

      return react.jsx(React__default["default"].Fragment, null, react.jsx(Autocomplete, {
        style: {
          margin: '10px'
        },
        suggestions: suggestions,
        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,
        onSuggestionsClearRequested: this.onSuggestionsClearRequested,
        getSuggestionValue: getValue,
        renderSuggestion: render,
        inputProps: inputProps,
        onSuggestionSelected: this.onSuggestionSelected,
        isLoading: loading,
        ref: this.props.focusRef,
        menuCss: this.props.menuCss,
        delay: this.props.delay,
        loadingError: error && value !== ''
      }));
    }
  }]);

  return Suggest;
}(React__default["default"].Component);

_defineProperty__default["default"](Suggest$2, "contextType", LocaleContext);

var Suggest$3 = reactIntl.injectIntl(Suggest$2);

var _excluded$S = ["helpVisible"],
    _excluded2$1 = ["isRadio", "label", "tabIndex", "checked", "onChange", "helpText", "helpVisible", "loading"];
function OptionSkeleton(_ref3) {
  var helpVisible = _ref3.helpVisible,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded$S);

  return react.jsx("div", _extends__default["default"]({
    css: optionClass(),
    style: {
      display: 'flex',
      wrap: 'nowrap'
    }
  }, props), react.jsx(Skeleton, {
    width: "1em",
    style: {
      flex: '0 0 auto'
    }
  }), react.jsx("div", {
    style: {
      marginLeft: 10,
      flex: '1 1 auto'
    }
  }, react.jsx(Skeleton, {
    width: "random"
  }), helpVisible && react.jsx(Skeleton, {
    width: "50%"
  })));
}
var Option = /*#__PURE__*/React__default["default"].forwardRef(function (_ref4, ref) {
  var isRadio = _ref4.isRadio,
      label = _ref4.label,
      tabIndex = _ref4.tabIndex,
      checked = _ref4.checked,
      onChange = _ref4.onChange,
      helpText = _ref4.helpText,
      helpVisible = _ref4.helpVisible,
      loading = _ref4.loading;
      _objectWithoutProperties__default["default"](_ref4, _excluded2$1);

  var theme = {}; //useContext(ThemeContext);

  return react.jsx("label", {
    css: optionClass(),
    style: {
      display: 'flex',
      wrap: 'nowrap'
    }
  }, react.jsx("div", null, isRadio && react.jsx(Radio, {
    disabled: loading,
    ref: ref,
    tabIndex: tabIndex,
    checked: checked,
    onChange: onChange,
    style: {
      flex: '0 0 auto'
    }
  }), !isRadio && react.jsx(Checkbox, {
    disabled: loading,
    ref: ref,
    tabIndex: tabIndex,
    checked: checked,
    onChange: onChange,
    style: {
      flex: '0 0 auto'
    }
  })), react.jsx("div", {
    style: {
      flex: '1 1 auto',
      marginLeft: 10,
      wordBreak: 'break-word'
    }
  }, react.jsx("div", null, react.jsx("span", {
    css: textLoader({
      theme: theme,
      loading: loading
    })
  }, label)), helpVisible && helpText && react.jsx("div", {
    style: {
      marginTop: 4,
      fontSize: '0.85em',
      color: '#aaa'
    }
  }, react.jsx("span", {
    css: textLoader({
      theme: theme,
      loading: loading
    })
  }, helpText)))); // return <Row as="label" {...props} css={optionClass(theme)} halfGutter={4} wrap="nowrap">
  //   <Col grow={false} shrink={false}>
  //     <Checkbox ref={ref} checked={checked} onChange={onChange} />
  //   </Col>
  //   <Col>
  //     <div>{label}</div>
  //     {helpVisible && helpText && <div style={{ marginTop: 4, fontSize: '0.85em', color: '#aaa' }}>
  //       {helpText}
  //     </div>}
  //   </Col>
  // </Row>
});
Option.displayName = 'FilterOption';

var _ref2$7 = {
  name: "sc26ll",
  styles: "padding:6px 0;&:last-child{margin-bottom:0;}"
} ;

var optionClass = function optionClass(theme) {
  return _ref2$7;
};

var _ref$9 = {
  name: "jqdeln",
  styles: "background-color:#88888822;color:transparent"
} ;

var textLoader = function textLoader(_ref5) {
  var loading = _ref5.loading;
  if (!loading) return;
  return _ref$9;
};

var _excluded$R = ["footerProps", "setFullField", "filterHandle", "onApply", "onCancel", "filter", "hide"];

var Exists = function Exists(_ref) {
  var footerProps = _ref.footerProps,
      setFullField = _ref.setFullField,
      filterHandle = _ref.filterHandle,
      _onApply = _ref.onApply,
      _onCancel = _ref.onCancel,
      filter = _ref.filter,
      hide = _ref.hide;
      _objectWithoutProperties__default["default"](_ref, _excluded$R);

  var mustDefined = get_1(filter, "must.".concat(filterHandle, "[0]"));
  React.useEffect(function () {
    // set initial state
    var mustNotType = get_1(filter, "must_not.".concat(filterHandle, "[0].type"));

    if (mustNotType === 'isNotNull') {
      setFullField(filterHandle, [], [{
        type: 'isNotNull'
      }]);
    } else {
      setFullField(filterHandle, [{
        type: 'isNotNull'
      }], []);
    }
  }, []);
  return react.jsx(React__default["default"].Fragment, null, react.jsx(FilterBody, null, react.jsx(Option, {
    isRadio: true,
    checked: !!mustDefined,
    onChange: function onChange() {
      setFullField(filterHandle, [{
        type: 'isNotNull'
      }], []);
    },
    label: react.jsx(reactIntl.FormattedMessage, {
      id: 'filterSupport.nullOrNot.isNotNull'
    })
  }), react.jsx(Option, {
    isRadio: true,
    checked: !mustDefined,
    onChange: function onChange() {
      setFullField(filterHandle, [], [{
        type: 'isNotNull'
      }]);
    },
    label: react.jsx(reactIntl.FormattedMessage, {
      id: 'filterSupport.nullOrNot.isNull'
    })
  })), react.jsx(Footer, _extends__default["default"]({}, footerProps, {
    onApply: function onApply() {
      return _onApply({
        filter: filter,
        hide: hide
      });
    },
    onCancel: function onCancel() {
      return _onCancel({
        filter: filter,
        hide: hide
      });
    }
  })));
};

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default["default"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default["default"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default["default"](this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Suggest = /*#__PURE__*/function (_React$Component) {
  _inherits__default["default"](Suggest, _React$Component);

  var _super = _createSuper(Suggest);

  function Suggest(props) {
    var _this;

    _classCallCheck__default["default"](this, Suggest);

    _this = _super.call(this); // Autosuggest is a controlled component.
    // This means that you need to provide an input value
    // and an onChange handler that updates this value (see below).
    // Suggestions also need to be provided to the Autosuggest,
    // and they are initially empty because the Autosuggest is closed.

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "onSuggestionsFetchRequested", function (_ref) {
      var value = _ref.value;

      _this.setState({
        suggestions: _this.props.getSuggestions({
          q: value
        })
      });
    });

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "onSuggestionsClearRequested", function () {
      _this.setState({
        suggestions: []
      });
    });

    _defineProperty__default["default"](_assertThisInitialized__default["default"](_this), "onSuggestionSelected", function (_ref2) {
      var item = _ref2.item,
          value = _ref2.value;

      _this.onSuggestionsClearRequested();

      if (_this.props.onSuggestionSelected) {
        _this.props.onSuggestionSelected({
          item: item,
          value: value
        });
      }
    });

    _this.state = {
      suggestions: props.initSuggestions
    };
    return _this;
  } // Autosuggest will call this function every time you need to update suggestions.
  // You already implemented this logic above, so just use it.


  _createClass__default["default"](Suggest, [{
    key: "render",
    value: function render() {
      var currentSuggestions = this.state.suggestions;
      var _this$props = this.props,
          intl = _this$props.intl,
          defaultIsOpen = _this$props.defaultIsOpen,
          render = _this$props.render,
          getValue = _this$props.getValue,
          placeholder = _this$props.placeholder,
          onChange = _this$props.onChange,
          value = _this$props.value,
          initSuggestions = _this$props.initSuggestions;
          _this$props.onKeyPress;
      var suggestions = value === '' ? initSuggestions : currentSuggestions; // Autosuggest will pass through all these props to the input.

      var inputProps = {
        placeholder: placeholder || intl.formatMessage({
          id: 'search.placeholders.default'
        }),
        value: value,
        onChange: onChange
      }; // Finally, render it!

      return react.jsx(React__default["default"].Fragment, null, react.jsx(Autocomplete, {
        style: {
          margin: '10px'
        },
        suggestions: suggestions,
        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,
        onSuggestionsClearRequested: this.onSuggestionsClearRequested,
        getSuggestionValue: getValue,
        renderSuggestion: render,
        inputProps: inputProps,
        onSuggestionSelected: this.onSuggestionSelected,
        isLoading: false,
        ref: this.props.focusRef,
        menuCss: this.props.menuCss,
        delay: this.props.delay,
        defaultIsOpen: defaultIsOpen
      }));
    }
  }]);

  return Suggest;
}(React__default["default"].Component);

var Suggest$1 = reactIntl.injectIntl(Suggest);

var _excluded$Q = ["focusRef"],
    _excluded2 = ["config"];

function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function getSuggestConfig(_ref) {
  var options = _ref.options;
  return {
    //What placeholder to show
    placeholder: 'Search for filters',
    // how to get the list of suggestion data
    getSuggestions: function getSuggestions(_ref2) {
      var q = _ref2.q;
      return options.filter(function (x) {
        return x.displayName.toLowerCase().indexOf(q.toLowerCase()) === 0 || x.displayName.toLowerCase().indexOf(q.toLowerCase()) >= 0 && q.length > 1;
      }).map(function (x) {
        return _objectSpread$d(_objectSpread$d({}, x), {}, {
          key: x.filterHandle
        });
      });
    },
    // how to map the results to a single string value
    getValue: function getValue(suggestion) {
      return suggestion.displayName;
    },
    // how to display the individual suggestions in the list
    render: function DatasetSuggestItem(suggestion) {
      return react.jsx("div", null, suggestion.displayName);
    },
    delay: 10
  };
}
var FilterContent$7 = function FilterContent(_ref3) {
  var focusRef = _ref3.focusRef,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded$Q);

  var ref = React__default["default"].useRef();
  React.useContext(ThemeContext);

  var _useIntl = reactIntl.useIntl();
      _useIntl.formatMessage;

  var _useContext = React.useContext(SearchContext),
      filters = _useContext.filters;

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      CurrentFilter = _useState2[0],
      selectedFilter = _useState2[1];

  var _useState3 = React.useState(function () {
    return Object.keys(filters).map(function (filterHandle) {
      return {
        filterHandle: filterHandle,
        displayName: filters[filterHandle].displayName
      };
    });
  }),
      _useState4 = _slicedToArray__default["default"](_useState3, 1),
      options = _useState4[0];

  var _useState5 = React.useState(function () {
    return getSuggestConfig({
      options: options
    });
  }),
      _useState6 = _slicedToArray__default["default"](_useState5, 1),
      suggestConfig = _useState6[0];

  var _useState7 = React.useState(''),
      _useState8 = _slicedToArray__default["default"](_useState7, 2),
      value = _useState8[0],
      setValue = _useState8[1];

  React__default["default"].useEffect(function () {
    if (CurrentFilter) {
      if (ref && ref.current) {
        ref.current.focus();
      }
    }
  }, [CurrentFilter]);
  return react.jsx(React__default["default"].Fragment, null, !CurrentFilter && react.jsx(FilterBox, null, react.jsx(React__default["default"].Fragment, null, react.jsx(Suggest$1, {
    defaultIsOpen: true,
    value: value // placeholder={formatMessage({id: 'search.table.lockColumn'})}
    ,
    initSuggestions: options,
    getSuggestions: suggestConfig.getSuggestions,
    onChange: function onChange(event, _ref4) {
      var newValue = _ref4.newValue;
      return setValue(newValue);
    },
    focusRef: focusRef,
    render: suggestConfig.render,
    getValue: suggestConfig.getValue,
    onSuggestionSelected: function onSuggestionSelected(_ref5) {
      var item = _ref5.item;
          _ref5.value;
      setValue('');
      selectedFilter(function () {
        return filters[item.filterHandle].Content;
      });
    },
    delay: 10
  }))), CurrentFilter && react.jsx(CurrentFilter, _extends__default["default"]({}, props, {
    focusRef: ref
  })));
};
function Popover$7(_ref6) {
  _ref6.config;
      var props = _objectWithoutProperties__default["default"](_ref6, _excluded2);

  return react.jsx(Popover$8, _extends__default["default"]({}, props, {
    content: react.jsx(FilterContent$7, null)
  }));
}
function Trigger(props) {
  return react.jsx(Popover$7, {
    modal: true
  }, react.jsx(Button, {
    appearance: "primaryOutline"
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "pagination.moreFilters"
  })));
}

var _excluded$P = ["className", "config", "filter"];

function getVisibleFilters(currentFilter, commonFilters) {
  var visibleFilters = union_1(commonFilters, Object.keys(get_1(currentFilter, 'must', {})), Object.keys(get_1(currentFilter, 'must_not', {})));
  return visibleFilters;
}

var FilterBar = function FilterBar(_ref2) {
  var _ref2$className = _ref2.className,
      className = _ref2$className === void 0 ? '' : _ref2$className,
      config = _ref2.config,
      filter = _ref2.filter,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded$P);

  var theme = React.useContext(ThemeContext);
  var prefix = theme.prefix || 'gbif';
  var elementName = 'filterBar';
  var visibleFilters = getVisibleFilters(filter, config.defaultVisibleFilters);
  var availableFilters = visibleFilters.map(function (x) {
    return config.filters[x];
  });
  return react.jsx("div", _extends__default["default"]({
    className: "".concat(className, " ").concat(prefix, "-").concat(elementName),
    css: /*#__PURE__*/react.css(style(), ";" + ("" ), "" )
  }, props), availableFilters.map(function (x, i) {
    if (!x) return null; // if no widget is defined for this filter, then do not show anything

    return react.jsx(x.Button, {
      key: i
    });
  }), Object.keys(config.filters).length !== config.defaultVisibleFilters.length && react.jsx("div", null, react.jsx(Trigger, null)));
};

var _ref$8 = {
  name: "1dhou5a",
  styles: "display:flex;flex-direction:row;flex-wrap:wrap;margin-bottom:-4px;>div{max-width:100%;margin-right:4px;margin-bottom:4px;}"
} ;

var style = function style(theme) {
  return _ref$8;
};

var mapContextToProps$4 = function mapContextToProps(_ref3) {
  var filter = _ref3.filter;
  return {
    filter: filter
  };
};

var FilterBar$1 = withContext(mapContextToProps$4)(FilterBar);

var _excluded$O = ["className", "config", "tabs"];
Tabs.TabList;
    Tabs.Tab;
    Tabs.TabPanel;
    Tabs.TapSeperator;

var Layout$3 = function Layout(_ref) {
  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      config = _ref.config,
      _ref$tabs = _ref.tabs,
      tabs = _ref$tabs === void 0 ? ['TABLE', 'GALLERY', 'MAP'] : _ref$tabs,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$O);

  // const [activeView, setActiveView] = useUrlState({ param: 'view', defaultValue: tabs[0] || 'TABLE' });
  var _useQueryParam = useQueryParams.useQueryParam('view', useQueryParams.StringParam),
      _useQueryParam2 = _slicedToArray__default["default"](_useQueryParam, 2),
      _useQueryParam2$ = _useQueryParam2[0],
      activeView = _useQueryParam2$ === void 0 ? tabs[0] || 'TABLE' : _useQueryParam2$,
      setActiveView = _useQueryParam2[1];

  var theme = React.useContext(ThemeContext);
  var prefix = theme.prefix || 'gbif';
  var elementName = 'occurrenceSearchLayout';
  var tabComponents = {
    TABLE: react.jsx(NavItem, {
      key: "table",
      label: react.jsx(reactIntl.FormattedMessage, {
        id: "search.tabs.table",
        defaultMessage: "Table"
      }),
      "data-targetid": "table",
      onClick: function onClick(e) {
        return setActiveView('TABLE');
      },
      isActive: activeView === 'TABLE'
    }),
    MAP: react.jsx(NavItem, {
      key: "map",
      label: react.jsx(reactIntl.FormattedMessage, {
        id: "search.tabs.map",
        defaultMessage: "Map"
      }),
      "data-targetid": "map",
      onClick: function onClick(e) {
        return setActiveView('MAP');
      },
      isActive: activeView === 'MAP'
    }),
    GALLERY: react.jsx(NavItem, {
      key: "gallery",
      label: react.jsx(reactIntl.FormattedMessage, {
        id: "search.tabs.gallery",
        defaultMessage: "Gallery"
      }),
      "data-targetid": "gallery",
      onClick: function onClick(e) {
        return setActiveView('GALLERY');
      },
      isActive: activeView === 'GALLERY'
    }),
    DATASETS: react.jsx(NavItem, {
      key: "datasets",
      label: react.jsx(reactIntl.FormattedMessage, {
        id: "search.tabs.datasets",
        defaultMessage: "Datasets"
      }),
      "data-targetid": "dataset",
      onClick: function onClick(e) {
        return setActiveView('DATASETS');
      },
      isActive: activeView === 'DATASETS'
    })
  };
  return react.jsx("div", _extends__default["default"]({
    className: "".concat(className, " ").concat(prefix, "-").concat(elementName),
    css: cssLayout({
      theme: theme
    })
  }, props), react.jsx("div", {
    css: cssNavBar({
      theme: theme
    })
  }, react.jsx("div", {
    css: cssFilter({
      theme: theme
    })
  }, react.jsx(FilterBar$1, {
    config: config
  })), react.jsx("div", null, react.jsx(NavBar, {
    style: {
      marginLeft: 10
    }
  }, tabs.map(function (tab) {
    return tabComponents[tab];
  }), react.jsx(NavItem, {
    label: "Download",
    "data-targetid": "download",
    onClick: function onClick(e) {
      return setActiveView('DOWNLOAD');
    },
    isActive: activeView === 'DOWNLOAD'
  })))), react.jsx("div", {
    css: cssViewArea({
      theme: theme
    })
  }, activeView === 'TABLE' && react.jsx(Table$6, null), activeView === 'MAP' && react.jsx(Map, null), activeView === 'GALLERY' && react.jsx(Table$5, null), activeView === 'DATASETS' && react.jsx(Datasets, null), activeView === 'DOWNLOAD' && react.jsx(Download, null)));
};

var mapContextToProps$3 = function mapContextToProps(_ref2) {
  var test = _ref2.test;
  return {
    test: test
  };
};

var ComponentLayout$1 = withContext(mapContextToProps$3)(Layout$3);

var _excluded$N = ["className", "config", "tabs"];
Tabs.TabList;
    Tabs.Tab;
    Tabs.TabPanel;
    Tabs.TapSeperator;

var Layout$2 = function Layout(_ref) {
  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      config = _ref.config,
      _ref$tabs = _ref.tabs,
      tabs = _ref$tabs === void 0 ? ['TABLE', 'GALLERY', 'MAP'] : _ref$tabs,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$N);

  // const [activeView, setActiveView] = useUrlState({ param: 'view', defaultValue: tabs[0] || 'TABLE' });
  var _useQueryParam = useQueryParams.useQueryParam('view', useQueryParams.StringParam),
      _useQueryParam2 = _slicedToArray__default["default"](_useQueryParam, 2),
      _useQueryParam2$ = _useQueryParam2[0],
      activeView = _useQueryParam2$ === void 0 ? tabs[0] || 'TABLE' : _useQueryParam2$,
      setActiveView = _useQueryParam2[1];

  var theme = React.useContext(ThemeContext);
  var prefix = theme.prefix || 'gbif';
  var elementName = 'occurrenceSearchLayout';
  var tabComponents = {
    TABLE: react.jsx(NavItem, {
      key: "table",
      label: react.jsx(reactIntl.FormattedMessage, {
        id: "search.tabs.table",
        defaultMessage: "Table"
      }),
      "data-targetid": "table",
      onClick: function onClick(e) {
        return setActiveView('TABLE');
      },
      isActive: activeView === 'TABLE'
    }),
    MAP: react.jsx(NavItem, {
      key: "map",
      label: react.jsx(reactIntl.FormattedMessage, {
        id: "search.tabs.map",
        defaultMessage: "Map"
      }),
      "data-targetid": "map",
      onClick: function onClick(e) {
        return setActiveView('MAP');
      },
      isActive: activeView === 'MAP'
    }),
    GALLERY: react.jsx(NavItem, {
      key: "gallery",
      label: react.jsx(reactIntl.FormattedMessage, {
        id: "search.tabs.gallery",
        defaultMessage: "Gallery"
      }),
      "data-targetid": "gallery",
      onClick: function onClick(e) {
        return setActiveView('GALLERY');
      },
      isActive: activeView === 'GALLERY'
    }),
    DATASETS: react.jsx(NavItem, {
      key: "datasets",
      label: react.jsx(reactIntl.FormattedMessage, {
        id: "search.tabs.datasets",
        defaultMessage: "Datasets"
      }),
      "data-targetid": "dataset",
      onClick: function onClick(e) {
        return setActiveView('DATASETS');
      },
      isActive: activeView === 'DATASETS'
    })
  };
  return react.jsx("div", _extends__default["default"]({
    className: "".concat(className, " ").concat(prefix, "-").concat(elementName),
    css: cssLayout({
      theme: theme
    })
  }, props), react.jsx("div", {
    css: cssNavBar({
      theme: theme
    }),
    style: {
      margin: '0 0 10px 0',
      borderRadius: 0
    }
  }, react.jsx(DataHeader, {
    style: {
      borderBottom: '1px solid #ddd'
    },
    availableCatalogues: config.availableCatalogues
  }, react.jsx(NavBar, {
    style: {
      marginLeft: 10
    }
  }, tabs.map(function (tab) {
    return tabComponents[tab];
  }), react.jsx(NavItem, {
    label: react.jsx(reactIntl.FormattedMessage, {
      id: "search.tabs.download",
      defaultMessage: "Download"
    }),
    "data-targetid": "download",
    onClick: function onClick(e) {
      return setActiveView('DOWNLOAD');
    },
    isActive: activeView === 'DOWNLOAD'
  }))), react.jsx("div", {
    css: cssFilter({
      theme: theme
    })
  }, react.jsx(FilterBar$1, {
    config: config
  }))), react.jsx("div", {
    css: cssViewArea({
      theme: theme
    })
  }, activeView === 'TABLE' && react.jsx(Table$6, null), activeView === 'MAP' && react.jsx(Map, null), activeView === 'GALLERY' && react.jsx(Table$5, null), activeView === 'DATASETS' && react.jsx(Datasets, null), activeView === 'DOWNLOAD' && react.jsx(Download, null)));
};

var mapContextToProps$2 = function mapContextToProps(_ref2) {
  var test = _ref2.test;
  return {
    test: test
  };
};

var PageLayout$1 = withContext(mapContextToProps$2)(Layout$2);

var _commonLabels;
var commonLabels = (_commonLabels = {
  basisOfRecord: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.basisOfRecord.".concat(id);
    }
  },
  typeStatus: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.typeStatus.".concat(id);
    }
  },
  institutionCode: {
    type: 'TRANSLATION',
    template: function template(id) {
      return id;
    }
  },
  mediaType: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.mediaType.".concat(id);
    }
  },
  occurrenceIssue: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.occurrenceIssue.".concat(id);
    }
  },
  countryCode: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.countryCode.".concat(id);
    }
  },
  number: {
    type: 'TRANSFORM',
    transform: function transform(_ref) {
      var id = _ref.id,
          locale = _ref.locale;
      return id.toLocaleString(locale);
    }
  },
  taxonKey: {
    type: 'GQL',
    query: "query label($id: ID!){\n      taxon(key: $id) {\n        formattedName\n      }\n    }",
    transform: function transform(result) {
      return {
        title: result.data.taxon.formattedName
      };
    },
    isHtmlResponse: true
  },
  q: {
    type: 'TRANSFORM',
    transform: function transform(_ref2) {
      var id = _ref2.id;
          _ref2.locale;
      return "\"".concat(id, "\"");
    }
  },
  canonicalName: {
    type: 'GQL',
    query: "query label($id: ID!){\n      taxon(key: $id) {\n        canonicalName\n      }\n    }",
    transform: function transform(result) {
      return {
        title: result.data.taxon.canonicalName
      };
    }
  },
  publisherKey: {
    type: 'ENDPOINT',
    template: function template(_ref3) {
      var id = _ref3.id,
          api = _ref3.api;
      return "".concat(api.v1.endpoint, "/organization/").concat(id);
    },
    transform: function transform(result) {
      return {
        title: result.title
      };
    }
  },
  hostingOrganizationKey: {
    type: 'ENDPOINT',
    template: function template(_ref4) {
      var id = _ref4.id,
          api = _ref4.api;
      return "".concat(api.v1.endpoint, "/organization/").concat(id);
    },
    transform: function transform(result) {
      return {
        title: result.title
      };
    }
  },
  datasetKey: {
    type: 'GQL',
    query: "query label($id: ID!){\n      dataset(key: $id) {\n        title\n      }\n    }",
    transform: function transform(result) {
      return result.data.dataset;
    }
  },
  year: {
    type: 'CUSTOM',
    component: rangeOrEqualLabel('intervals.compactTime')
  },
  coordinateUncertainty: {
    type: 'CUSTOM',
    component: rangeOrEqualLabel('intervals.compactMeters')
  },
  depth: {
    type: 'CUSTOM',
    component: rangeOrEqualLabel('intervals.compactMeters')
  },
  organismQuantity: {
    type: 'CUSTOM',
    component: rangeOrEqualLabel('intervals.compact')
  },
  sampleSizeValue: {
    type: 'CUSTOM',
    component: rangeOrEqualLabel('intervals.compact')
  },
  relativeOrganismQuantity: {
    type: 'CUSTOM',
    component: rangeOrEqualLabel('intervals.compact')
  },
  month: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.month.".concat(id);
    }
  },
  continent: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.continent.".concat(id);
    }
  },
  protocol: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.protocol.".concat(id);
    }
  },
  literatureType: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.literatureType.".concat(id);
    }
  },
  establishmentMeans: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.establishmentMeans.".concat(id);
    }
  },
  establishmentMeansVocabulary: {
    type: 'ENDPOINT',
    template: function template(_ref5) {
      var id = _ref5.id,
          api = _ref5.api;
      return "".concat(api.v1.endpoint, "/vocabularies/EstablishmentMeans/concepts/").concat(id);
    },
    transform: function transform(result) {
      var _localeContext$locale;

      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          localeContext = _ref6.localeContext;

      var vocabularyLocale = (localeContext === null || localeContext === void 0 ? void 0 : (_localeContext$locale = localeContext.localeMap) === null || _localeContext$locale === void 0 ? void 0 : _localeContext$locale.vocabulary) || 'en';
      return {
        title: result.label[vocabularyLocale] || result.label.en
      };
    }
  },
  catalogNumber: {
    type: 'TRANSLATION',
    template: function template(id) {
      return id;
    }
  },
  recordNumber: {
    type: 'TRANSLATION',
    template: function template(id) {
      return id;
    }
  },
  elevation: {
    type: 'CUSTOM',
    component: rangeOrEqualLabel('intervals.compactMeters')
  },
  occurrenceStatus: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.occurrenceStatus.".concat(id);
    }
  },
  gadmGid: {
    type: 'ENDPOINT',
    template: function template(_ref7) {
      var id = _ref7.id,
          api = _ref7.api;
      return "".concat(api.v1.endpoint, "/geocode/gadm/").concat(id);
    },
    transform: function transform(result) {
      return {
        title: result.name
      };
    }
  },
  isInCluster: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.isInCluster.".concat(id);
    }
  },
  datasetType: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.datasetType.".concat(id);
    }
  },
  datasetSubtype: {
    type: 'TRANSLATION',
    template: function template(id) {
      return "enums.datasetSubtype.".concat(id);
    }
  },
  institutionKey: {
    type: 'GQL',
    query: "query label($id: String!){\n      institution(key: $id) {\n        name\n      }\n    }",
    transform: function transform(result) {
      return {
        title: result.data.institution.name
      };
    }
  },
  networkKey: {
    type: 'ENDPOINT',
    template: function template(_ref8) {
      var id = _ref8.id,
          api = _ref8.api;
      return "".concat(api.v1.endpoint, "/network/").concat(id);
    },
    transform: function transform(result) {
      return {
        title: result.title
      };
    }
  }
}, _defineProperty__default["default"](_commonLabels, "literatureType", {
  type: 'TRANSLATION',
  template: function template(id) {
    return "enums.literatureType.".concat(id);
  }
}), _defineProperty__default["default"](_commonLabels, "dwcaExtension", {
  type: 'TRANSLATION',
  template: function template(id) {
    return "enums.dwcaExtension.".concat(id);
  }
}), _commonLabels);

var countryCodes = [
	"AF",
	"AX",
	"AL",
	"DZ",
	"AS",
	"AD",
	"AO",
	"AI",
	"AQ",
	"AG",
	"AR",
	"AM",
	"AW",
	"AU",
	"AT",
	"AZ",
	"BS",
	"BH",
	"BD",
	"BB",
	"BY",
	"BE",
	"BZ",
	"BJ",
	"BM",
	"BT",
	"BO",
	"BQ",
	"BA",
	"BW",
	"BV",
	"BR",
	"IO",
	"BN",
	"BG",
	"BF",
	"BI",
	"KH",
	"CM",
	"CA",
	"CV",
	"KY",
	"CF",
	"TD",
	"CL",
	"CN",
	"CX",
	"CC",
	"CO",
	"KM",
	"CD",
	"CG",
	"CK",
	"CR",
	"CI",
	"HR",
	"CU",
	"CW",
	"CY",
	"CZ",
	"DK",
	"DJ",
	"DM",
	"DO",
	"EC",
	"EG",
	"SV",
	"GQ",
	"ER",
	"EE",
	"ET",
	"FK",
	"FO",
	"FJ",
	"FI",
	"FR",
	"GF",
	"PF",
	"TF",
	"GA",
	"GM",
	"GE",
	"DE",
	"GH",
	"GI",
	"GR",
	"GL",
	"GD",
	"GP",
	"GU",
	"GT",
	"GG",
	"GN",
	"GW",
	"GY",
	"HT",
	"HM",
	"VA",
	"HN",
	"HK",
	"HU",
	"IS",
	"IN",
	"ID",
	"IR",
	"IQ",
	"IE",
	"IM",
	"IL",
	"IT",
	"JM",
	"JP",
	"JE",
	"JO",
	"KZ",
	"KE",
	"KI",
	"KP",
	"KR",
	"KW",
	"KG",
	"LA",
	"LV",
	"LB",
	"LS",
	"LR",
	"LY",
	"LI",
	"LT",
	"LU",
	"MO",
	"MK",
	"MG",
	"MW",
	"MY",
	"MV",
	"ML",
	"MT",
	"MH",
	"MQ",
	"MR",
	"MU",
	"YT",
	"MX",
	"FM",
	"MD",
	"MC",
	"MN",
	"ME",
	"MS",
	"MA",
	"MZ",
	"MM",
	"NA",
	"NR",
	"NP",
	"NL",
	"NC",
	"NZ",
	"NI",
	"NE",
	"NG",
	"NU",
	"NF",
	"MP",
	"NO",
	"OM",
	"PK",
	"PW",
	"PS",
	"PA",
	"PG",
	"PY",
	"PE",
	"PH",
	"PN",
	"PL",
	"PT",
	"PR",
	"QA",
	"RE",
	"RO",
	"RU",
	"RW",
	"BL",
	"SH",
	"KN",
	"LC",
	"MF",
	"PM",
	"VC",
	"WS",
	"SM",
	"ST",
	"SA",
	"SN",
	"RS",
	"SC",
	"SL",
	"SG",
	"SX",
	"SK",
	"SI",
	"SB",
	"SO",
	"ZA",
	"GS",
	"SS",
	"ES",
	"LK",
	"SD",
	"SR",
	"SJ",
	"SZ",
	"SE",
	"CH",
	"SY",
	"TW",
	"TJ",
	"TZ",
	"TH",
	"TL",
	"TG",
	"TK",
	"TO",
	"TT",
	"TN",
	"TR",
	"TM",
	"TC",
	"TV",
	"UG",
	"UA",
	"AE",
	"GB",
	"US",
	"UM",
	"UY",
	"UZ",
	"VU",
	"VE",
	"VN",
	"VG",
	"VI",
	"WF",
	"EH",
	"YE",
	"ZM",
	"ZW",
	"XK",
	"XZ",
	"ZZ"
];

function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var BACKBONE_KEY = 'd7dddbf4-2cf0-4f39-9b2a-bb099caae36c';
var suggestStyle = {
  whiteSpace: 'nowrap',
  textOverflow: 'ellipsis',
  width: '100%',
  overflow: 'hidden'
};
function getCommonSuggests(_ref) {
  var context = _ref.context,
      suggestStyle = _ref.suggestStyle,
      rootPredicate = _ref.rootPredicate;
  var client = context.client,
      formatMessage = context.formatMessage;
  var countries = countryCodes.map(function (code) {
    return {
      title: formatMessage({
        id: "enums.countryCode.".concat(code)
      }),
      key: code
    };
  });
  return {
    countryCode: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref2) {
        var q = _ref2.q;
        return {
          cancel: function cancel() {
            return null;
          },
          promise: _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
            return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", {
                      data: matchSorter.matchSorter(countries, q, {
                        keys: ['title', 'key']
                      })
                    });

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }))()
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function CountrySuggestItem(suggestion) {
        return react.jsx("div", {
          style: {}
        }, react.jsx("div", {
          style: suggestStyle
        }, suggestion.title));
      }
    },
    institutionCode: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref4) {
        var q = _ref4.q;

        var _client$v1Get = client.v1Get("/occurrence/search/institutionCode?limit=8&q=".concat(q)),
            promise = _client$v1Get.promise,
            cancel = _client$v1Get.cancel;

        return {
          promise: promise.then(function (response) {
            return {
              data: response.data.map(function (i) {
                return {
                  key: i,
                  title: i
                };
              })
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function InstitutionCodeSuggestItem(suggestion) {
        return react.jsx("div", {
          style: suggestStyle
        }, suggestion.title);
      }
    },
    establishmentMeans: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref5) {
        var _localeContext$locale;

        var q = _ref5.q,
            localeContext = _ref5.localeContext;
        var vocabularyLocale = (localeContext === null || localeContext === void 0 ? void 0 : (_localeContext$locale = localeContext.localeMap) === null || _localeContext$locale === void 0 ? void 0 : _localeContext$locale.vocabulary) || 'en';

        var _client$v1Get2 = client.v1Get("/vocabularies/EstablishmentMeans/concepts?limit=100&q=".concat(q, "&locale=").concat(vocabularyLocale)),
            promise = _client$v1Get2.promise,
            cancel = _client$v1Get2.cancel;

        return {
          promise: promise.then(function (response) {
            return {
              data: response.data.results.map(function (i) {
                return {
                  key: i.name,
                  title: i.label[vocabularyLocale] || i.label.en
                };
              })
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function CatalogNumberSuggestItem(suggestion) {
        return react.jsx("div", {
          style: suggestStyle
        }, suggestion.title);
      }
    },
    catalogNumber: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref6) {
        var q = _ref6.q;

        var _client$v1Get3 = client.v1Get("/occurrence/search/catalogNumber?limit=8&q=".concat(q)),
            promise = _client$v1Get3.promise,
            cancel = _client$v1Get3.cancel;

        return {
          promise: promise.then(function (response) {
            return {
              data: response.data.map(function (i) {
                return {
                  key: i,
                  title: i
                };
              })
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function CatalogNumberSuggestItem(suggestion) {
        return react.jsx("div", {
          style: suggestStyle
        }, suggestion.title);
      }
    },
    datasetKey: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref7) {
        var q = _ref7.q;
        return client.v1Get("/dataset/suggest?limit=8&q=".concat(q));
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function DatasetSuggestItem(suggestion) {
        return react.jsx("div", {
          style: {}
        }, react.jsx("div", {
          style: suggestStyle
        }, suggestion.title));
      }
    },
    datasetKeyFromOccurrenceIndex: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref8) {
        var q = _ref8.q,
            _ref8$size = _ref8.size,
            size = _ref8$size === void 0 ? 100 : _ref8$size;
        var SEARCH = "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              facet {\n                datasetKey(size: $size) {\n                  key\n                  count\n                  dataset {\n                    title\n                  }\n                }\n              }\n            }\n          }\n          ";
        var qPredicate = {
          "type": "like",
          "key": "datasetTitle",
          "value": "*".concat(q.replace(/\s/, '*'), "*")
        };
        var predicate = qPredicate;

        if (rootPredicate) {
          predicate = {
            type: 'and',
            predicates: [rootPredicate, qPredicate]
          };
        }

        var variables = {
          size: size,
          predicate: predicate
        };

        var _client$query = client.query({
          query: SEARCH,
          variables: variables
        }),
            promise = _client$query.promise,
            cancel = _client$query.cancel;

        return {
          promise: promise.then(function (response) {
            var _response$data, _response$data$occurr, _response$data$occurr2;

            return {
              data: (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$occurr = _response$data.occurrenceSearch) === null || _response$data$occurr === void 0 ? void 0 : (_response$data$occurr2 = _response$data$occurr.facet) === null || _response$data$occurr2 === void 0 ? void 0 : _response$data$occurr2.datasetKey.map(function (i) {
                return _objectSpread$c(_objectSpread$c({}, i), {}, {
                  title: i.dataset.title
                });
              }),
              rawData: response.data
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function DatasetSuggestItem(suggestion) {
        return react.jsx("div", {
          style: suggestStyle
        }, suggestion.title);
      }
    },
    publisherKey: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref9) {
        var q = _ref9.q;
        return client.v1Get("/organization/suggest?limit=8&q=".concat(q));
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function PublisherSuggestItem(suggestion) {
        return react.jsx("div", {
          style: {
            maxWidth: '100%'
          }
        }, react.jsx("div", {
          style: suggestStyle
        }, suggestion.title));
      }
    },
    publisherKeyFromOccurrenceIndex: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref10) {
        var q = _ref10.q,
            _ref10$size = _ref10.size,
            size = _ref10$size === void 0 ? 100 : _ref10$size;
        var SEARCH = "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              facet {\n                publishingOrg(size: $size) {\n                  key\n                  publisher {\n                    title\n                  }\n                }\n              }\n            }\n          }\n          ";
        var qPredicate = {
          "type": "like",
          "key": "publisherTitle",
          "value": "*".concat(q.replace(/\s/, '*'), "*")
        };
        var predicate = qPredicate;

        if (rootPredicate) {
          predicate = {
            type: 'and',
            predicates: [rootPredicate, qPredicate]
          };
        }

        var variables = {
          size: size,
          predicate: predicate
        };

        var _client$query2 = client.query({
          query: SEARCH,
          variables: variables
        }),
            promise = _client$query2.promise,
            cancel = _client$query2.cancel;

        return {
          promise: promise.then(function (response) {
            var _response$data2, _response$data2$occur, _response$data2$occur2;

            return {
              data: (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$occur = _response$data2.occurrenceSearch) === null || _response$data2$occur === void 0 ? void 0 : (_response$data2$occur2 = _response$data2$occur.facet) === null || _response$data2$occur2 === void 0 ? void 0 : _response$data2$occur2.publishingOrg.map(function (i) {
                return _objectSpread$c(_objectSpread$c({}, i), {}, {
                  title: i.publisher.title
                });
              }),
              rawData: response.data
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function PublisherSuggestItem(suggestion) {
        return react.jsx("div", {
          style: suggestStyle
        }, suggestion.title);
      }
    },
    taxonKey: {
      //What placeholder to show
      // placeholder: 'Search by scientific name',
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref11) {
        var q = _ref11.q;
        return client.v1Get("/species/suggest?datasetKey=".concat(BACKBONE_KEY, "&limit=20&q=").concat(q));
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.scientificName;
      },
      // how to display the individual suggestions in the list
      render: function ScientificNameSuggestItem(suggestion) {
        var ranks = ['kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species'].map(function (rank, i) {
          return suggestion[rank] && rank !== suggestion.rank.toLowerCase() ? react.jsx("span", {
            key: rank
          }, suggestion[rank]) : null;
        });
        return react.jsx("div", {
          style: {
            maxWidth: '100%'
          }
        }, react.jsx("div", {
          style: suggestStyle
        }, suggestion.status !== 'ACCEPTED' && react.jsx(Tooltip, {
          title: react.jsx("span", null, react.jsx(reactIntl.FormattedMessage, {
            id: "enums.taxonomicStatus.".concat(suggestion.status)
          }))
        }, react.jsx("span", {
          style: {
            display: 'inline-block',
            marginRight: 8,
            width: 8,
            height: 8,
            borderRadius: 4,
            background: 'orange'
          }
        })), suggestion.scientificName), react.jsx("div", {
          style: {
            color: '#aaa',
            fontSize: '0.85em'
          }
        }, react.jsx(Classification, null, ranks)));
      }
    },
    recordedBy: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref12) {
        var q = _ref12.q;

        var _client$v1Get4 = client.v1Get("/occurrence/search/recordedBy?limit=8&q=".concat(q)),
            promise = _client$v1Get4.promise,
            cancel = _client$v1Get4.cancel;

        return {
          promise: promise.then(function (response) {
            return {
              data: response.data.map(function (i) {
                return {
                  key: i,
                  title: i
                };
              })
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function RecordedBySuggestItem(suggestion) {
        return react.jsx("div", {
          style: suggestStyle
        }, suggestion.title);
      }
    },
    recordedByWildcard: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref13) {
        var q = _ref13.q,
            _ref13$size = _ref13.size,
            size = _ref13$size === void 0 ? 100 : _ref13$size;
        var SEARCH = "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              facet {\n                recordedBy(size: $size) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n          ";
        var qPredicate = {
          "type": "like",
          "key": "recordedBy",
          "value": q
        };
        var predicate = qPredicate;

        if (rootPredicate) {
          predicate = {
            type: 'and',
            predicates: [rootPredicate, qPredicate]
          };
        }

        var variables = {
          size: size,
          predicate: predicate,
          include: include
        };

        var _client$query3 = client.query({
          query: SEARCH,
          variables: variables
        }),
            promise = _client$query3.promise,
            cancel = _client$query3.cancel;

        return {
          promise: promise.then(function (response) {
            var _response$data3, _response$data3$occur, _response$data3$occur2;

            return {
              data: (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : (_response$data3$occur = _response$data3.occurrenceSearch) === null || _response$data3$occur === void 0 ? void 0 : (_response$data3$occur2 = _response$data3$occur.facet) === null || _response$data3$occur2 === void 0 ? void 0 : _response$data3$occur2.recordedBy.map(function (i) {
                return _objectSpread$c(_objectSpread$c({}, i), {}, {
                  title: i.key
                });
              }),
              rawData: response.data
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function RecordedBySuggestItem(suggestion) {
        return react.jsx("div", {
          style: suggestStyle
        }, suggestion.title, react.jsx("div", {
          style: {
            fontSize: '0.85em',
            color: '#aaa'
          }
        }, suggestion.count, " results"));
      }
    },
    recordNumber: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref14) {
        var q = _ref14.q;

        var _client$v1Get5 = client.v1Get("/occurrence/search/recordNumber?limit=8&q=".concat(q)),
            promise = _client$v1Get5.promise,
            cancel = _client$v1Get5.cancel;

        return {
          promise: promise.then(function (response) {
            return {
              data: response.data.map(function (i) {
                return {
                  key: i,
                  title: i
                };
              })
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function RecordNumberSuggestItem(suggestion) {
        return react.jsx("div", {
          style: suggestStyle
        }, suggestion.title);
      }
    },
    gadmGid: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref15) {
        var q = _ref15.q;

        var _client$v1Get6 = client.v1Get("/geocode/gadm/search?limit=100&q=".concat(q)),
            promise = _client$v1Get6.promise,
            cancel = _client$v1Get6.cancel;

        return {
          promise: promise.then(function (response) {
            return {
              data: response.data.results.map(function (x) {
                return _objectSpread$c({
                  title: x.name,
                  key: x.id
                }, x);
              })
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function GadmGidSuggestItem(suggestion) {
        var _suggestion$higherReg;

        return react.jsx("div", {
          style: {
            maxWidth: '100%'
          }
        }, react.jsx("div", {
          style: suggestStyle
        }, suggestion.title), (suggestion === null || suggestion === void 0 ? void 0 : (_suggestion$higherReg = suggestion.higherRegions) === null || _suggestion$higherReg === void 0 ? void 0 : _suggestion$higherReg.length) > 0 && react.jsx(Classification, {
          style: {
            opacity: .8
          }
        }, suggestion.higherRegions.map(function (x) {
          return react.jsx("span", null, x.name);
        })));
      }
    },
    institutionKey: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref16) {
        var q = _ref16.q;

        var _client$v1Get7 = client.v1Get("/grscicoll/institution/suggest?limit=8&q=".concat(q)),
            promise = _client$v1Get7.promise,
            cancel = _client$v1Get7.cancel;

        return {
          promise: promise.then(function (response) {
            return {
              data: response.data.map(function (i) {
                return _objectSpread$c({
                  title: i.name
                }, i);
              })
            };
          }),
          cancel: cancel
        };
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function institutionKeySuggestItem(suggestion) {
        return react.jsx("div", {
          style: suggestStyle
        }, suggestion.title, react.jsx("div", null, "Code: ", suggestion.code));
      }
    },
    networkKey: {
      //What placeholder to show
      placeholder: 'search.placeholders.default',
      // how to get the list of suggestion data
      getSuggestions: function getSuggestions(_ref17) {
        var q = _ref17.q;
        return client.v1Get("/network/suggest?limit=20&q=".concat(q));
      },
      // how to map the results to a single string value
      getValue: function getValue(suggestion) {
        return suggestion.title;
      },
      // how to display the individual suggestions in the list
      render: function NetworkKeySuggestItem(suggestion) {
        return react.jsx("div", {
          style: {
            maxWidth: '100%'
          }
        }, react.jsx("div", {
          style: suggestStyle
        }, suggestion.title));
      }
    } // -- Add suggests above this line (required by plopfile.js) --

  };
}

var _excluded$M = ["mustOptions", "mustNotOptions", "filterHandle", "translations", "DisplayName", "loading"];
var TriggerButton = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, ref) {
  var _options$;

  var _ref$mustOptions = _ref.mustOptions,
      mustOptions = _ref$mustOptions === void 0 ? [] : _ref$mustOptions,
      _ref$mustNotOptions = _ref.mustNotOptions,
      mustNotOptions = _ref$mustNotOptions === void 0 ? [] : _ref$mustNotOptions,
      filterHandle = _ref.filterHandle,
      _ref$translations = _ref.translations,
      translations = _ref$translations === void 0 ? {} : _ref$translations,
      _ref$DisplayName = _ref.DisplayName,
      DisplayName = _ref$DisplayName === void 0 ? function (_ref2) {
    var id = _ref2.id;
    return react.jsx(React__default["default"].Fragment, null, id);
  } : _ref$DisplayName,
      loading = _ref.loading,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$M);

  var currentFilterContext = React.useContext(FilterContext);
  var _translations$count = translations.count,
      count = _translations$count === void 0 ? "filters.".concat(filterHandle, ".count") : _translations$count;
      translations.isNotNull;
      translations.isNull;
      var _translations$name = translations.name,
      name = _translations$name === void 0 ? "filters.".concat(filterHandle, ".name") : _translations$name;
  var onClear = React.useCallback(function () {
    currentFilterContext.setFullField(filterHandle, [], []);
  }, [currentFilterContext, filterHandle]);
  var TextSummary;
  var isNegated = mustNotOptions.length > 0;
  var options = mustOptions.concat(mustNotOptions);

  if (options.length === 0) {
    // has nothing set
    TextSummary = react.jsx(reactIntl.FormattedMessage, {
      id: name
    });
  } else if (mustOptions.length > 0 && mustNotOptions.length > 0) {
    // has both must and must not
    TextSummary = react.jsx("span", null, "Complex filter");
    isNegated = false;
  } else if (((_options$ = options[0]) === null || _options$ === void 0 ? void 0 : _options$.type) === 'isNotNull') {
    // it is a statement about existence
    isNegated = false;

    if (mustNotOptions.length > 0) {
      // TextSummary = <FormattedMessage
      //   id={isNull}
      //   defaultMessage={`Does not have: ${filterHandle}`}
      // />
      TextSummary = react.jsx(React__default["default"].Fragment, null, react.jsx(reactIntl.FormattedMessage, {
        id: name
      }), " : ", react.jsx(reactIntl.FormattedMessage, {
        id: 'filterSupport.nullOrNot.isNull'
      }));
    } else {
      // TextSummary = <FormattedMessage
      //   id={isNotNull}
      //   defaultMessage={`Have: ${filterHandle}`}
      // />
      TextSummary = react.jsx(React__default["default"].Fragment, null, react.jsx(reactIntl.FormattedMessage, {
        id: name
      }), " : ", react.jsx(reactIntl.FormattedMessage, {
        id: 'filterSupport.nullOrNot.isNotNull'
      }));
    }
  } else if (options.length === 1) {
    // exactly one option
    TextSummary = react.jsx(React__default["default"].Fragment, null, react.jsx(reactIntl.FormattedMessage, {
      id: name
    }), " : ", react.jsx(DisplayName, {
      id: options[0]
    }));
  } else if (options.length > 1) {
    // multiple selected
    TextSummary = react.jsx(reactIntl.FormattedMessage, {
      id: count,
      defaultMessage: count,
      values: {
        num: options.length
      }
    });
  }

  return react.jsx(FilterButton, _extends__default["default"]({
    loading: loading,
    isActive: options.length > 0,
    onClearRequest: onClear,
    ref: ref,
    isNegated: isNegated
  }, props), TextSummary);
});
TriggerButton.displayName = 'TriggerButton';

var _excluded$L = ["filterHandle", "LabelFromID", "config", "translations"];
var FilterContent$6 = function FilterContent(_ref) {
  var config = _ref.config,
      translations = _ref.translations,
      labelledById = _ref.labelledById,
      LabelFromID = _ref.LabelFromID,
      hide = _ref.hide,
      _onApply = _ref.onApply,
      _onCancel = _ref.onCancel,
      onFilterChange = _ref.onFilterChange,
      focusRef = _ref.focusRef,
      filterHandle = _ref.filterHandle,
      initFilter = _ref.initFilter;

  var _React$useState = React__default["default"].useState(nanoid.nanoid),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 1),
      id = _React$useState2[0];

  var initialOptions = get_1(initFilter, "must.".concat(filterHandle), []);

  var _useState = React.useState(initialOptions.filter(function (x) {
    return x.type !== 'isNotNull';
  })),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      options = _useState2[0],
      setOptions = _useState2[1];

  var suggestConfig = config.suggestConfig;
  var singleSelect = config.singleSelect;
  var Label = config.LabelFromID || LabelFromID;

  var aboutText = translations.description && react.jsx(reactIntl.FormattedMessage, {
    id: translations.description || "filters.".concat(filterHandle, ".description"),
    defaultMessage: translations.description
  });

  return react.jsx(UncontrollableFilter, {
    labelledById: labelledById,
    onApply: _onApply,
    onCancel: _onCancel,
    title: react.jsx(reactIntl.FormattedMessage, {
      id: (translations === null || translations === void 0 ? void 0 : translations.name) || "filters.".concat(filterHandle, ".name"),
      defaultMessage: translations === null || translations === void 0 ? void 0 : translations.name
    }),
    aboutText: aboutText,
    supportsExist: config.supportsExist,
    onFilterChange: onFilterChange,
    filterName: filterHandle,
    formId: id,
    defaultFilter: initFilter
  }, function (_ref2) {
    var _config$specific;

    var filter = _ref2.filter,
        toggle = _ref2.toggle,
        setFullField = _ref2.setFullField,
        checkedMap = _ref2.checkedMap,
        formId = _ref2.formId,
        summaryProps = _ref2.summaryProps,
        footerProps = _ref2.footerProps,
        isExistenceFilter = _ref2.isExistenceFilter;

    if (isExistenceFilter) {
      return react.jsx(Exists, {
        footerProps: footerProps,
        setFullField: setFullField,
        onApply: _onApply,
        onCancel: _onCancel,
        filter: filter,
        hide: hide,
        filterHandle: filterHandle
      });
    }

    return react.jsx(React__default["default"].Fragment, null, react.jsx(Suggest$3, _extends__default["default"]({}, suggestConfig, {
      allowEmptyQueries: config === null || config === void 0 ? void 0 : (_config$specific = config.specific) === null || _config$specific === void 0 ? void 0 : _config$specific.allowEmptyQueries,
      focusRef: focusRef,
      onKeyPress: function onKeyPress(e) {
        return e.which === keyCodes.ENTER ? _onApply({
          filter: filter,
          hide: hide
        }) : null;
      }
      /*onKeyPress={e => {
        if (e.which === keyCodes.ENTER) {
          if (e.target.value === '') {
            onApply({ filter, hide });
          } else {
            const val = e.target.value;
            const allOptions = union(options, [val]);
            setOptions(allOptions);
            toggle(filterHandle, val);
          }
        }
      }}*/
      ,
      onSuggestionSelected: function onSuggestionSelected(_ref3) {
        var item = _ref3.item;
        if (!item) return;
        var allOptions = union_1(options, [item.key]);
        setOptions(allOptions);

        if (singleSelect) {
          setOptions([item.key]);
          setFullField(filterHandle, [item.key], []).then(function (responseFilter) {
            return _onApply({
              filter: responseFilter,
              hide: hide
            });
          })["catch"](function (err) {
            return console.log(err);
          });
        } else {
          toggle(filterHandle, item.key);
        }
      }
    })), options.length === 0 && config.showAboutAsDefault && typeof aboutText !== 'undefined' && react.jsx(Prose, {
      as: FilterBodyDescription
    }, aboutText), options.length > 0 && react.jsx(React__default["default"].Fragment, null, react.jsx(SummaryBar, _extends__default["default"]({}, summaryProps, {
      style: {
        marginTop: 0
      }
    })), react.jsx(FilterBody, null, react.jsx("form", {
      id: formId,
      onSubmit: function onSubmit(e) {
        return e.preventDefault();
      }
    }, options.map(function (key) {
      return react.jsx(Option, {
        key: key,
        helpVisible: true,
        label: react.jsx(Label, {
          id: key
        }),
        checked: checkedMap.has(key),
        onChange: function onChange() {
          return toggle(filterHandle, key);
        }
      });
    }))), react.jsx(Footer, _extends__default["default"]({}, footerProps, {
      onApply: function onApply() {
        return _onApply({
          filter: filter,
          hide: hide
        });
      },
      onCancel: function onCancel() {
        return _onCancel({
          filter: filter,
          hide: hide
        });
      }
    }))));
  });
};
function Popover$6(_ref4) {
  var filterHandle = _ref4.filterHandle,
      LabelFromID = _ref4.LabelFromID,
      config = _ref4.config,
      _ref4$translations = _ref4.translations,
      translations = _ref4$translations === void 0 ? {} : _ref4$translations,
      props = _objectWithoutProperties__default["default"](_ref4, _excluded$L);

  return react.jsx(Popover$8, _extends__default["default"]({}, props, {
    content: react.jsx(FilterContent$6, {
      filterHandle: filterHandle,
      translations: translations,
      LabelFromID: LabelFromID,
      config: config
    })
  }));
}

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */

function last$1(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

var last_1 = last$1;

var baseFlatten$2 = _baseFlatten,
    baseIteratee$1 = _baseIteratee,
    baseRest$2 = _baseRest,
    baseUniq = _baseUniq,
    isArrayLikeObject$1 = isArrayLikeObject_1,
    last = last_1;

/**
 * This method is like `_.union` except that it accepts `iteratee` which is
 * invoked for each element of each `arrays` to generate the criterion by
 * which uniqueness is computed. Result values are chosen from the first
 * array in which the value occurs. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */
var unionBy = baseRest$2(function(arrays) {
  var iteratee = last(arrays);
  if (isArrayLikeObject$1(iteratee)) {
    iteratee = undefined;
  }
  return baseUniq(baseFlatten$2(arrays, 1, isArrayLikeObject$1, true), baseIteratee$1(iteratee));
});

var unionBy_1 = unionBy;

/**
 * Generate a range or a terms predicate. This is useful for years, 
 * that can both be queried as a range or as a term. 
 * E.g. year=1950,2000
 * @param {string} value 
 * @param {string} upperBound 
 * @param {string} lowerBound 
 */
function rangeOrTerm(value) {
  var lowerBound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'gte';
  var upperBound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'lte';
  // has a comma in the string
  var delimter = value.indexOf(',') > -1 ? ',' : null;

  if (!delimter) {
    // no comma, but a dash, and since it isn't the first character then it isn't a negation
    delimter = value.indexOf('-') > 0 ? '-' : null;
  }

  if (typeof value !== 'string' || !delimter) {
    return {
      type: 'equals',
      value: value
    };
  } else {
    var _value;

    var values = value.split(delimter);
    var cleanedValues = values.map(function (s) {
      return s.trim();
    }).map(function (s) {
      return s === '*' || s === '' ? undefined : s;
    });
    return {
      type: 'range',
      value: (_value = {}, _defineProperty__default["default"](_value, upperBound, cleanedValues[0]), _defineProperty__default["default"](_value, lowerBound, cleanedValues[1]), _value)
    };
  }
}

var _excluded$K = ["filterHandle", "LabelFromID", "translations", "config"];
var FilterContent$5 = function FilterContent(_ref) {
  var _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      translations = _ref.translations,
      labelledById = _ref.labelledById,
      LabelFromID = _ref.LabelFromID,
      hide = _ref.hide,
      _onApply = _ref.onApply,
      _onCancel = _ref.onCancel,
      onFilterChange = _ref.onFilterChange,
      focusRef = _ref.focusRef,
      filterHandle = _ref.filterHandle,
      initFilter = _ref.initFilter;

  var _useIntl = reactIntl.useIntl(),
      formatMessage = _useIntl.formatMessage;

  var _config$upperBound = config.upperBound,
      upperBound = _config$upperBound === void 0 ? 'lte' : _config$upperBound,
      _config$lowerBound = config.lowerBound,
      lowerBound = _config$lowerBound === void 0 ? 'gte' : _config$lowerBound,
      _config$placeholder = config.placeholder,
      placeholder = _config$placeholder === void 0 ? 'E.g. 100,200' : _config$placeholder;

  var _React$useState = React__default["default"].useState(nanoid.nanoid),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 1),
      id = _React$useState2[0];

  var initialOptions = get_1(initFilter, "must.".concat(filterHandle), []);

  var _useState = React.useState(initialOptions.filter(function (x) {
    return x.type !== 'isNotNull';
  })),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      options = _useState2[0],
      setOptions = _useState2[1];

  var _useState3 = React.useState(''),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      inputValue = _useState4[0],
      setValue = _useState4[1];

  var formattedPlaceholder = formatMessage({
    id: placeholder
  });
  return react.jsx(UncontrollableFilter, {
    labelledById: labelledById,
    title: react.jsx(reactIntl.FormattedMessage, {
      id: (translations === null || translations === void 0 ? void 0 : translations.name) || "filters.".concat(filterHandle, ".name"),
      defaultMessage: translations === null || translations === void 0 ? void 0 : translations.name
    }),
    aboutText: translations.description && react.jsx(reactIntl.FormattedMessage, {
      id: translations.description || "filters.".concat(filterHandle, ".description"),
      defaultMessage: translations.description
    }),
    onFilterChange: onFilterChange,
    supportsExist: config.supportsExist,
    filterName: filterHandle,
    formId: id,
    defaultFilter: initFilter
  }, function (_ref2) {
    var filter = _ref2.filter,
        toggle = _ref2.toggle,
        setFullField = _ref2.setFullField,
        checkedMap = _ref2.checkedMap,
        formId = _ref2.formId,
        summaryProps = _ref2.summaryProps,
        footerProps = _ref2.footerProps,
        isExistenceFilter = _ref2.isExistenceFilter;

    if (isExistenceFilter) {
      return react.jsx(Exists, {
        footerProps: footerProps,
        setFullField: setFullField,
        onApply: _onApply,
        onCancel: _onCancel,
        filter: filter,
        hide: hide,
        filterHandle: filterHandle
      });
    }

    return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
      style: {
        margin: '10px',
        zIndex: 10,
        display: 'inline-block',
        position: 'relative'
      }
    }, react.jsx(Input, {
      ref: focusRef,
      value: inputValue,
      onChange: function onChange(e) {
        var value = e.target.value;

        if (config.regex) {
          if (e.target.value.match(config.regex) !== null) {
            setValue(value);
          }
        } else {
          setValue(value);
        }
      },
      placeholder: formattedPlaceholder,
      onKeyPress: function onKeyPress(e) {
        var value = e.target.value;

        if (e.which === keyCodes.ENTER) {
          if (value === '') {
            _onApply({
              filter: filter,
              hide: hide
            });
          } else {
            var q = rangeOrTerm(value, upperBound, lowerBound);
            setValue('');
            var allOptions = unionBy_1([q], options, hash$1);
            setOptions(allOptions);
            toggle(filterHandle, q);
          }
        }
      }
    })), options.length > 0 && react.jsx(React__default["default"].Fragment, null, react.jsx(SummaryBar, _extends__default["default"]({}, summaryProps, {
      style: {
        marginTop: 0
      }
    })), react.jsx(FilterBody, null, react.jsx("form", {
      id: formId,
      onSubmit: function onSubmit(e) {
        return e.preventDefault();
      }
    }, options.map(function (option) {
      var helpText;

      if (option.type === 'equals') {
        helpText = react.jsx(reactIntl.FormattedMessage, {
          id: "intervals.description.e",
          defaultMessage: 'Filter name',
          values: {
            is: option.value
          }
        });
      } else {
        helpText = react.jsx(React__default["default"].Fragment, null, (option === null || option === void 0 ? void 0 : option.value) && (option === null || option === void 0 ? void 0 : option.value[lowerBound]) && react.jsx(reactIntl.FormattedMessage, {
          id: "intervals.description.".concat(lowerBound),
          defaultMessage: 'Filter name',
          values: {
            from: option === null || option === void 0 ? void 0 : option.value[lowerBound]
          }
        }), (option === null || option === void 0 ? void 0 : option.value) && (option === null || option === void 0 ? void 0 : option.value[upperBound]) && (option === null || option === void 0 ? void 0 : option.value[lowerBound]) && react.jsx(React__default["default"].Fragment, null, ".\xA0"), (option === null || option === void 0 ? void 0 : option.value) && (option === null || option === void 0 ? void 0 : option.value[upperBound]) && react.jsx(reactIntl.FormattedMessage, {
          id: "intervals.description.".concat(upperBound),
          defaultMessage: 'Filter name',
          values: {
            to: option === null || option === void 0 ? void 0 : option.value[upperBound]
          }
        }));
      }

      return react.jsx(Option, {
        key: hash$1(option),
        helpVisible: true,
        label: react.jsx(LabelFromID, {
          id: option
        }),
        helpText: helpText,
        checked: checkedMap.has(hash$1(option)),
        onChange: function onChange() {
          return toggle(filterHandle, option);
        }
      });
    }))), react.jsx(Footer, _extends__default["default"]({}, footerProps, {
      onApply: function onApply() {
        return _onApply({
          filter: filter,
          hide: hide
        });
      },
      onCancel: function onCancel() {
        return _onCancel({
          filter: filter,
          hide: hide
        });
      }
    }))));
  });
};
function Popover$5(_ref3) {
  var filterHandle = _ref3.filterHandle,
      LabelFromID = _ref3.LabelFromID,
      _ref3$translations = _ref3.translations,
      translations = _ref3$translations === void 0 ? {} : _ref3$translations,
      config = _ref3.config,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded$K);

  return react.jsx(Popover$8, _extends__default["default"]({}, props, {
    content: react.jsx(FilterContent$5, {
      filterHandle: filterHandle,
      LabelFromID: LabelFromID,
      translations: translations,
      config: config
    })
  }));
}

var _excluded$J = ["filterHandle", "LabelFromID", "translations", "config"];
var FilterContent$4 = function FilterContent(_ref) {
  var config = _ref.config,
      translations = _ref.translations,
      LabelFromID = _ref.LabelFromID,
      hide = _ref.hide,
      labelledById = _ref.labelledById,
      _onApply = _ref.onApply,
      _onCancel = _ref.onCancel,
      onFilterChange = _ref.onFilterChange,
      focusRef = _ref.focusRef,
      filterHandle = _ref.filterHandle,
      initFilter = _ref.initFilter;

  var _useState = React.useState(nanoid.nanoid),
      _useState2 = _slicedToArray__default["default"](_useState, 1),
      id = _useState2[0];

  var options = config.options;
  var mustNotLength = get_1(initFilter, "must_not.".concat(filterHandle), []).length;

  var _useState3 = React.useState(mustNotLength > 0 && config.supportsNegation),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      isNegated = _useState4[0],
      setNegated = _useState4[1];

  return react.jsx(UncontrollableFilter, {
    labelledById: labelledById,
    onApply: _onApply,
    onCancel: _onCancel,
    title: react.jsx(reactIntl.FormattedMessage, {
      id: (translations === null || translations === void 0 ? void 0 : translations.name) || "filters.".concat(filterHandle, ".name"),
      defaultMessage: translations === null || translations === void 0 ? void 0 : translations.name
    }),
    hasHelpTexts: config.hasOptionDescriptions,
    supportsExist: config.supportsExist,
    aboutText: translations.description && react.jsx(reactIntl.FormattedMessage, {
      id: translations.description || "filters.".concat(filterHandle, ".description"),
      defaultMessage: translations.description
    }),
    isNegated: isNegated,
    onFilterChange: onFilterChange,
    filterName: filterHandle,
    formId: id,
    defaultFilter: initFilter,
    defaultHelpVisible: config.showOptionHelp
  }, function (_ref2) {
    var helpVisible = _ref2.helpVisible,
        negateField = _ref2.negateField,
        toggle = _ref2.toggle,
        setFullField = _ref2.setFullField,
        filter = _ref2.filter,
        checkedMap = _ref2.checkedMap,
        formId = _ref2.formId,
        summaryProps = _ref2.summaryProps,
        footerProps = _ref2.footerProps,
        isExistenceFilter = _ref2.isExistenceFilter;

    if (isExistenceFilter) {
      return react.jsx(Exists, {
        footerProps: footerProps,
        setFullField: setFullField,
        onApply: _onApply,
        onCancel: _onCancel,
        filter: filter,
        hide: hide,
        filterHandle: filterHandle
      });
    }

    return react.jsx(React__default["default"].Fragment, null, config.supportsNegation && react.jsx(AdditionalControl, {
      checked: isNegated,
      onChange: function onChange(e) {
        negateField(filterHandle, !isNegated);
        setNegated(!isNegated);
      }
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "filterSupport.excludeSelected",
      defaultMessage: "Exclude selected"
    })), react.jsx(SummaryBar, summaryProps), react.jsx(FilterBody, {
      onKeyPress: function onKeyPress(e) {
        if (e.shiftKey && e.which === keyCodes.ENTER) _onApply({
          filter: filter,
          hide: hide
        });
      }
    }, react.jsx("form", {
      id: formId,
      onSubmit: function onSubmit(e) {
        return e.preventDefault();
      } // onKeyPress={e => e.which === keyCodes.ENTER ? onApply({ filter, hide }) : null}

    }, options.map(function (concept, index) {
      return react.jsx(Option, {
        isRadio: config.isRadio,
        innerRef: index === 0 ? focusRef : null,
        key: concept.key,
        helpVisible: helpVisible,
        helpText: concept.desc,
        label: react.jsx(LabelFromID, {
          id: concept.key
        }) // label={<LabelFromID id={concept.key} />}
        ,
        checked: checkedMap.has(concept.key),
        onChange: function onChange() {
          if (config.isRadio) {
            setFullField(filterHandle, [concept.key], !isNegated);
          } else {
            toggle(filterHandle, concept.key, !isNegated);
          }
        }
      });
    }))), react.jsx(Footer, _extends__default["default"]({}, footerProps, {
      onApply: function onApply() {
        return _onApply({
          filter: filter,
          hide: hide
        });
      },
      onCancel: function onCancel() {
        return _onCancel({
          filter: filter,
          hide: hide
        });
      }
    })));
  });
};
function Popover$4(_ref3) {
  var filterHandle = _ref3.filterHandle,
      LabelFromID = _ref3.LabelFromID,
      _ref3$translations = _ref3.translations,
      translations = _ref3$translations === void 0 ? {} : _ref3$translations,
      config = _ref3.config,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded$J);

  return react.jsx(Popover$8, _extends__default["default"]({}, props, {
    content: react.jsx(FilterContent$4, {
      filterHandle: filterHandle,
      LabelFromID: LabelFromID,
      translations: translations,
      config: config
    })
  }));
}

var _excluded$I = ["filterHandle", "LabelFromID", "translations", "config"];
var FilterContent$3 = function FilterContent(_ref) {
  var _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      translations = _ref.translations,
      hide = _ref.hide,
      _onApply = _ref.onApply,
      _onCancel = _ref.onCancel,
      onFilterChange = _ref.onFilterChange,
      focusRef = _ref.focusRef,
      filterHandle = _ref.filterHandle,
      initFilter = _ref.initFilter;
  var _config$placeholder = config.placeholder,
      placeholder = _config$placeholder === void 0 ? 'Input text' : _config$placeholder;

  var _React$useState = React__default["default"].useState(nanoid.nanoid),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 1),
      id = _React$useState2[0];

  var _useState = React.useState([]),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      options = _useState2[0],
      setOptions = _useState2[1];

  var _useState3 = React.useState(''),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      inputValue = _useState4[0],
      setValue = _useState4[1];

  var mustNotLength = get_1(initFilter, "must_not.".concat(filterHandle), []).length;

  var _useState5 = React.useState(mustNotLength > 0 && config.supportsNegation),
      _useState6 = _slicedToArray__default["default"](_useState5, 2),
      isNegated = _useState6[0],
      setNegated = _useState6[1];

  var _useState7 = React.useState(false),
      _useState8 = _slicedToArray__default["default"](_useState7, 2),
      isComplex = _useState8[0],
      setComplex = _useState8[1];

  React.useEffect(function () {
    var initialMustOptions = get_1(initFilter, "must.".concat(filterHandle), []);
    var initialMustNotOptions = get_1(initFilter, "must_not.".concat(filterHandle), []);
    var notNullFilters = initialMustOptions.filter(function (x) {
      return x.type === 'isNotNull';
    });
    var nullFilters = initialMustNotOptions.filter(function (x) {
      return x.type === 'isNotNull';
    });
    var typeCount = [initialMustOptions, initialMustNotOptions, notNullFilters, nullFilters].reduce(function (prev, curr) {
      prev += curr.length > 0 ? 1 : 0;
      return prev;
    }, 0);
    setComplex(typeCount > 1);

    if (typeCount < 2) {
      setOptions(initialMustOptions.length > 0 ? initialMustOptions : initialMustNotOptions);
    }
  }, [initFilter]);

  if (isComplex) {
    console.log('Complexity above what filter supports. Show dump of filter instead.');
  }

  var singleSelect = config.singleSelect;
  var pattern = config.restrictWildcards ? /^(?![\*\?]).*/g : undefined;
  return react.jsx(UncontrollableFilter, {
    labelledById: false,
    title: react.jsx(reactIntl.FormattedMessage, {
      id: (translations === null || translations === void 0 ? void 0 : translations.name) || "filters.".concat(filterHandle, ".name"),
      defaultMessage: translations === null || translations === void 0 ? void 0 : translations.name
    }),
    aboutText: translations.description && react.jsx(reactIntl.FormattedMessage, {
      id: translations.description || "filters.".concat(filterHandle, ".description"),
      defaultMessage: translations.description
    }),
    onFilterChange: onFilterChange,
    supportsExist: config.supportsExist,
    filterName: filterHandle,
    isNegated: isNegated,
    formId: id,
    defaultFilter: initFilter
  }, function (_ref2) {
    var filter = _ref2.filter,
        negateField = _ref2.negateField,
        toggle = _ref2.toggle,
        setFullField = _ref2.setFullField,
        checkedMap = _ref2.checkedMap,
        formId = _ref2.formId,
        summaryProps = _ref2.summaryProps,
        footerProps = _ref2.footerProps,
        isExistenceFilter = _ref2.isExistenceFilter;

    if (isExistenceFilter) {
      return react.jsx(Exists, {
        footerProps: footerProps,
        setFullField: setFullField,
        onApply: _onApply,
        onCancel: _onCancel,
        filter: filter,
        hide: hide,
        filterHandle: filterHandle
      });
    }

    return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
      css: inputStyle
    }, react.jsx(Input, {
      ref: focusRef,
      value: inputValue,
      onChange: function onChange(e) {
        var value = e.target.value;

        if (pattern) {
          if (value.match(pattern) !== null) {
            setValue(value);
          }
        } else {
          setValue(value);
        }
      },
      placeholder: placeholder,
      onKeyPress: function onKeyPress(e) {
        var value = e.target.value;

        if (e.which === keyCodes.ENTER) {
          if (value === '') {
            _onApply({
              filter: filter,
              hide: hide
            });
          } else if (singleSelect) {
            setOptions([value]);
            var params = isNegated ? [filterHandle, [], [value]] : [filterHandle, [value], []];
            setFullField.apply(void 0, params).then(function (responseFilter) {
              return _onApply({
                filter: responseFilter,
                hide: hide
              });
            })["catch"](function (err) {
              return console.log(err);
            });
          } else {
            setValue('');

            var allOptions = _toConsumableArray__default["default"](new Set([value].concat(_toConsumableArray__default["default"](options))));

            setOptions(allOptions);
            toggle(filterHandle, value, !isNegated);
          }
        }
      }
    })), typeof isExistenceFilter !== 'undefined' && config.supportsNegation && react.jsx(AdditionalControl, {
      checked: isNegated,
      onChange: function onChange(e) {
        negateField(filterHandle, !isNegated);
        setNegated(!isNegated);
      }
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "filterSupport.excludeSelected",
      defaultMessage: "Exclude selected"
    })), options.length > 0 && typeof isExistenceFilter !== 'undefined' && react.jsx(React__default["default"].Fragment, null, react.jsx(SummaryBar, summaryProps), react.jsx(FilterBody, null, react.jsx("form", {
      id: formId,
      onSubmit: function onSubmit(e) {
        return e.preventDefault();
      }
    }, options.map(function (option) {
      return react.jsx(Option, {
        key: option,
        helpVisible: false,
        label: option,
        checked: checkedMap.has(option),
        onChange: function onChange() {
          return toggle(filterHandle, option, !isNegated);
        }
      });
    }))), react.jsx(Footer, _extends__default["default"]({}, footerProps, {
      onApply: function onApply() {
        return _onApply({
          filter: filter,
          hide: hide
        });
      },
      onCancel: function onCancel() {
        return _onCancel({
          filter: filter,
          hide: hide
        });
      }
    }))));
  });
};
function Popover$3(_ref3) {
  var filterHandle = _ref3.filterHandle,
      LabelFromID = _ref3.LabelFromID,
      _ref3$translations = _ref3.translations,
      translations = _ref3$translations === void 0 ? {} : _ref3$translations,
      config = _ref3.config,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded$I);

  return react.jsx(Popover$8, _extends__default["default"]({}, props, {
    content: react.jsx(FilterContent$3, {
      filterHandle: filterHandle,
      LabelFromID: LabelFromID,
      translations: translations,
      config: config
    })
  }));
}
var inputStyle = {
  name: "1ru3akj",
  styles: "margin:10px;z-index:10;display:inline-block;position:relative;&+div{margin-top:0;>div{margin-top:0;}}"
} ;

var _excluded$H = ["filterHandle", "LabelFromID", "translations", "config"];
var FilterContent$2 = function FilterContent(_ref) {
  var _EmotionJSX;

  var config = _ref.config,
      translations = _ref.translations,
      LabelFromID = _ref.LabelFromID,
      hide = _ref.hide,
      labelledById = _ref.labelledById,
      onApply = _ref.onApply,
      onCancel = _ref.onCancel,
      onFilterChange = _ref.onFilterChange,
      focusRef = _ref.focusRef,
      filterHandle = _ref.filterHandle,
      initFilter = _ref.initFilter;

  var _React$useState = React__default["default"].useState(nanoid.nanoid),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 1),
      id = _React$useState2[0];

  if (config.dontWrapInStdFilter) {
    var componentProps = {
      formId: id,
      config: config,
      LabelFromID: LabelFromID,
      translations: translations,
      hide: hide,
      labelledById: labelledById,
      onApply: onApply,
      onCancel: onCancel,
      onFilterChange: onFilterChange,
      focusRef: focusRef,
      filterHandle: filterHandle,
      initFilter: initFilter,
      standardComponents: {
        SummaryBar: SummaryBar,
        FilterBody: FilterBody,
        Footer: Footer,
        Suggest: Suggest$3,
        Option: Option
      },
      FilterState: UncontrollableFilterState,
      FilterContext: FilterContext
    };
    return react.jsx(config.component, componentProps);
  }

  return react.jsx(UncontrollableFilter, (_EmotionJSX = {
    labelledById: labelledById,
    onApply: onApply,
    onCancel: onCancel,
    title: react.jsx(reactIntl.FormattedMessage, {
      id: (translations === null || translations === void 0 ? void 0 : translations.name) || "filters.".concat(filterHandle, ".name"),
      defaultMessage: translations === null || translations === void 0 ? void 0 : translations.name
    }),
    hasHelpTexts: config.hasOptionDescriptions,
    supportsExist: config.supportsExist,
    aboutText: translations.description && react.jsx(reactIntl.FormattedMessage, {
      id: translations.description || "filters.".concat(filterHandle, ".description"),
      defaultMessage: translations.description
    })
  }, _defineProperty__default["default"](_EmotionJSX, "supportsExist", config.supportsExist), _defineProperty__default["default"](_EmotionJSX, "onFilterChange", onFilterChange), _defineProperty__default["default"](_EmotionJSX, "filterName", filterHandle), _defineProperty__default["default"](_EmotionJSX, "formId", id), _defineProperty__default["default"](_EmotionJSX, "defaultFilter", initFilter), _defineProperty__default["default"](_EmotionJSX, "defaultHelpVisible", config.showOptionHelp), _EmotionJSX), function (_ref2) {
    var filter = _ref2.filter,
        toggle = _ref2.toggle,
        setFullField = _ref2.setFullField,
        checkedMap = _ref2.checkedMap,
        formId = _ref2.formId,
        summaryProps = _ref2.summaryProps,
        footerProps = _ref2.footerProps,
        isExistenceFilter = _ref2.isExistenceFilter;

    if (isExistenceFilter) {
      return react.jsx(Exists, {
        footerProps: footerProps,
        setFullField: setFullField,
        onApply: onApply,
        onCancel: onCancel,
        filter: filter,
        hide: hide,
        filterHandle: filterHandle
      });
    }

    var componentProps = {
      filter: filter,
      toggle: toggle,
      setFullField: setFullField,
      checkedMap: checkedMap,
      formId: formId,
      summaryProps: summaryProps,
      footerProps: footerProps,
      isExistenceFilter: isExistenceFilter,
      filterHandle: filterHandle,
      onApply: onApply,
      onCancel: onCancel,
      hide: hide,
      focusRef: focusRef,
      LabelFromID: LabelFromID,
      standardComponents: {
        SummaryBar: SummaryBar,
        FilterBody: FilterBody,
        Footer: Footer,
        Suggest: Suggest$3,
        Option: Option
      }
    };
    return react.jsx(config.component, componentProps);
  });
};
function Popover$2(_ref3) {
  var _EmotionJSX2;

  var filterHandle = _ref3.filterHandle,
      LabelFromID = _ref3.LabelFromID,
      _ref3$translations = _ref3.translations,
      translations = _ref3$translations === void 0 ? {} : _ref3$translations,
      config = _ref3.config,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded$H);

  return react.jsx(Popover$8, _extends__default["default"]({}, props, {
    content: react.jsx(FilterContent$2, (_EmotionJSX2 = {
      filterHandle: filterHandle,
      LabelFromID: LabelFromID,
      translations: translations
    }, _defineProperty__default["default"](_EmotionJSX2, "translations", translations), _defineProperty__default["default"](_EmotionJSX2, "config", config), _EmotionJSX2))
  }));
}

var _excluded$G = ["filterHandle", "LabelFromID", "translations", "config"];
var FilterContent$1 = function FilterContent(_ref) {
  var config = _ref.config;
      _ref.radio;
      var hide = _ref.hide,
      labelledById = _ref.labelledById,
      _onApply = _ref.onApply,
      _onCancel = _ref.onCancel,
      onFilterChange = _ref.onFilterChange,
      focusRef = _ref.focusRef,
      filterHandle = _ref.filterHandle,
      initFilter = _ref.initFilter;

  var _React$useState = React__default["default"].useState(nanoid.nanoid),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 1),
      id = _React$useState2[0];

  var _useState = React.useState(),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      vocabulary = _useState2[0],
      setVocabulary = _useState2[1];

  React__default["default"].useEffect(function () {
    config.getVocabulary({
      lang: 'eng'
    }).then(function (v) {
      return setVocabulary(v);
    })["catch"](function (err) {
      return console.error(err);
    });
  }, [initFilter, filterHandle, config.getVocabulary]);
  return react.jsx(UncontrollableFilter, {
    labelledById: labelledById,
    onApply: _onApply,
    onCancel: _onCancel,
    title: vocabulary === null || vocabulary === void 0 ? void 0 : vocabulary.label,
    aboutText: vocabulary === null || vocabulary === void 0 ? void 0 : vocabulary.definition,
    hasHelpTexts: vocabulary === null || vocabulary === void 0 ? void 0 : vocabulary.hasConceptDefinitions,
    onFilterChange: onFilterChange,
    filterName: filterHandle,
    formId: id,
    defaultFilter: initFilter
  }, function (_ref2) {
    var helpVisible = _ref2.helpVisible;
        _ref2.setField;
        var toggle = _ref2.toggle,
        filter = _ref2.filter,
        checkedMap = _ref2.checkedMap,
        formId = _ref2.formId,
        summaryProps = _ref2.summaryProps,
        footerProps = _ref2.footerProps;
    return react.jsx(React__default["default"].Fragment, null, react.jsx(SummaryBar, summaryProps), react.jsx(FilterBody, null, react.jsx("form", {
      id: formId,
      onSubmit: function onSubmit(e) {
        return e.preventDefault();
      } // onKeyPress={e => e.which === keyCodes.ENTER ? onApply({ filter, hide }) : null}

    }, (vocabulary === null || vocabulary === void 0 ? void 0 : vocabulary.concepts) && vocabulary.concepts.map(function (concept, index) {
      return react.jsx(Option, {
        innerRef: index === 0 ? focusRef : null,
        key: concept.name,
        helpVisible: helpVisible,
        helpText: concept.definition,
        label: concept.label,
        checked: checkedMap.has(concept.name),
        onChange: function onChange() {
          return toggle(filterHandle, concept.name);
        }
      });
    }))), react.jsx(Footer, _extends__default["default"]({}, footerProps, {
      onApply: function onApply() {
        return _onApply({
          filter: filter,
          hide: hide
        });
      },
      onCancel: function onCancel() {
        return _onCancel({
          filter: filter,
          hide: hide
        });
      }
    })));
  });
};
function Popover$1(_ref3) {
  var filterHandle = _ref3.filterHandle;
      _ref3.LabelFromID;
      _ref3.translations;
      var config = _ref3.config,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded$G);

  return react.jsx(Popover$8, _extends__default["default"]({}, props, {
    content: react.jsx(FilterContent$1, {
      filterHandle: filterHandle,
      config: config
    })
  }));
}

var _excluded$F = ["filterHandle", "LabelFromID", "translations", "config"];
var initialSize = 25;
var FilterContent = function FilterContent(_ref) {
  var _data$occurrenceSearc, _data$occurrenceSearc2;

  var _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      translations = _ref.translations,
      hide = _ref.hide,
      _onApply = _ref.onApply,
      _onCancel = _ref.onCancel,
      onFilterChange = _ref.onFilterChange,
      focusRef = _ref.focusRef,
      filterHandle = _ref.filterHandle,
      initFilter = _ref.initFilter;

  var _useQuery = useQuery(config.query, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var _useState = React.useState(initialSize),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];

  var _useState3 = React.useState(''),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      q = _useState4[0],
      setQ = _useState4[1];

  var queryKey = config.queryKey,
      _config$placeholder = config.placeholder,
      placeholder = _config$placeholder === void 0 ? 'Input text' : _config$placeholder;

  var _React$useState = React__default["default"].useState(nanoid.nanoid),
      _React$useState2 = _slicedToArray__default["default"](_React$useState, 1),
      id = _React$useState2[0];

  var initialOptions = get_1(initFilter, "must.".concat(filterHandle), []);

  var _useState5 = React.useState(initialOptions.filter(function (x) {
    return x.type !== 'isNotNull';
  })),
      _useState6 = _slicedToArray__default["default"](_useState5, 2),
      options = _useState6[0],
      setOptions = _useState6[1];

  var _useState7 = React.useState(''),
      _useState8 = _slicedToArray__default["default"](_useState7, 2),
      inputValue = _useState8[0],
      setValue = _useState8[1];

  var _useState9 = React.useState(''),
      _useState10 = _slicedToArray__default["default"](_useState9, 2),
      showSuggestions = _useState10[0],
      setShowSuggestions = _useState10[1];

  var searchContext = React.useContext(SearchContext);
  React.useEffect(function () {
    if (typeof id !== 'undefined') {
      var predicates = [// TODO the search function need to be defined in context
      ];

      if (searchContext !== null && searchContext !== void 0 && searchContext.rootPredicate) {
        predicates.push(searchContext.rootPredicate);
      }

      if (q && q !== '') {
        predicates.push({
          "type": "like",
          "key": queryKey,
          "value": "".concat(q)
        });
      }

      var includePattern = q.replace(/\*/g, '.*').replace(/\?/, '.').replace(/([\?\+\|\{\}\[\]\(\)\"\\])/g, function (m, p1) {
        return '\\' + p1;
      }).toLowerCase();
      load({
        keepDataWhileLoading: size > initialSize,
        variables: {
          size: size,
          include: includePattern,
          predicate: {
            type: 'and',
            predicates: predicates
          }
        }
      });
    }
  }, [size, q]);
  var loadMore = React.useCallback(function () {
    setSize(size + 50);
  }, [size]);
  var search = React.useCallback(function (q) {
    setSize(initialSize);
    setQ(q);
    setShowSuggestions(true);
  }, []);
  var items = data === null || data === void 0 ? void 0 : (_data$occurrenceSearc = data.occurrenceSearch) === null || _data$occurrenceSearc === void 0 ? void 0 : (_data$occurrenceSearc2 = _data$occurrenceSearc.facet) === null || _data$occurrenceSearc2 === void 0 ? void 0 : _data$occurrenceSearc2[queryKey];
  var pattern = config.restrictWildcards ? /^(?![\*\?]).*/g : undefined;
  return react.jsx(UncontrollableFilter, {
    labelledById: false,
    title: react.jsx(reactIntl.FormattedMessage, {
      id: (translations === null || translations === void 0 ? void 0 : translations.name) || "filters.".concat(filterHandle, ".name"),
      defaultMessage: translations === null || translations === void 0 ? void 0 : translations.name
    }),
    aboutText: translations.description && react.jsx(reactIntl.FormattedMessage, {
      id: translations.description || "filters.".concat(filterHandle, ".description"),
      defaultMessage: translations.description
    }),
    onFilterChange: onFilterChange,
    supportsExist: config.supportsExist,
    filterName: filterHandle,
    formId: id,
    defaultFilter: initFilter
  }, function (_ref2) {
    var _data$occurrenceSearc3, _data$occurrenceSearc4;

    var filter = _ref2.filter,
        toggle = _ref2.toggle,
        setFullField = _ref2.setFullField,
        checkedMap = _ref2.checkedMap,
        formId = _ref2.formId,
        summaryProps = _ref2.summaryProps,
        footerProps = _ref2.footerProps,
        isExistenceFilter = _ref2.isExistenceFilter;

    if (isExistenceFilter) {
      return react.jsx(Exists, {
        footerProps: footerProps,
        setFullField: setFullField,
        onApply: _onApply,
        onCancel: _onCancel,
        filter: filter,
        hide: hide,
        filterHandle: filterHandle
      });
    }

    var cardinality = data === null || data === void 0 ? void 0 : (_data$occurrenceSearc3 = data.occurrenceSearch) === null || _data$occurrenceSearc3 === void 0 ? void 0 : (_data$occurrenceSearc4 = _data$occurrenceSearc3.cardinality) === null || _data$occurrenceSearc4 === void 0 ? void 0 : _data$occurrenceSearc4[queryKey];
    var hasMoreSuggestions = cardinality ? (items === null || items === void 0 ? void 0 : items.length) <= cardinality : (items === null || items === void 0 ? void 0 : items.length) === size;
    return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
      style: {
        zIndex: 10,
        display: 'inline-block',
        position: 'relative'
      }
    }, react.jsx("div", {
      style: {
        margin: '10px 10px 0 10px',
        display: 'flex'
      }
    }, react.jsx(Input, {
      ref: focusRef,
      value: inputValue,
      onChange: function onChange(e) {
        var value = e.target.value;

        if (pattern) {
          if (value.match(pattern) !== null) {
            setValue(value);
          }
        } else {
          setValue(value);
        }
      },
      placeholder: placeholder,
      onKeyPress: function onKeyPress(e) {
        e.target.value;

        if (e.which === keyCodes.ENTER) {
          search(inputValue); // if (value === '') {
          //   onApply({ filter, hide });
          // } else {
          //   // trigger search
          //   search(inputValue);
          // }
        }
      }
    }), react.jsx(Button, {
      onClick: function onClick() {
        return search(inputValue);
      }
    }, react.jsx(md.MdSearch, null)))), typeof isExistenceFilter !== 'undefined' && react.jsx(React__default["default"].Fragment, null, react.jsx(AdditionalControl, {
      style: {
        marginBottom: 4
      },
      checked: showSuggestions,
      onChange: function onChange(e) {
        // if (showSuggestions) setValue('');
        if (!showSuggestions) search(inputValue);
        setShowSuggestions(!showSuggestions);
      }
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "filterSupport.showSuggestions",
      defaultMessage: "Show suggestions"
    })), react.jsx(SummaryBar, _extends__default["default"]({}, summaryProps, {
      style: {
        marginTop: 0
      }
    })), react.jsx(FilterBody, {
      style: {
        paddingTop: 0
      }
    }, react.jsx("form", {
      id: formId,
      onSubmit: function onSubmit(e) {
        return e.preventDefault();
      }
    }, showSuggestions && react.jsx(React__default["default"].Fragment, null, loading && !items && react.jsx(React__default["default"].Fragment, null, react.jsx(OptionSkeleton, {
      helpVisible: true
    }), react.jsx(OptionSkeleton, {
      helpVisible: true
    }), react.jsx(OptionSkeleton, {
      helpVisible: true
    })), items && react.jsx(React__default["default"].Fragment, null, !config.disallowLikeFilters && q !== '' && react.jsx("div", {
      style: {
        borderBottom: '1px solid #eee',
        marginBottom: 12,
        paddingBottom: 12
      }
    }, react.jsx(Option, {
      key: q,
      loading: loading,
      helpVisible: true,
      helpText: react.jsx(reactIntl.FormattedMessage, {
        id: "filterSupport.useWildcardPattern",
        defaultMessage: "Search for the pattern"
      }),
      label: q,
      checked: checkedMap.has(hash$1({
        type: 'like',
        value: q
      })),
      onChange: function onChange() {
        var qString = {
          type: 'like',
          value: q
        };
        toggle(filterHandle, qString);
        var allOptions = unionBy_1(options, [qString], hash$1);
        setOptions(allOptions);
      }
    })), items.map(function (option) {
      return react.jsx(Option, {
        key: option.key,
        loading: loading,
        helpVisible: true,
        helpText: react.jsx(reactIntl.FormattedMessage, {
          id: "counts.nRecordsTotal",
          defaultMessage: "{total} records in total",
          values: {
            total: option.count
          }
        }),
        label: option.key,
        checked: checkedMap.has(option.key),
        onChange: function onChange() {
          toggle(filterHandle, option.key);
          var allOptions = unionBy_1(options, [option.key], hash$1);
          setOptions(allOptions);
        }
      });
    }), hasMoreSuggestions && react.jsx("div", {
      style: {
        fontSize: 12,
        marginLeft: 24,
        marginTop: 12
      }
    }, react.jsx(Button, {
      appearance: "primaryOutline",
      onClick: loadMore
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "search.loadMore",
      defaultMessage: "More"
    }))))), !showSuggestions && react.jsx(React__default["default"].Fragment, null, options.length === 0 && react.jsx("div", {
      style: {
        margin: '12px 0',
        opacity: .7
      }
    }, react.jsx(reactIntl.FormattedMessage, {
      id: "filterSupport.wildcardHelp",
      defaultMessage: "More"
    })), options.map(function (option) {
      return react.jsx(Option, {
        key: hash$1(option),
        helpVisible: false // label={option}
        ,
        label: typeof option === 'string' ? option : option.value,
        checked: checkedMap.has(typeof option === 'string' ? option : hash$1(option)),
        onChange: function onChange() {
          return toggle(filterHandle, option);
        }
      });
    })))), options.length > 0 && react.jsx(Footer, _extends__default["default"]({}, footerProps, {
      onApply: function onApply() {
        return _onApply({
          filter: filter,
          hide: hide
        });
      },
      onCancel: function onCancel() {
        return _onCancel({
          filter: filter,
          hide: hide
        });
      }
    }))));
  });
};
function Popover(_ref3) {
  var filterHandle = _ref3.filterHandle,
      LabelFromID = _ref3.LabelFromID,
      _ref3$translations = _ref3.translations,
      translations = _ref3$translations === void 0 ? {} : _ref3$translations,
      config = _ref3.config,
      props = _objectWithoutProperties__default["default"](_ref3, _excluded$F);

  return react.jsx(Popover$8, _extends__default["default"]({}, props, {
    content: react.jsx(FilterContent, {
      filterHandle: filterHandle,
      LabelFromID: LabelFromID,
      translations: translations,
      config: config
    })
  }));
}

function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function getButton(Popover, _ref) {
  var translations = _ref.translations,
      filterHandle = _ref.filterHandle,
      LabelFromID = _ref.LabelFromID;
  return function Trigger(props) {
    var currentFilterContext = React.useContext(FilterContext);
    return react.jsx(Popover, {
      modal: true
    }, react.jsx(TriggerButton, _extends__default["default"]({}, props, {
      translations: translations,
      filterHandle: filterHandle,
      DisplayName: LabelFromID,
      mustOptions: get_1(currentFilterContext.filter, "must.".concat(filterHandle), []),
      mustNotOptions: get_1(currentFilterContext.filter, "must_not.".concat(filterHandle), [])
    })));
  };
}

function buildSimpleText(_ref2) {
  var widgetHandle = _ref2.widgetHandle,
      config = _ref2.config;
  var conf = {
    filterHandle: config.std.filterHandle || widgetHandle,
    translations: config.std.translations,
    config: config.specific,
    LabelFromID: function LabelFromID(_ref3) {
      var id = _ref3.id;
      return id;
    }
  };

  var Popover = function Popover(props) {
    return react.jsx(Popover$3, _extends__default["default"]({}, conf, props));
  };

  return {
    Button: getButton(Popover, conf),
    Popover: Popover,
    Content: function Content(props) {
      return react.jsx(FilterContent$3, _extends__default["default"]({}, conf, props));
    },
    LabelFromID: config.LabelFromID
  };
}

function buildKeywordSearch(_ref4) {
  var labelMap = _ref4.labelMap,
      suggestConfigMap = _ref4.suggestConfigMap,
      widgetHandle = _ref4.widgetHandle,
      config = _ref4.config;

  var LabelFromID = labelMap[config.std.id2labelHandle || widgetHandle] || function (_ref5) {
    var id = _ref5.id;
    return _typeof__default["default"](id) === 'object' ? id.value : id;
  };

  var conf = {
    filterHandle: config.std.filterHandle || widgetHandle,
    translations: config.std.translations,
    // config: config.specific,
    config: _objectSpread$b({
      suggestConfig: suggestConfigMap[config.specific.suggestHandle || widgetHandle]
    }, config.specific),
    LabelFromID: LabelFromID
  };

  var Popover$1 = function Popover$1(props) {
    return react.jsx(Popover, _extends__default["default"]({}, conf, props));
  };

  return {
    Button: getButton(Popover$1, conf),
    Popover: Popover$1,
    Content: function Content(props) {
      return react.jsx(FilterContent, _extends__default["default"]({}, conf, props));
    },
    LabelFromID: LabelFromID
  };
}

function filterBuilder(_ref6) {
  var labelMap = _ref6.labelMap,
      suggestConfigMap = _ref6.suggestConfigMap,
      filterWidgetConfig = _ref6.filterWidgetConfig,
      context = _ref6.context;
  var filters = Object.entries(filterWidgetConfig).reduce(function (acc, _ref7) {
    var _config$std, _config$std$translati, _config$std2;

    var _ref8 = _slicedToArray__default["default"](_ref7, 2),
        widgetHandle = _ref8[0],
        _ref8$ = _ref8[1],
        type = _ref8$.type,
        config = _ref8$.config;

    var builderConfig = {
      widgetHandle: widgetHandle,
      config: config,
      labelMap: labelMap,
      suggestConfigMap: suggestConfigMap,
      context: context
    };
    var filter;

    if (type === 'SUGGEST') {
      filter = buildSuggest(builderConfig);
    } else if (type === 'NUMBER_RANGE') {
      filter = buildNumberRange(builderConfig);
    } else if (type === 'ENUM') {
      filter = buildEnum(builderConfig);
    } else if (type === 'SIMPLE_TEXT') {
      filter = buildSimpleText(builderConfig);
    } else if (type === 'CUSTOM_STANDARD') {
      filter = buildCustomStandard(builderConfig);
    } else if (type === 'VOCAB') {
      filter = buildVocab(builderConfig);
    } else if (type === 'KEYWORD_SEARCH') {
      filter = buildKeywordSearch(builderConfig);
    }

    var trNameId = ((_config$std = config.std) === null || _config$std === void 0 ? void 0 : (_config$std$translati = _config$std.translations) === null || _config$std$translati === void 0 ? void 0 : _config$std$translati.name) || "filters.".concat((config === null || config === void 0 ? void 0 : (_config$std2 = config.std) === null || _config$std2 === void 0 ? void 0 : _config$std2.filterHandle) || widgetHandle, ".name");
    acc[widgetHandle] = _objectSpread$b(_objectSpread$b({}, filter), {}, {
      displayName: context.formatMessage({
        id: trNameId
      })
    });
    return acc;
  }, {});
  return filters;
}

function buildSuggest(_ref9) {
  var widgetHandle = _ref9.widgetHandle,
      config = _ref9.config,
      labelMap = _ref9.labelMap,
      suggestConfigMap = _ref9.suggestConfigMap;
      _ref9.context;

  var LabelFromID = labelMap[config.std.id2labelHandle || widgetHandle] || function (_ref10) {
    var id = _ref10.id;
    return _typeof__default["default"](id) === 'object' ? id.value : id;
  };

  var conf = {
    filterHandle: config.std.filterHandle || widgetHandle,
    translations: config.std.translations,
    config: _objectSpread$b(_objectSpread$b({
      suggestConfig: suggestConfigMap[config.specific.suggestHandle || widgetHandle],
      LabelFromID: LabelFromID
    }, config.specific), config),
    LabelFromID: LabelFromID
  };

  var Popover = function Popover(props) {
    return react.jsx(Popover$6, _extends__default["default"]({}, conf, props));
  };

  return {
    Button: getButton(Popover, conf),
    Popover: Popover,
    Content: function Content(props) {
      return react.jsx(FilterContent$6, _extends__default["default"]({}, conf, props));
    },
    LabelFromID: config.LabelFromID
  };
}

function buildNumberRange(_ref11) {
  var widgetHandle = _ref11.widgetHandle,
      config = _ref11.config,
      labelMap = _ref11.labelMap;
      _ref11.context;
  var LabelFromID = labelMap[config.std.id2labelHandle || widgetHandle];
  var conf = {
    filterHandle: config.std.filterHandle || widgetHandle,
    translations: config.std.translations,
    config: config.specific,
    LabelFromID: LabelFromID
  };

  var Popover = function Popover(props) {
    return react.jsx(Popover$5, _extends__default["default"]({}, conf, props));
  };

  return {
    Button: getButton(Popover, conf),
    Popover: Popover,
    Content: function Content(props) {
      return react.jsx(FilterContent$5, _extends__default["default"]({}, conf, props));
    },
    LabelFromID: LabelFromID
  };
}

function buildEnum(_ref12) {
  var widgetHandle = _ref12.widgetHandle,
      config = _ref12.config,
      labelMap = _ref12.labelMap;

  var fallbackLabel = function fallbackLabel(_ref13) {
    var id = _ref13.id;
    return react.jsx(reactIntl.FormattedMessage, {
      id: "enums.".concat(config.std.filterHandle || widgetHandle, ".").concat(id),
      defaultMessage: prettifyEnum(id)
    });
  };

  var conf = {
    filterHandle: config.std.filterHandle || widgetHandle,
    translations: config.std.translations,
    config: _objectSpread$b(_objectSpread$b({}, config.specific), {}, {
      options: config.specific.hasOptionDescriptions ? config.specific.options : config.specific.options.map(function (x) {
        return {
          key: x
        };
      })
    }),
    LabelFromID: labelMap[config.std.id2labelHandle || widgetHandle] || fallbackLabel
  }; // if (!labelMap[config.std.id2labelHandle || widgetHandle]) console.warn(`No label handler defined for ${widgetHandle} - using fallback`)

  var Popover = function Popover(props) {
    return react.jsx(Popover$4, _extends__default["default"]({}, conf, props));
  };

  return {
    Button: getButton(Popover, conf),
    Popover: Popover,
    Content: function Content(props) {
      return react.jsx(FilterContent$4, _extends__default["default"]({}, conf, props));
    },
    LabelFromID: config.LabelFromID
  };
}

function buildCustomStandard(_ref14) {
  var widgetHandle = _ref14.widgetHandle,
      config = _ref14.config,
      labelMap = _ref14.labelMap;
  var conf = {
    filterHandle: config.std.filterHandle || widgetHandle,
    translations: config.std.translations,
    config: {
      component: config.specific.component,
      dontWrapInStdFilter: config.specific.dontWrapInStdFilter,
      hasOptionDescriptions: config.specific.hasOptionDescriptions,
      supportsExist: config.specific.supportsExist
    },
    LabelFromID: labelMap[config.std.id2labelHandle || widgetHandle] || config.std.id2label
  };

  var Popover = function Popover(props) {
    return react.jsx(Popover$2, _extends__default["default"]({}, conf, props));
  };

  return {
    Button: getButton(Popover, conf),
    Popover: Popover,
    Content: function Content(props) {
      return react.jsx(FilterContent$2, _extends__default["default"]({}, conf, props));
    },
    LabelFromID: config.LabelFromID
  };
}

function buildVocab(_ref15) {
  var widgetHandle = _ref15.widgetHandle,
      config = _ref15.config,
      labelMap = _ref15.labelMap,
      suggestConfigMap = _ref15.suggestConfigMap;
      _ref15.context;
  var conf = {
    filterHandle: config.std.filterHandle || widgetHandle,
    translations: config.std.translations,
    config: _objectSpread$b(_objectSpread$b({
      suggestConfig: suggestConfigMap[config.specific.suggestHandle || widgetHandle],
      LabelFromID: labelMap[config.specific.id2labelHandle]
    }, config.specific), config),
    LabelFromID: labelMap[config.std.id2labelHandle || widgetHandle] || function (_ref16) {
      var id = _ref16.id;
      return id;
    }
  };

  var Popover = function Popover(props) {
    return react.jsx(Popover$1, _extends__default["default"]({}, conf, props));
  };

  return {
    Button: getButton(Popover, conf),
    Popover: Popover,
    Content: function Content(props) {
      return react.jsx(FilterContent$1, _extends__default["default"]({}, conf, props));
    },
    LabelFromID: config.LabelFromID
  };
}

var basisofRecord = [
	"OBSERVATION",
	"MACHINE_OBSERVATION",
	"HUMAN_OBSERVATION",
	"MATERIAL_SAMPLE",
	"MATERIAL_CITATION",
	"PRESERVED_SPECIMEN",
	"FOSSIL_SPECIMEN",
	"LIVING_SPECIMEN",
	"OCCURRENCE"
];

var mediaType = [
	"StillImage",
	"MovingImage",
	"Sound"
];

var occurrenceIssue = [
	"ZERO_COORDINATE",
	"COORDINATE_OUT_OF_RANGE",
	"COORDINATE_INVALID",
	"COORDINATE_ROUNDED",
	"GEODETIC_DATUM_INVALID",
	"GEODETIC_DATUM_ASSUMED_WGS84",
	"COORDINATE_REPROJECTED",
	"COORDINATE_REPROJECTION_FAILED",
	"COORDINATE_REPROJECTION_SUSPICIOUS",
	"COORDINATE_ACCURACY_INVALID",
	"COORDINATE_PRECISION_INVALID",
	"COORDINATE_UNCERTAINTY_METERS_INVALID",
	"COORDINATE_PRECISION_UNCERTAINTY_MISMATCH",
	"FOOTPRINT_SRS_INVALID",
	"FOOTPRINT_WKT_INVALID",
	"COUNTRY_COORDINATE_MISMATCH",
	"COUNTRY_MISMATCH",
	"COUNTRY_INVALID",
	"COUNTRY_DERIVED_FROM_COORDINATES",
	"CONTINENT_COUNTRY_MISMATCH",
	"CONTINENT_INVALID",
	"CONTINENT_DERIVED_FROM_COORDINATES",
	"PRESUMED_SWAPPED_COORDINATE",
	"PRESUMED_NEGATED_LONGITUDE",
	"PRESUMED_NEGATED_LATITUDE",
	"RECORDED_DATE_MISMATCH",
	"RECORDED_DATE_INVALID",
	"RECORDED_DATE_UNLIKELY",
	"TAXON_MATCH_FUZZY",
	"TAXON_MATCH_HIGHERRANK",
	"TAXON_MATCH_AGGREGATE",
	"TAXON_MATCH_NONE",
	"DEPTH_NOT_METRIC",
	"DEPTH_UNLIKELY",
	"DEPTH_MIN_MAX_SWAPPED",
	"DEPTH_NON_NUMERIC",
	"ELEVATION_UNLIKELY",
	"ELEVATION_MIN_MAX_SWAPPED",
	"ELEVATION_NOT_METRIC",
	"ELEVATION_NON_NUMERIC",
	"MODIFIED_DATE_INVALID",
	"MODIFIED_DATE_UNLIKELY",
	"IDENTIFIED_DATE_UNLIKELY",
	"IDENTIFIED_DATE_INVALID",
	"BASIS_OF_RECORD_INVALID",
	"TYPE_STATUS_INVALID",
	"MULTIMEDIA_DATE_INVALID",
	"MULTIMEDIA_URI_INVALID",
	"REFERENCES_URI_INVALID",
	"INTERPRETATION_ERROR",
	"INDIVIDUAL_COUNT_INVALID",
	"INDIVIDUAL_COUNT_CONFLICTS_WITH_OCCURRENCE_STATUS",
	"OCCURRENCE_STATUS_UNPARSABLE",
	"OCCURRENCE_STATUS_INFERRED_FROM_INDIVIDUAL_COUNT",
	"OCCURRENCE_STATUS_INFERRED_FROM_BASIS_OF_RECORD",
	"GEOREFERENCED_DATE_UNLIKELY",
	"GEOREFERENCED_DATE_INVALID",
	"AMBIGUOUS_INSTITUTION",
	"AMBIGUOUS_COLLECTION",
	"INSTITUTION_MATCH_NONE",
	"COLLECTION_MATCH_NONE",
	"INSTITUTION_MATCH_FUZZY",
	"COLLECTION_MATCH_FUZZY",
	"INSTITUTION_COLLECTION_MISMATCH",
	"POSSIBLY_ON_LOAN",
	"DIFFERENT_OWNER_INSTITUTION"
];

var typeStatus = [
	"TYPE",
	"TYPE_SPECIES",
	"TYPE_GENUS",
	"ALLOLECTOTYPE",
	"ALLONEOTYPE",
	"ALLOTYPE",
	"COTYPE",
	"EPITYPE",
	"EXEPITYPE",
	"EXHOLOTYPE",
	"EXISOTYPE",
	"EXLECTOTYPE",
	"EXNEOTYPE",
	"EXPARATYPE",
	"EXSYNTYPE",
	"EXTYPE",
	"HAPANTOTYPE",
	"HOLOTYPE",
	"ICONOTYPE",
	"ISOLECTOTYPE",
	"ISOPARATYPE",
	"ISONEOTYPE",
	"ISOSYNTYPE",
	"ISOTYPE",
	"LECTOTYPE",
	"NEOTYPE",
	"PARALECTOTYPE",
	"PARANEOTYPE",
	"PARATYPE",
	"PLASTOHOLOTYPE",
	"PLASTOISOTYPE",
	"PLASTOLECTOTYPE",
	"PLASTONEOTYPE",
	"PLASTOPARATYPE",
	"PLASTOSYNTYPE",
	"PLASTOTYPE",
	"SECONDARYTYPE",
	"SUPPLEMENTARYTYPE",
	"SYNTYPE",
	"TOPOTYPE",
	"ORIGINALMATERIAL",
	"NOTATYPE"
];

var month = [
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	"10",
	"11",
	"12"
];

var continent = [
	"AFRICA",
	"ANTARCTICA",
	"ASIA",
	"OCEANIA",
	"EUROPE",
	"NORTH_AMERICA",
	"SOUTH_AMERICA"
];

var endpointType = [
	"EML",
	"FEED",
	"WFS",
	"WMS",
	"TCS_RDF",
	"TCS_XML",
	"DWC_ARCHIVE",
	"DIGIR",
	"DIGIR_MANIS",
	"TAPIR",
	"BIOCASE",
	"BIOCASE_XML_ARCHIVE",
	"OAI_PMH",
	"OTHER"
];

var establishmentMeans = [
	"NATIVE",
	"INTRODUCED",
	"NATURALISED",
	"INVASIVE",
	"MANAGED",
	"UNCERTAIN"
];

var occurrenceStatus = [
	"PRESENT",
	"ABSENT"
];

var datasetType = [
	"OCCURRENCE",
	"CHECKLIST",
	"METADATA",
	"SAMPLING_EVENT"
];

var datasetSubtype = [
	"TAXONOMIC_AUTHORITY",
	"NOMENCLATOR_AUTHORITY",
	"INVENTORY_THEMATIC",
	"INVENTORY_REGIONAL",
	"GLOBAL_SPECIES_DATASET",
	"DERIVED_FROM_OCCURRENCE",
	"SPECIMEN",
	"OBSERVATION"
];

var literatureType = [
	"journal",
	"book",
	"generic",
	"book_section",
	"conference_proceedings",
	"working_paper",
	"report",
	"web_page",
	"thesis",
	"magazine_article",
	"statute",
	"patent",
	"newspaper_article",
	"computer_program",
	"hearing",
	"television_broadcast",
	"encyclopedia_article",
	"case",
	"film",
	"bill"
];

var dwcaExtension = [
	"http://rs.gbif.org/terms/1.0/Image",
	"http://rs.tdwg.org/ac/terms/Multimedia",
	"http://rs.gbif.org/terms/1.0/Multimedia",
	"http://data.ggbn.org/schemas/ggbn/terms/Amplification",
	"http://data.ggbn.org/schemas/ggbn/terms/Cloning",
	"http://data.ggbn.org/schemas/ggbn/terms/GelImage",
	"http://data.ggbn.org/schemas/ggbn/terms/Loan",
	"http://data.ggbn.org/schemas/ggbn/terms/MaterialSample",
	"http://data.ggbn.org/schemas/ggbn/terms/Permit",
	"http://data.ggbn.org/schemas/ggbn/terms/Preparation",
	"http://data.ggbn.org/schemas/ggbn/terms/Preservation",
	"http://purl.org/germplasm/germplasmTerm#GermplasmAccession",
	"http://purl.org/germplasm/germplasmTerm#MeasurementScore",
	"http://purl.org/germplasm/germplasmTerm#MeasurementTrait",
	"http://purl.org/germplasm/germplasmTerm#MeasurementTrial",
	"http://rs.tdwg.org/dwc/terms/MeasurementOrFact",
	"http://rs.iobis.org/obis/terms/ExtendedMeasurementOrFact",
	"http://rs.tdwg.org/dwc/terms/Identification",
	"http://rs.gbif.org/terms/1.0/Identifier",
	"http://rs.gbif.org/terms/1.0/Reference",
	"http://rs.tdwg.org/dwc/terms/ResourceRelationship",
	"http://rs.tdwg.org/chrono/terms/ChronometricAge"
];

var _excluded$E = ["standardComponents", "summaryProps", "filterHandle", "setFullField", "toggle", "focusRef", "footerProps", "onApply", "filter", "onCancel", "hide"];
var commonFilters = {
  taxonKey: {
    type: 'SUGGEST',
    config: {
      std: {
        filterHandle: 'taxonKey',
        // if nothing else provided, then this is the filterName used
        id2labelHandle: 'canonicalName',
        translations: {
          count: 'filters.taxonKey.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.taxonKey.name',
          // translation path to a title for the popover and the button
          description: 'filters.taxonKey.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'taxonKey',
        id2labelHandle: 'taxonKey'
      }
    }
  },
  country: {
    type: 'SUGGEST',
    config: {
      std: {
        id2labelHandle: 'countryCode',
        translations: {
          count: 'filters.occurrenceCountry.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.occurrenceCountry.name',
          // translation path to a title for the popover and the button
          description: 'filters.occurrenceCountry.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'countryCode'
      }
    }
  },
  countrySingle: {
    type: 'SUGGEST',
    config: {
      std: {
        id2labelHandle: 'countryCode',
        translations: {
          count: 'filters.occurrenceCountry.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.occurrenceCountry.name',
          // translation path to a title for the popover and the button
          description: 'filters.occurrenceCountry.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'countryCode',
        singleSelect: true
      }
    }
  },
  countriesOfCoverage: {
    type: 'SUGGEST',
    config: {
      std: {
        id2labelHandle: 'countryCode',
        translations: {
          count: 'filters.countriesOfCoverage.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.countriesOfCoverage.name',
          // translation path to a title for the popover and the button
          description: 'filters.countriesOfCoverage.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'countryCode'
      }
    }
  },
  countriesOfResearcher: {
    type: 'SUGGEST',
    config: {
      std: {
        id2labelHandle: 'countryCode',
        translations: {
          count: 'filters.countriesOfResearcher.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.countriesOfResearcher.name',
          // translation path to a title for the popover and the button
          description: 'filters.countriesOfResearcher.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'countryCode'
      }
    }
  },
  publishingCountryCode: {
    type: 'SUGGEST',
    config: {
      std: {
        id2labelHandle: 'countryCode',
        translations: {
          count: 'filters.publishingCountryCode.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.publishingCountryCode.name',
          // translation path to a title for the popover and the button
          description: 'filters.publishingCountryCode.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'countryCode'
      }
    }
  },
  datasetKey: {
    type: 'SUGGEST',
    config: {
      std: {
        translations: {
          count: 'filters.datasetKey.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.datasetKey.name',
          // translation path to a title for the popover and the button
          description: 'filters.datasetKey.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'datasetKeyFromOccurrenceIndex',
        allowEmptyQueries: true
      }
    }
  },
  publisherKey: {
    type: 'SUGGEST',
    config: {
      std: {
        translations: {
          count: 'filters.publisherKey.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.publisherKey.name',
          // translation path to a title for the popover and the button
          description: 'filters.publisherKey.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'publisherKeyFromOccurrenceIndex',
        allowEmptyQueries: true
      }
    }
  },
  institutionCode: {
    type: 'SUGGEST',
    config: {
      std: {
        translations: {
          count: 'filters.institutionCode.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.institutionCode.name',
          // translation path to a title for the popover and the button
          description: 'filters.institutionCode.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'institutionCode'
      }
    }
  },
  catalogNumber: {
    type: 'KEYWORD_SEARCH',
    //KEYWORD_SEARCH | SUGGEST
    config: {
      std: {
        filterHandle: 'catalogNumber',
        // if nothing else provided, then this is the filterName used
        id2labelHandle: 'catalogNumber',
        translations: {
          count: 'filters.catalogNumber.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.catalogNumber.name',
          // translation path to a title for the popover and the button
          description: 'filters.catalogNumber.description' // translation path for the filter description

        }
      },
      specific: {
        id2labelHandle: 'catalogNumber',
        placeholder: 'Search for a catalog number',
        supportsExist: true,
        query: "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              cardinality {\n                catalogNumber\n              }\n              facet {\n                catalogNumber(size: $size) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n        ",
        queryKey: 'catalogNumber'
      }
    } // type: 'SUGGEST',
    // config: {
    //   std: {
    //     translations: {
    //       count: 'filters.catalogNumber.count', // translation path to display names with counts. e.g. "3 scientific names"
    //       name: 'filters.catalogNumber.name',// translation path to a title for the popover and the button
    //       description: 'filters.catalogNumber.description', // translation path for the filter description
    //     },
    //   },
    //   specific: {
    //     suggestHandle: 'catalogNumber',
    //     supportsExist: true,
    //   }
    // }

  },
  // catalogNumber: {
  //   type: 'SUGGEST',
  //   config: {
  //     std: {
  //       filterHandle: 'catalogNumber',// if nothing else provided, then this is the filterName used
  //       id2labelHandle: 'catalogNumber',
  //       translations: {
  //         count: 'filters.catalogNumber.count', // translation path to display names with counts. e.g. "3 scientific names"
  //         name: 'filters.catalogNumber.name',// translation path to a title for the popover and the button
  //         description: 'filters.catalogNumber.description', // translation path for the filter description
  //       },
  //     },
  //     specific: {
  //       suggestHandle: 'catalogNumber',
  //       id2labelHandle: 'catalogNumber',
  //     }
  //   }
  // },
  hostingOrganizationKey: {
    type: 'SUGGEST',
    config: {
      std: {
        id2labelHandle: 'publisherKey',
        translations: {
          count: 'filters.hostingOrganizationKey.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.hostingOrganizationKey.name',
          // translation path to a title for the popover and the button
          description: 'filters.hostingOrganizationKey.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'publisherKey',
        id2labelHandle: 'publisherKey'
      }
    }
  },
  year: {
    type: 'NUMBER_RANGE',
    config: {
      std: {
        filterHandle: 'year',
        id2labelHandle: 'year',
        translations: {
          count: 'filters.year.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.year.name',
          // translation path to a title for the popover and the button
          description: 'filters.year.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'search.placeholders.range',
        supportsExist: true,
        regex: /^((-)?[0-9]{0,4})(,)?((-)?[0-9]{0,4})$/
      }
    }
  },
  basisOfRecord: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'basisOfRecord',
        id2labelHandle: 'basisOfRecord',
        translations: {
          count: 'filters.basisOfRecord.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.basisOfRecord.name',
          // translation path to a title for the popover and the button
          description: 'filters.basisOfRecord.description' // translation path for the filter description

        }
      },
      specific: {
        options: basisofRecord
      }
    }
  },
  typeStatus: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'typeStatus',
        id2labelHandle: 'typeStatus',
        translations: {
          count: 'filters.typeStatus.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.typeStatus.name',
          // translation path to a title for the popover and the button
          description: 'filters.typeStatus.description' // translation path for the filter description

        }
      },
      specific: {
        options: typeStatus
      }
    }
  },
  occurrenceIssue: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'occurrenceIssue',
        id2labelHandle: 'occurrenceIssue',
        translations: {
          count: 'filters.occurrenceIssue.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.occurrenceIssue.name',
          // translation path to a title for the popover and the button
          description: 'filters.occurrenceIssue.description' // translation path for the filter description

        }
      },
      specific: {
        options: occurrenceIssue,
        supportsNegation: true,
        supportsExist: true
      }
    }
  },
  mediaType: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'mediaType',
        id2labelHandle: 'mediaType',
        translations: {
          count: 'filters.mediaType.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.mediaType.name',
          // translation path to a title for the popover and the button
          description: 'filters.mediaType.description' // translation path for the filter description

        }
      },
      specific: {
        options: mediaType
      }
    }
  },
  sampleSizeUnit: {
    type: 'KEYWORD_SEARCH',
    config: {
      std: {
        filterHandle: 'sampleSizeUnit',
        translations: {
          count: 'filters.sampleSizeUnit.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.sampleSizeUnit.name',
          // translation path to a title for the popover and the button
          description: 'filters.sampleSizeUnit.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Units of sample size',
        disallowLikeFilters: true,
        query: "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              cardinality {\n                sampleSizeUnit\n              }\n              facet {\n                sampleSizeUnit(size: $size) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n        ",
        queryKey: 'sampleSizeUnit'
      }
    }
  },
  license: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'license',
        id2labelHandle: 'license',
        translations: {
          count: 'filters.license.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.license.name',
          // translation path to a title for the popover and the button
          description: 'filters.license.description' // translation path for the filter description

        }
      },
      specific: {
        options: license
      }
    }
  },
  coordinateUncertainty: {
    type: 'NUMBER_RANGE',
    config: {
      std: {
        filterHandle: 'coordinateUncertainty',
        id2labelHandle: 'coordinateUncertainty',
        translations: {
          count: 'filters.coordinateUncertainty.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.coordinateUncertainty.name',
          // translation path to a title for the popover and the button
          description: 'filters.coordinateUncertainty.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'search.placeholders.range',
        regex: /^((-)?[0-9]{0,4})(,)?((-)?[0-9]{0,4})$/
      }
    }
  },
  depth: {
    type: 'NUMBER_RANGE',
    config: {
      std: {
        filterHandle: 'depth',
        id2labelHandle: 'depth',
        translations: {
          count: 'filters.depth.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.depth.name',
          // translation path to a title for the popover and the button
          description: 'filters.depth.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'search.placeholders.range',
        regex: /^((-)?[0-9]{0,4})(,)?((-)?[0-9]{0,4})$/
      }
    }
  },
  organismQuantity: {
    type: 'NUMBER_RANGE',
    config: {
      std: {
        filterHandle: 'organismQuantity',
        id2labelHandle: 'organismQuantity',
        translations: {
          count: 'filters.organismQuantity.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.organismQuantity.name',
          // translation path to a title for the popover and the button
          description: 'filters.organismQuantity.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'search.placeholders.range',
        regex: /^((-)?[0-9]{0,4})(,)?((-)?[0-9]{0,4})$/
      }
    }
  },
  sampleSizeValue: {
    type: 'NUMBER_RANGE',
    config: {
      std: {
        filterHandle: 'sampleSizeValue',
        id2labelHandle: 'sampleSizeValue',
        translations: {
          count: 'filters.sampleSizeValue.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.sampleSizeValue.name',
          // translation path to a title for the popover and the button
          description: 'filters.sampleSizeValue.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'search.placeholders.range',
        regex: /^((-)?[0-9]{0,4})(,)?((-)?[0-9]{0,4})$/
      }
    }
  },
  relativeOrganismQuantity: {
    type: 'NUMBER_RANGE',
    config: {
      std: {
        filterHandle: 'relativeOrganismQuantity',
        id2labelHandle: 'relativeOrganismQuantity',
        translations: {
          count: 'filters.relativeOrganismQuantity.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.relativeOrganismQuantity.name',
          // translation path to a title for the popover and the button
          description: 'filters.relativeOrganismQuantity.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'search.placeholders.range',
        regex: /^[0-9,\.]{0,10}$/
      }
    }
  },
  month: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'month',
        id2labelHandle: 'month',
        translations: {
          count: 'filters.month.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.month.name',
          // translation path to a title for the popover and the button
          description: 'filters.month.description' // translation path for the filter description

        }
      },
      specific: {
        options: month,
        supportsExist: true
      }
    }
  },
  continent: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'continent',
        id2labelHandle: 'continent',
        translations: {
          count: 'filters.continent.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.continent.name',
          // translation path to a title for the popover and the button
          description: 'filters.continent.description' // translation path for the filter description

        }
      },
      specific: {
        options: continent
      }
    }
  },
  protocol: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'protocol',
        id2labelHandle: 'protocol',
        translations: {
          count: 'filters.protocol.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.protocol.name',
          // translation path to a title for the popover and the button
          description: 'filters.protocol.description' // translation path for the filter description

        }
      },
      specific: {
        options: endpointType
      }
    }
  },
  establishmentMeans: {
    type: 'SUGGEST',
    config: {
      std: {
        filterHandle: 'establishmentMeans',
        id2labelHandle: 'establishmentMeansVocabulary',
        translations: {
          count: 'filters.establishmentMeans.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.establishmentMeans.name',
          // translation path to a title for the popover and the button
          description: 'filters.establishmentMeans.description' // translation path for the filter description

        }
      },
      specific: {
        options: establishmentMeans,
        suggestHandle: 'establishmentMeans',
        id2labelHandle: 'establishmentMeansVocabulary',
        allowEmptyQueries: true
      }
    }
  },
  recordedBy: {
    type: 'KEYWORD_SEARCH',
    //KEYWORD_SEARCH | SUGGEST
    config: {
      std: {
        filterHandle: 'recordedBy',
        // if nothing else provided, then this is the filterName used
        id2labelHandle: 'recordedBy',
        translations: {
          count: 'filters.recordedBy.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.recordedBy.name',
          // translation path to a title for the popover and the button
          description: 'filters.recordedBy.description' // translation path for the filter description

        }
      },
      specific: {
        // suggestHandle: 'recordedBy',
        // suggestHandle: 'recordedByWildcard',
        id2labelHandle: 'recordedBy',
        placeholder: 'Search by recorded by',
        supportsExist: true,
        query: "\n          query keywordSearch($predicate: Predicate, $size: Int, $include: String){\n            occurrenceSearch(predicate: $predicate) {\n              facet {\n                recordedBy(size: $size, include: $include) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n        ",
        queryKey: 'recordedBy'
      }
    }
  },
  recordNumber: {
    type: 'SUGGEST',
    config: {
      std: {
        filterHandle: 'recordNumber',
        // if nothing else provided, then this is the filterName used
        id2labelHandle: 'recordNumber',
        translations: {
          count: 'filters.recordNumber.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.recordNumber.name',
          // translation path to a title for the popover and the button
          description: 'filters.recordNumber.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'recordNumber',
        id2labelHandle: 'recordNumber',
        supportsExist: true
      }
    }
  },
  collectionCode: {
    type: 'SIMPLE_TEXT',
    config: {
      std: {
        filterHandle: 'collectionCode',
        id2labelHandle: 'collectionCode',
        translations: {
          count: 'filters.collectionCode.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.collectionCode.name',
          // translation path to a title for the popover and the button
          description: 'filters.collectionCode.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by collection code'
      }
    }
  },
  recordedById: {
    type: 'SIMPLE_TEXT',
    config: {
      std: {
        filterHandle: 'recordedById',
        id2labelHandle: 'recordedById',
        translations: {
          count: 'filters.recordedById.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.recordedById.name',
          // translation path to a title for the popover and the button
          description: 'filters.recordedById.description' // translation path for the filter description

        }
      },
      specific: {
        supportsExist: true,
        placeholder: 'Example: https://orcid.org/0000-1111-2222-3333'
      }
    }
  },
  identifiedById: {
    type: 'SIMPLE_TEXT',
    config: {
      std: {
        filterHandle: 'identifiedById',
        id2labelHandle: 'identifiedById',
        translations: {
          count: 'filters.identifiedById.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.identifiedById.name',
          // translation path to a title for the popover and the button
          description: 'filters.identifiedById.description' // translation path for the filter description

        }
      },
      specific: {
        supportsExist: true,
        placeholder: 'Example: https://orcid.org/0000-1111-2222-3333'
      }
    }
  },
  occurrenceId: {
    type: 'SIMPLE_TEXT',
    config: {
      std: {
        filterHandle: 'occurrenceId',
        id2labelHandle: 'occurrenceId',
        translations: {
          count: 'filters.occurrenceId.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.occurrenceId.name',
          // translation path to a title for the popover and the button
          description: 'filters.occurrenceId.description' // translation path for the filter description

        }
      },
      specific: {
        supportsNegation: true,
        placeholder: 'Search by Occurrence identifier'
      }
    }
  },
  organismId: {
    type: 'SIMPLE_TEXT',
    config: {
      std: {
        filterHandle: 'organismId',
        id2labelHandle: 'organismId',
        translations: {
          count: 'filters.organismId.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.organismId.name',
          // translation path to a title for the popover and the button
          description: 'filters.organismId.description' // translation path for the filter description

        }
      },
      specific: {
        supportsExist: true,
        placeholder: 'Search by Organism identifier'
      }
    }
  },
  locality: {
    type: 'KEYWORD_SEARCH',
    //KEYWORD_SEARCH | SUGGEST | SIMPLE_TEXT
    config: {
      std: {
        filterHandle: 'locality',
        id2labelHandle: 'locality',
        translations: {
          count: 'filters.locality.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.locality.name',
          // translation path to a title for the popover and the button
          description: 'filters.locality.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by locality',
        query: "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              cardinality {\n                locality\n              }\n              facet {\n                locality(size: $size) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n        ",
        queryKey: 'locality'
      }
    }
  },
  waterBody: {
    type: 'KEYWORD_SEARCH',
    // SIMPLE_TEXT
    config: {
      std: {
        filterHandle: 'waterBody',
        id2labelHandle: 'waterBody',
        translations: {
          count: 'filters.waterBody.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.waterBody.name',
          // translation path to a title for the popover and the button
          description: 'filters.waterBody.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by water body',
        query: "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              cardinality {\n                waterBody\n              }\n              facet {\n                waterBody(size: $size) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n        ",
        queryKey: 'waterBody'
      }
    }
  },
  stateProvince: {
    type: 'KEYWORD_SEARCH',
    config: {
      std: {
        filterHandle: 'stateProvince',
        id2labelHandle: 'stateProvince',
        translations: {
          count: 'filters.stateProvince.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.stateProvince.name',
          // translation path to a title for the popover and the button
          description: 'filters.stateProvince.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by state province',
        query: "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              cardinality {\n                stateProvince\n              }\n              facet {\n                stateProvince(size: $size) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n        ",
        queryKey: 'stateProvince'
      }
    }
  },
  eventId: {
    type: 'SIMPLE_TEXT',
    config: {
      std: {
        filterHandle: 'eventId',
        id2labelHandle: 'eventId',
        translations: {
          count: 'filters.eventId.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.eventId.name',
          // translation path to a title for the popover and the button
          description: 'filters.eventId.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by Event identifier',
        supportsExist: true
      }
    }
  },
  samplingProtocol: {
    type: 'KEYWORD_SEARCH',
    config: {
      std: {
        filterHandle: 'samplingProtocol',
        id2labelHandle: 'samplingProtocol',
        translations: {
          count: 'filters.samplingProtocol.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.samplingProtocol.name',
          // translation path to a title for the popover and the button
          description: 'filters.samplingProtocol.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by sampling protocol',
        query: "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              cardinality {\n                samplingProtocol\n              }\n              facet {\n                samplingProtocol(size: $size) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n        ",
        queryKey: 'samplingProtocol'
      }
    }
  },
  elevation: {
    type: 'NUMBER_RANGE',
    config: {
      std: {
        filterHandle: 'elevation',
        id2labelHandle: 'elevation',
        translations: {
          count: 'filters.elevation.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.elevation.name',
          // translation path to a title for the popover and the button
          description: 'filters.elevation.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'search.placeholders.range',
        regex: /^[0-9,\.]{0,10}$/
      }
    }
  },
  occurrenceStatus: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'occurrenceStatus',
        id2labelHandle: 'occurrenceStatus',
        translations: {
          count: 'filters.occurrenceStatus.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.occurrenceStatus.name',
          // translation path to a title for the popover and the button
          description: 'filters.occurrenceStatus.description' // translation path for the filter description

        }
      },
      specific: {
        options: occurrenceStatus
      }
    }
  },
  gadmGid: {
    type: 'SUGGEST',
    config: {
      std: {
        filterHandle: 'gadmGid',
        id2labelHandle: 'gadmGid',
        translations: {
          count: 'filters.gadmGid.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.gadmGid.name',
          // translation path to a title for the popover and the button
          description: 'filters.gadmGid.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'gadmGid',
        id2labelHandle: 'gadmGid',
        showAboutAsDefault: true,
        supportsExist: true
      }
    }
  },
  identifiedBy: {
    type: 'KEYWORD_SEARCH',
    // SIMPLE_TEXT
    config: {
      std: {
        filterHandle: 'identifiedBy',
        id2labelHandle: 'identifiedBy',
        translations: {
          count: 'filters.identifiedBy.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.identifiedBy.name',
          // translation path to a title for the popover and the button
          description: 'filters.identifiedBy.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by identified by',
        supportsExist: true,
        query: "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              cardinality {\n                identifiedBy\n              }\n              facet {\n                identifiedBy(size: $size) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n        ",
        queryKey: 'identifiedBy'
      }
    }
  },
  isInCluster: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'isInCluster',
        id2labelHandle: 'isInCluster',
        translations: {
          count: 'filters.isInCluster.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.isInCluster.name',
          // translation path to a title for the popover and the button
          description: 'filters.isInCluster.description' // translation path for the filter description

        }
      },
      specific: {
        options: ['true', 'false'],
        isRadio: true
      }
    }
  },
  datasetType: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'datasetType',
        id2labelHandle: 'datasetType',
        translations: {
          count: 'filters.datasetType.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.datasetType.name',
          // translation path to a title for the popover and the button
          description: 'filters.datasetType.description' // translation path for the filter description

        }
      },
      specific: {
        options: datasetType
      }
    }
  },
  datasetSubtype: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'datasetSubtype',
        id2labelHandle: 'datasetSubtype',
        translations: {
          count: 'filters.datasetSubtype.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.datasetSubtype.name',
          // translation path to a title for the popover and the button
          description: 'filters.datasetSubtype.description' // translation path for the filter description

        }
      },
      specific: {
        options: datasetSubtype
      }
    }
  },
  institutionKey: {
    type: 'SUGGEST',
    config: {
      std: {
        filterHandle: 'institutionKey',
        id2labelHandle: 'institutionKey',
        translations: {
          count: 'filters.institutionKey.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.institutionKey.name',
          // translation path to a title for the popover and the button
          description: 'filters.institutionKey.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'institutionKey',
        id2labelHandle: 'institutionKey'
      }
    }
  },
  name: {
    type: 'SIMPLE_TEXT',
    config: {
      std: {
        filterHandle: 'name',
        id2labelHandle: 'name',
        translations: {
          count: 'filters.name.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.name.name',
          // translation path to a title for the popover and the button
          description: 'filters.name.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by institution name',
        singleSelect: true
      }
    }
  },
  city: {
    type: 'SIMPLE_TEXT',
    config: {
      std: {
        filterHandle: 'city',
        id2labelHandle: 'city',
        translations: {
          count: 'filters.city.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.city.name',
          // translation path to a title for the popover and the button
          description: 'filters.city.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by institution city',
        singleSelect: true
      }
    }
  },
  code: {
    type: 'SIMPLE_TEXT',
    config: {
      std: {
        filterHandle: 'code',
        id2labelHandle: 'code',
        translations: {
          count: 'filters.code.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.code.name',
          // translation path to a title for the popover and the button
          description: 'filters.code.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Search by institution code',
        singleSelect: true
      }
    }
  },
  verbatimScientificName: {
    type: 'KEYWORD_SEARCH',
    config: {
      std: {
        filterHandle: 'verbatimScientificName',
        id2labelHandle: 'verbatimScientificName',
        translations: {
          count: 'filters.verbatimScientificName.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.verbatimScientificName.name',
          // translation path to a title for the popover and the button
          description: 'filters.verbatimScientificName.description' // translation path for the filter description

        }
      },
      specific: {
        placeholder: 'Example: Felis concolor',
        query: "\n          query keywordSearch($predicate: Predicate, $size: Int){\n            occurrenceSearch(predicate: $predicate) {\n              cardinality {\n                verbatimScientificName\n              }\n              facet {\n                verbatimScientificName(size: $size) {\n                  key\n                  count\n                }\n              }\n            }\n          }\n        ",
        queryKey: 'verbatimScientificName'
      }
    }
  },
  networkKey: {
    type: 'SUGGEST',
    config: {
      std: {
        filterHandle: 'networkKey',
        id2labelHandle: 'networkKey',
        translations: {
          count: 'filters.networkKey.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.networkKey.name',
          // translation path to a title for the popover and the button
          description: 'filters.networkKey.description' // translation path for the filter description

        }
      },
      specific: {
        suggestHandle: 'networkKey',
        id2labelHandle: 'networkKey'
      }
    }
  },
  literatureType: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'literatureType',
        id2labelHandle: 'literatureType',
        translations: {
          count: 'filters.literatureType.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.literatureType.name',
          // translation path to a title for the popover and the button
          description: 'filters.literatureType.description' // translation path for the filter description

        }
      },
      specific: {
        options: literatureType
      }
    }
  },
  dwcaExtension: {
    type: 'ENUM',
    config: {
      std: {
        filterHandle: 'dwcaExtension',
        id2labelHandle: 'dwcaExtension',
        translations: {
          count: 'filters.dwcaExtension.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.dwcaExtension.name',
          // translation path to a title for the popover and the button
          description: 'filters.dwcaExtension.description' // translation path for the filter description

        }
      },
      specific: {
        options: dwcaExtension
      }
    }
  },
  // -- Add filters above this line (required by plopfile.js) --
  q: {
    type: 'CUSTOM_STANDARD',
    config: {
      std: {
        filterHandle: 'q',
        // if nothing else provided, then this is the filterName used
        translations: {
          count: 'filters.q.count',
          // translation path to display names with counts. e.g. "3 scientific names"
          name: 'filters.q.name',
          // translation path to a title for the popover and the button
          description: 'filters.q.description' // translation path for the filter description

        }
      },
      specific: {
        description: 'filters.q.description',
        component: function component(_ref) {
          var _filter$must, _filter$must$q;

          var standardComponents = _ref.standardComponents;
              _ref.summaryProps;
              _ref.filterHandle;
              var setFullField = _ref.setFullField;
              _ref.toggle;
              var focusRef = _ref.focusRef,
              footerProps = _ref.footerProps,
              _onApply = _ref.onApply,
              filter = _ref.filter,
              _onCancel = _ref.onCancel,
              hide = _ref.hide;
              _objectWithoutProperties__default["default"](_ref, _excluded$E);

          var Footer = standardComponents.Footer;
              standardComponents.SummaryBar;
              standardComponents.FilterBody;
          return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
            style: {
              margin: '10px'
            }
          }, react.jsx(Input, {
            ref: focusRef,
            value: filter !== null && filter !== void 0 && (_filter$must = filter.must) !== null && _filter$must !== void 0 && (_filter$must$q = _filter$must.q) !== null && _filter$must$q !== void 0 && _filter$must$q.length ? filter.must.q[0] : '',
            onChange: function onChange(e) {
              setFullField('q', [e.target.value]);
            },
            onKeyPress: function onKeyPress(e) {
              return e.which === 13 ? _onApply({
                filter: filter,
                hide: hide
              }) : null;
            }
          })), react.jsx(Footer, _extends__default["default"]({}, footerProps, {
            onApply: function onApply() {
              return _onApply({
                filter: filter,
                hide: hide
              });
            },
            onCancel: function onCancel() {
              return _onCancel({
                filter: filter,
                hide: hide
              });
            }
          })));
        }
      }
    }
  } // sampleSize: {
  //   type: 'CUSTOM_STANDARD',
  //   config: {
  //     std: {
  //       filterHandle: 'sampleSize',// if nothing else provided, then this is the filterName used
  //       translations: {
  //         count: 'filters.sampleSize.count', // translation path to display names with counts. e.g. "3 scientific names"
  //         name: 'filters.sampleSize.name',// translation path to a title for the popover and the button
  //         description: 'filters.sampleSize.description', // translation path for the filter description
  //       },
  //     },
  //     specific: {
  //       component: ({ standardComponents, summaryProps, filterHandle, setFullField, toggle, focusRef, footerProps, onApply, filter, onCancel, hide, ...props }) => {
  //         const { Footer, SummaryBar, FilterBody } = standardComponents;
  //         return <>
  //           <div style={{ margin: '10px' }} >
  //             <Input
  //               placeholder=""
  //               ref={focusRef}
  //               value={filter?.must?.q?.length ? filter.must.q[0] : ''}
  //               onChange={e => {
  //                 setFullField('q', [e.target.value])
  //               }}
  //               onKeyPress={e => e.which === 13 ? onApply({ filter, hide }) : null}
  //             />
  //           </div>
  //           <Footer {...footerProps}
  //             onApply={() => onApply({ filter, hide })}
  //             onCancel={() => onCancel({ filter, hide })}
  //           />
  //         </>
  //       },
  //     }
  //   }
  // },
  // evenMoreFreedom: {
  //   type: 'CUSTOM_STANDARD',
  //   config: {
  //     std: {
  //       filterHandle: 'taxonKey',// if nothing else provided, then this is the filterName used
  //       // id2labelHandle: 'canonicalName',
  //       id2label: ({ id }) => `taxonKey: ${id}`, // just define the label here. With no chance to reuse it elsewhere
  //       translations: {
  //         count: '{num, plural, one {random taxon} other {# random taxa}}', // Should really point to the translation file, but as it falls back to the string it can be used as the main entry
  //         name: 'Randomizer',// translation path to a title for the popover and the button - in this case the path does not exist and so it falls back to the string provided
  //         description: 'filters.random.description', // translation path for the filter description
  //       },
  //     },
  //     specific: {
  //       dontWrapInStdFilter: true,
  //       component: ({ FilterContext, filter, ...props }) => {
  //         return <FilterContext.Consumer>
  //           {({ setFullField, filter }) => {
  //             return <div style={{ padding: 20, background: 'pink', maxHeight: '100%', overflow: 'auto' }}>
  //               <button style={{ background: 'yellow', display: 'block', width: '100%' }}
  //                 onClick={() => setFullField('taxonKey', [Math.floor(Math.random() * 100)])}>I feel lucky - choose random taxonKey between 0 and 100</button>
  //               <pre>{JSON.stringify(filter, null, 2)}</pre>
  //             </div>
  //           }}
  //         </FilterContext.Consumer>
  //       },
  //     }
  //   }
  // },

};

var filters$5 = ['taxonKey', 'country', 'publishingCountryCode', 'datasetKey', 'publisherKey', 'institutionCode', 'catalogNumber', 'hostingOrganizationKey', 'year', 'basisOfRecord', 'typeStatus', 'occurrenceIssue', 'mediaType', 'sampleSizeUnit', 'license', 'coordinateUncertainty', 'depth', 'organismQuantity', 'sampleSizeValue', 'relativeOrganismQuantity', 'month', 'continent', 'protocol', 'establishmentMeans', 'recordedBy', 'recordNumber', 'collectionCode', 'recordedById', 'identifiedById', 'occurrenceId', 'organismId', 'locality', 'waterBody', 'stateProvince', 'eventId', 'samplingProtocol', 'elevation', 'occurrenceStatus', 'gadmGid', 'identifiedBy', 'isInCluster', 'institutionKey', 'q', 'verbatimScientificName', 'dwcaExtension'].sort();
var highlighted$5 = ['occurrenceStatus', 'taxonKey', 'year', 'country', 'occurrenceIssue'];
var defaultFilterConfig$5 = {
  filters: filters$5,
  included: filters$5,
  highlighted: highlighted$5
};

function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// import snakeCase from 'lodash/snakeCase';
// const enum_case = str => snakeCase(str || '').toUpperCase();

var filterConf$5 = {
  preFilterTransform: function preFilterTransform(filter) {
    var _filter$must_not;

    var negativeIssues = filter === null || filter === void 0 ? void 0 : (_filter$must_not = filter.must_not) === null || _filter$must_not === void 0 ? void 0 : _filter$must_not.occurrenceIssue;

    if (negativeIssues && negativeIssues.every(function (i) {
      return typeof i === "string";
    })) {
      return {
        must: _objectSpread$a({}, filter.must),
        must_not: _objectSpread$a({}, filter.must_not)
      };
    }

    return filter;
  },
  fields: {
    q: {
      defaultType: 'fuzzy',
      v1: {
        supportedTypes: ['fuzzy']
      }
    },
    coordinateUncertainty: {
      defaultKey: 'coordinateUncertaintyInMeters',
      v1: {
        supportedTypes: ['range', 'equals']
      }
    },
    sampleSizeValue: {
      v1: {
        supportedTypes: ['range', 'equals']
      }
    },
    relativeOrganismQuantity: {
      v1: {
        supportedTypes: ['range', 'equals']
      }
    },
    elevation: {
      v1: {
        supportedTypes: ['range', 'equals']
      }
    },
    publisherKey: {
      defaultKey: 'publishingOrg'
    },
    publishingCountryCode: {
      defaultKey: 'publishingCountry'
    },
    // identifiedBy: {
    //   defaultType: 'equals'
    // },
    occurrenceIssue: {
      defaultKey: 'issue'
    },
    hostKey: {
      defaultKey: 'hostingOrganizationKey'
    },
    notIssues: {
      serializer: function serializer(_ref) {
        var values = _ref.values;
        return {
          type: 'and',
          predicates: values.map(function (x) {
            return {
              type: 'equals',
              key: 'notIssues',
              value: x
            };
          })
        };
      }
    },
    geometry: {
      defaultType: 'within'
    },
    basisOfRecord: {
      defaultNegationKey: 'not_basisOfRecord' // preFilterTransform: ({ must, must_not }) => {
      //   const { negatedStrings, other } = partition(must_not, x => typeof x === 'string');
      //   const negated = negatedStrings.length > 0 ? { key: 'not_basisOfRecord', type: 'in', values: negatedStrings } : [];
      //   return {
      //     must: [...must, negated],
      //     must_not: other
      //   }
      // }

    },
    year: {
      defaultType: 'range',
      v1: {
        supportedTypes: ['range', 'equals']
      }
    },
    depth: {
      defaultType: 'range',
      v1: {
        supportedTypes: ['range', 'equals']
      }
    },
    organismQuantity: {
      defaultType: 'range',
      v1: {
        supportedTypes: ['range', 'equals']
      }
    }
  }
};
filters$5.forEach(function (filter) {
  filterConf$5.fields[filter] = filterConf$5.fields[filter] || {};
});

var Base64JsonParam = {
  encode: function encode(obj) {
    return obj ? jsBase64.Base64.encode(JSON.stringify(obj)) : undefined;
  },
  decode: function decode(obj) {
    try {
      var value = obj ? jsBase64.Base64.decode(obj) : obj;
      var parsedValue = JSON.parse(value);
      return parsedValue;
    } catch (err) {
      return undefined;
    }
  }
};

function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useFilterParams() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      predicateConfig = _ref.predicateConfig;

  var _useState = React.useState({}),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      params = _useState2[0],
      setParams = _useState2[1];

  var _useState3 = React.useState({}),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      filter = _useState4[0],
      setPublicFilter = _useState4[1];

  var _useState5 = React.useState({}),
      _useState6 = _slicedToArray__default["default"](_useState5, 2),
      emptyQuery = _useState6[0],
      setEmptyQuery = _useState6[1];

  var _useQueryParams = useQueryParams.useQueryParams(params),
      _useQueryParams2 = _slicedToArray__default["default"](_useQueryParams, 2),
      query = _useQueryParams2[0],
      setQuery = _useQueryParams2[1]; // create an empty map to use as overwrites when a param is present in updates.


  React.useEffect(function () {
    var empty = Object.keys(predicateConfig.fields).reduce(function (prev, curr) {
      var fieldConfig = predicateConfig.fields[curr];
      prev[fieldConfig.defaultKey || curr] = undefined;
      return prev;
    }, {});
    empty.filter = undefined;
    setEmptyQuery(empty);
    var paramsConfig = Object.keys(predicateConfig.fields).reduce(function (prev, curr) {
      var fieldConfig = predicateConfig.fields[curr];
      prev[fieldConfig.defaultKey || curr] = useQueryParams.ArrayParam;
      return prev;
    }, {});
    paramsConfig.filter = Base64JsonParam;
    setParams(paramsConfig);
  }, [predicateConfig]); // transform the filter to a string that can go into the url. 
  // Field names can change according to the configuration

  var setFilter = React.useCallback(function (nextFilter) {
    var _filter2v = filter2v1(nextFilter, predicateConfig),
        v1Filter = _filter2v.v1Filter,
        errors = _filter2v.errors;

    if (errors) {
      setQuery(_objectSpread$9(_objectSpread$9({}, emptyQuery), {}, {
        filter: nextFilter
      }));
    } else {
      setQuery(_objectSpread$9(_objectSpread$9({}, emptyQuery), v1Filter));
    }
  }, [predicateConfig, emptyQuery]); // Transform the query from the url to the naming the consumer prefers. 
  // Field names can change according to the configuration

  React.useEffect(function () {
    var f;

    if (query.filter) {
      f = query.filter;
    } else {
      f = v12filter(query, predicateConfig);
    }

    setPublicFilter(f);
  }, [query]);
  return [filter, setFilter];
}

var basePickBy = _basePickBy,
    hasIn = hasIn_1;

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick$1(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

var _basePick = basePick$1;

var baseFlatten$1 = _baseFlatten;

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten$1(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten$1(array, 1) : [];
}

var flatten_1 = flatten$1;

var flatten = flatten_1,
    overRest = _overRest,
    setToString = _setToString;

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest$1(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

var _flatRest = flatRest$1;

var basePick = _basePick,
    flatRest = _flatRest;

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

var pick_1 = pick;

var SetCache = _SetCache,
    arrayIncludes = _arrayIncludes,
    arrayIncludesWith = _arrayIncludesWith,
    arrayMap$1 = _arrayMap,
    baseUnary$1 = _baseUnary,
    cacheHas = _cacheHas;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference$1(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap$1(values, baseUnary$1(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

var _baseDifference = baseDifference$1;

var baseDifference = _baseDifference,
    baseRest$1 = _baseRest,
    isArrayLikeObject = isArrayLikeObject_1;

/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */
var without = baseRest$1(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, values)
    : [];
});

var without_1 = without;

var tableConfig = {
  defaultColumns: ['features', 'country', 'coordinates', 'year', 'basisOfRecord', 'dataset', 'publisher'],
  columns: [{
    name: 'scientificName',
    trKey: 'filters.taxonKey.name',
    filterKey: 'taxonKey',
    // optional
    value: {
      key: 'gbifClassification.usage.formattedName',
      formatter: function formatter(value, occurrence) {
        return react.jsx("span", {
          dangerouslySetInnerHTML: {
            __html: value
          }
        });
      }
    },
    width: 'wide'
  }, {
    name: 'features',
    trKey: 'tableHeaders.features',
    value: {
      key: 'features',
      formatter: function formatter(value, occurrence) {
        var _occurrence$issues;

        return react.jsx(IconFeatures, {
          iconsOnly: true,
          stillImageCount: occurrence.stillImageCount,
          movingImageCount: occurrence.movingImageCount,
          soundCount: occurrence.soundCount,
          typeStatus: occurrence.typeStatus,
          isSequenced: occurrence["volatile"].features.isSequenced,
          isTreament: occurrence["volatile"].features.isTreament,
          isClustered: occurrence["volatile"].features.isClustered,
          isSamplingEvent: occurrence["volatile"].features.isSamplingEvent,
          issueCount: occurrence === null || occurrence === void 0 ? void 0 : (_occurrence$issues = occurrence.issues) === null || _occurrence$issues === void 0 ? void 0 : _occurrence$issues.length
        });
      }
    }
  }, {
    name: 'country',
    trKey: 'filters.occurrenceCountry.name',
    filterKey: 'country',
    //optional
    value: {
      key: 'countryCode',
      labelHandle: 'countryCode'
    }
  }, {
    name: 'coordinates',
    trKey: 'filters.coordinates.name',
    value: {
      key: 'formattedCoordinates' // formatter: (value, occurrence) => {
      //   if (!occurrence.coordinates) return null;
      //   return <span>
      //     (<FormattedNumber value={occurrence.coordinates.lat} maximumSignificantDigits={4}/>, <FormattedNumber value={occurrence.coordinates.lon} maximumSignificantDigits={4}/>)
      //   </span>
      // }

    },
    noWrap: true
  }, {
    name: 'year',
    trKey: 'filters.year.name',
    filterKey: 'year',
    //optional
    value: {
      key: 'year'
    }
  }, {
    name: 'basisOfRecord',
    trKey: 'filters.basisOfRecord.name',
    filterKey: 'basisOfRecord',
    //optional
    value: {
      key: 'basisOfRecord',
      labelHandle: 'basisOfRecord'
    }
  }, {
    name: 'dataset',
    trKey: 'filters.datasetKey.name',
    filterKey: 'datasetKey',
    //optional
    value: {
      key: 'datasetTitle'
    },
    width: 'wide'
  }, {
    name: 'publisher',
    trKey: 'filters.publisherKey.name',
    filterKey: 'publisherKey',
    //optional
    value: {
      key: 'publisherTitle'
    },
    width: 'wide'
  }, {
    name: 'catalogNumber',
    trKey: 'filters.catalogNumber.name',
    filterKey: 'catalogNumber',
    //optional
    value: {
      key: 'catalogNumber'
    },
    width: 'wide'
  }, {
    name: 'recordedBy',
    trKey: 'filters.recordedBy.name',
    filterKey: 'recordedBy',
    //optional
    value: {
      key: 'recordedBy'
    },
    width: 'wide'
  }, {
    name: 'identifiedBy',
    trKey: 'filters.identifiedBy.name',
    filterKey: 'identifiedBy',
    //optional
    value: {
      key: 'identifiedBy'
    },
    width: 'wide'
  }, {
    name: 'recordNumber',
    trKey: 'filters.recordNumber.name',
    filterKey: 'recordNumber',
    //optional
    value: {
      key: 'recordNumber'
    }
  }, {
    name: 'typeStatus',
    trKey: 'filters.typeStatus.name',
    filterKey: 'typeStatus',
    //optional
    value: {
      key: 'typeStatus',
      labelHandle: 'typeStatus'
    }
  }, {
    name: 'preparations',
    trKey: 'occurrenceFieldNames.preparations',
    value: {
      key: 'preparations'
    }
  }, {
    name: 'collectionCode',
    trKey: 'occurrenceFieldNames.collectionCode',
    value: {
      key: 'collectionCode'
    }
  }, {
    name: 'institutionCode',
    trKey: 'occurrenceFieldNames.institutionCode',
    value: {
      key: 'institutionCode'
    }
  }, {
    name: 'locality',
    trKey: 'occurrenceFieldNames.locality',
    value: {
      key: 'locality'
    }
  }]
};

var _excluded$D = ["config", "pageLayout"];

function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function buildConfig$1(_ref, context) {
  var labelConfig = _ref.labelConfig,
      getSuggestConfig = _ref.getSuggestConfig,
      filterWidgetConfig = _ref.filterWidgetConfig,
      customConfig = _ref.customConfig;
  var _customConfig$labels = customConfig.labels,
      labels = _customConfig$labels === void 0 ? {} : _customConfig$labels,
      _customConfig$getSugg = customConfig.getSuggests,
      getSuggests = _customConfig$getSugg === void 0 ? function () {
    return {};
  } : _customConfig$getSugg,
      _customConfig$filters = customConfig.filters,
      customFilters = _customConfig$filters === void 0 ? {} : _customConfig$filters;
      customConfig.adapters;

  var mergedLabels = _objectSpread$8(_objectSpread$8({}, labelConfig), labels);

  var mergedFilters = _objectSpread$8(_objectSpread$8({}, filterWidgetConfig), customFilters);

  var suggestConfigMap = getSuggestConfig({
    context: context,
    suggestStyle: suggestStyle,
    rootPredicate: customConfig.rootPredicate
  });
  var suggestConfigMapCustom = getSuggests({
    client: context.client,
    suggestStyle: suggestStyle
  });

  var mergedSuggest = _objectSpread$8(_objectSpread$8({}, suggestConfigMap), suggestConfigMapCustom);

  var labelMap = config2labels(mergedLabels, context.client, context.localeSettings);
  var filters = filterBuilder({
    filterWidgetConfig: mergedFilters,
    labelMap: labelMap,
    suggestConfigMap: mergedSuggest,
    context: context
  });
  var includedFilters = without_1.apply(void 0, [customConfig.includedFilters || defaultFilterConfig$5.included].concat(_toConsumableArray__default["default"](customConfig.excludedFilters || [])));
  var highlightedFilters = customConfig.highlightedFilters || defaultFilterConfig$5.highlighted;
  return {
    labelMap: labelMap,
    suggestConfigMap: suggestConfigMap,
    filters: pickBy_1(pick_1(filters, includedFilters), function (e) {
      return !!e;
    }),
    defaultVisibleFilters: highlightedFilters,
    // rootPredicate: { type: 'in', key: 'basisOfRecord', values: ['PRESERVED_SPECIMEN', 'FOSSIL_SPECIMEN', 'MATERIAL_SAMPLE', 'LIVING_SPECIMEN'] },
    rootPredicate: customConfig.rootPredicate,
    //{ type: 'isNotNull', key: 'typeStatus' },
    // rootPredicate: { type: 'in', key: 'taxonKey', values: [4, 5, 7] },
    // rootPredicate: { type: 'equals', key: 'taxonKey', value: 44 },
    // rootPredicate: { type: 'and', predicates: [
    //   {type: 'equals', key: 'taxonKey', value: 44},
    //   {type: 'not', predicate: {type: 'equals', key: 'taxonKey', value: 212}}
    // ] },
    predicateConfig: filterConf$5,
    availableCatalogues: customConfig.availableCatalogues,
    tableConfig: tableConfig,
    defaultTableColumns: customConfig.defaultTableColumns,
    more: customConfig
  };
}

function OccurrenceSearch(_ref2) {
  var _ref2$config = _ref2.config,
      customConfig = _ref2$config === void 0 ? {} : _ref2$config,
      pageLayout = _ref2.pageLayout,
      props = _objectWithoutProperties__default["default"](_ref2, _excluded$D);

  var theme = React.useContext(ThemeContext);
  var localeSettings = React.useContext(LocaleContext); // const [filter, setFilter] = useState();//useUrlState({param: 'filter', base64encode: true});
  // const [filter, setFilter] = useState({ must: { taxonKey: [2609958] } });
  // const [filter, setFilter] = useQueryParam('filter', Base64JsonParam);

  var _useFilterParams = useFilterParams({
    predicateConfig: filterConf$5
  }),
      _useFilterParams2 = _slicedToArray__default["default"](_useFilterParams, 2),
      filter = _useFilterParams2[0],
      setFilter = _useFilterParams2[1];

  var Layout = pageLayout ? PageLayout$1 : ComponentLayout$1; // let filter = { must: { taxonKey: [2609958] } };
  // const setFilter = () => {};

  var apiContext = React.useContext(ApiContext);
  var intl = reactIntl.useIntl();
  var enrichedConfig = React.useMemo(function () {
    return buildConfig$1({
      labelConfig: commonLabels,
      getSuggestConfig: getCommonSuggests,
      filterWidgetConfig: commonFilters,
      customConfig: customConfig
    }, {
      client: apiContext,
      formatMessage: intl.formatMessage,
      localeSettings: localeSettings
    });
  }, [apiContext, intl, localeSettings]); //   console.log(`%c 
  //  ,_,
  // (O,O)
  // (   )  Powered by GBIF
  // -"-"-
  // All GBIF mediated data is freely available through our APIs. 
  // https://www.gbif.org/developer/summary
  // All GBIF source code is open source.
  // https://github.com/gbif
  // If your interest is the rendered HTML, then you might be developing a plugin. Let us know if you need custom markup, we would love to know what you are building.
  // helpdesk@gbif.org
  // `, 'color: green; font-weight: bold;');
  // const esQuery = compose(filter).build();
  // it is already wrapped in locale provider and an rtl provider and a theme provider.
  // add an api context, a prefilter and configuration of custom filters
  // the API context caries information about endpoints

  return react.jsx(Root, {
    dir: theme.dir
  }, react.jsx(SearchContext.Provider, {
    value: enrichedConfig
  }, react.jsx(UncontrollableFilterState, {
    filter: filter || {},
    onChange: setFilter
  }, react.jsx(Layout, _extends__default["default"]({
    config: enrichedConfig
  }, props, {
    tabs: customConfig.occurrenceSearchTabs
  })))));
}

var _excluded$C = ["siteConfig"];

function Wrap$6(_ref) {
  var siteConfig = _ref.siteConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$C);

  return react.jsx(StandaloneWrapper, {
    siteConfig: siteConfig
  }, react.jsx(Standalone$8, _extends__default["default"]({}, props, {
    siteConfig: siteConfig
  })));
}

function Standalone$8(props) {
  var routeContext = React.useContext(RouteContext);
  var path = routeContext.occurrenceSearch.route;
  return react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: path,
    render: function render(routeProps) {
      var _props$siteConfig;

      return react.jsx(OccurrenceSearch, _extends__default["default"]({
        pageLayout: true,
        config: props === null || props === void 0 ? void 0 : (_props$siteConfig = props.siteConfig) === null || _props$siteConfig === void 0 ? void 0 : _props$siteConfig.occurrence
      }, props, routeProps));
    }
  }));
}

var ResultsHeader = function ResultsHeader(_ref) {
  var children = _ref.children,
      total = _ref.total,
      loading = _ref.loading,
      message = _ref.message,
      props = _ref.props;
  var theme = React.useContext(ThemeContext);
  var showSkeleton = loading || typeof total !== 'number';
  return react.jsx("div", _extends__default["default"]({
    css: /*#__PURE__*/react.css("color:", theme.color500, ";font-size:12px;margin:0 0 4px 4px;" + ("" ), "" )
  }, props), showSkeleton && react.jsx(Skeleton, {
    style: {
      width: 100
    }
  }), !showSkeleton && react.jsx(reactIntl.FormattedMessage, {
    id: message || "counts.nResults",
    values: {
      total: total
    }
  }), children);
};

var fallbackTableConfig = {
  columns: [{
    trKey: 'Not specified',
    value: {
      key: 'key',
      labelHandle: 'key'
    }
  }]
};
var ResultsTable = function ResultsTable(_ref) {
  var first = _ref.first,
      prev = _ref.prev,
      next = _ref.next,
      size = _ref.size,
      from = _ref.from,
      results = _ref.results,
      total = _ref.total,
      loading = _ref.loading,
      _ref$defaultTableConf = _ref.defaultTableConfig,
      defaultTableConfig = _ref$defaultTableConf === void 0 ? fallbackTableConfig : _ref$defaultTableConf,
      hideLock = _ref.hideLock;

  var _useContext = React.useContext(SearchContext),
      filters = _useContext.filters,
      _useContext$tableConf = _useContext.tableConfig,
      tableConfig = _useContext$tableConf === void 0 ? defaultTableConfig : _useContext$tableConf,
      labelMap = _useContext.labelMap;

  var _useState = React.useState(!hideLock),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      fixedColumn = _useState2[0];
      _useState2[1];

  var fixed = fixedColumn;
  var headerss = tableConfig.columns.map(function (col, index) {
    var _filters$col$filterKe;
    var FilterPopover = col.filterKey ? (_filters$col$filterKe = filters[col.filterKey]) === null || _filters$col$filterKe === void 0 ? void 0 : _filters$col$filterKe.Popover : null;
    return react.jsx(Th, {
      key: col.trKey,
      width: col.width
    }, react.jsx(Row, {
      wrap: "nowrap"
    }, react.jsx(Col, {
      grow: false,
      style: {
        whiteSpace: 'nowrap'
      }
    }, react.jsx(reactIntl.FormattedMessage, {
      id: col.trKey
    })), FilterPopover && react.jsx(Col, null, react.jsx(FilterPopover, {
      modal: true,
      placement: "auto"
    }, react.jsx(Button, {
      appearance: "text",
      style: {
        display: 'flex'
      }
    }, react.jsx(md.MdFilterList, null))))));
  });
  return react.jsx("div", {
    style: {
      flex: "1 1 100%",
      display: "flex",
      height: "100%",
      maxHeight: "100vh",
      flexDirection: "column"
    }
  }, react.jsx(ResultsHeader, {
    loading: loading,
    total: total
  }), react.jsx(DataTable, {
    fixedColumn: fixed,
    first: first,
    prev: prev,
    next: next,
    size: size,
    from: from,
    total: total,
    loading: loading,
    style: {
      flex: "1 1 auto",
      height: 100,
      display: 'flex',
      flexDirection: 'column'
    }
  }, react.jsx("thead", null, react.jsx("tr", null, headerss)), react.jsx(TBody, {
    rowCount: size,
    columnCount: 7,
    loading: loading
  }, getRows$1({
    tableConfig: tableConfig,
    labelMap: labelMap,
    results: results
  }))));
};

var getRows$1 = function getRows(_ref2) {
  var tableConfig = _ref2.tableConfig,
      labelMap = _ref2.labelMap,
      _ref2$results = _ref2.results,
      results = _ref2$results === void 0 ? [] : _ref2$results;
  var rows = results.map(function (row, index) {
    var cells = tableConfig.columns.map(function (field, i) {
      var val = get_1(row, field.value.key);
      var formattedVal = val;

      if (!val && field.value.hideFalsy === true) {
        formattedVal = '';
      } else if (field.value.formatter) {
        formattedVal = field.value.formatter(val, row);
      } else if (field.value.labelHandle) {
        var Label = labelMap[field.value.labelHandle];
        formattedVal = Label ? react.jsx(Label, {
          id: val
        }) : val;
      }

      return react.jsx(Td, {
        noWrap: field.noWrap,
        key: field.trKey,
        style: field.value.rightAlign ? {
          textAlign: 'right'
        } : {}
      }, formattedVal);
    });
    return react.jsx("tr", {
      key: row.key || row.id || index
    }, cells);
  });
  return rows;
};

var _excluded$B = ["graphQuery", "resultKey", "offsetName", "defaultTableConfig"];

function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function StandardSearchTable(_ref) {
  var _data$resultKey, _data$resultKey$docum, _data$resultKey2, _data$resultKey3, _data$resultKey3$docu, _data$resultKey4;

  var graphQuery = _ref.graphQuery,
      resultKey = _ref.resultKey;
      _ref.offsetName;
      var defaultTableConfig = _ref.defaultTableConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$B);

  // const [offset, setOffset] = useUrlState({ param: 'offset', defaultValue: 0 });
  var _useQueryParam = useQueryParams.useQueryParam('from', useQueryParams.NumberParam),
      _useQueryParam2 = _slicedToArray__default["default"](_useQueryParam, 2),
      _useQueryParam2$ = _useQueryParam2[0],
      offset = _useQueryParam2$ === void 0 ? 0 : _useQueryParam2$,
      setOffset = _useQueryParam2[1];

  var limit = 25;
  var currentFilterContext = React.useContext(FilterContext);

  var _useContext = React.useContext(SearchContext),
      rootPredicate = _useContext.rootPredicate,
      predicateConfig = _useContext.predicateConfig;

  var _useQuery = useQuery(graphQuery, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  React.useEffect(function () {
    var _filter2v = filter2v1(currentFilterContext.filter, predicateConfig),
        v1Filter = _filter2v.v1Filter;

    var filter = _objectSpread$7(_objectSpread$7({}, v1Filter), rootPredicate);

    load({
      keepDataWhileLoading: true,
      variables: _objectSpread$7(_objectSpread$7({}, filter), {}, {
        limit: limit,
        offset: offset
      })
    });
  }, [currentFilterContext.filterHash, rootPredicate, offset]); // https://stackoverflow.com/questions/55075604/react-hooks-useeffect-only-on-update

  reactUse.useUpdateEffect(function () {
    setOffset(undefined);
  }, [currentFilterContext.filterHash]);
  var next = React.useCallback(function () {
    setOffset(Math.max(0, offset + limit));
  });
  var prev = React.useCallback(function () {
    var offsetValue = Math.max(0, offset - limit);
    setOffset(offsetValue !== 0 ? offsetValue : undefined);
  });
  var first = React.useCallback(function () {
    setOffset(undefined);
  });

  if (error) {
    return react.jsx("div", null, "Failed to fetch data");
  } // allow both response types


  var results = (data === null || data === void 0 ? void 0 : (_data$resultKey = data[resultKey]) === null || _data$resultKey === void 0 ? void 0 : (_data$resultKey$docum = _data$resultKey.documents) === null || _data$resultKey$docum === void 0 ? void 0 : _data$resultKey$docum.results) || (data === null || data === void 0 ? void 0 : (_data$resultKey2 = data[resultKey]) === null || _data$resultKey2 === void 0 ? void 0 : _data$resultKey2.results);
  var total = (data === null || data === void 0 ? void 0 : (_data$resultKey3 = data[resultKey]) === null || _data$resultKey3 === void 0 ? void 0 : (_data$resultKey3$docu = _data$resultKey3.documents) === null || _data$resultKey3$docu === void 0 ? void 0 : _data$resultKey3$docu.count) || (data === null || data === void 0 ? void 0 : (_data$resultKey4 = data[resultKey]) === null || _data$resultKey4 === void 0 ? void 0 : _data$resultKey4.count);
  return react.jsx(React__default["default"].Fragment, null, react.jsx(ResultsTable, _extends__default["default"]({}, props, {
    loading: loading,
    results: results,
    next: next,
    prev: prev,
    first: first,
    size: limit,
    from: offset,
    total: total,
    defaultTableConfig: defaultTableConfig
  })));
}

var QUERY$3 = "\nquery list($institution: [GUID], $code: String, $q: String, $offset: Int, $limit: Int, $country: Country, $fuzzyName: String, $city: String, $name: String, $active: Boolean){\n  collectionSearch(institution: $institution, code: $code, q: $q, limit: $limit, offset: $offset, country: $country, fuzzyName: $fuzzyName, city: $city, name: $name, active: $active) {\n    count\n    offset\n    limit\n    results {\n      key\n      name\n      code\n      active\n      occurrenceCount\n      address {\n        city\n        country\n      }\n      mailingAddress {\n        city\n        country\n      }\n    }\n  }\n}\n";
var defaultTableConfig$4 = {
  columns: [{
    trKey: 'tableHeaders.title',
    value: {
      key: 'name',
      formatter: function formatter(value, item) {
        return react.jsx(ResourceLink, {
          type: "collectionKey",
          discreet: true,
          id: item.key
        }, value);
      }
    },
    width: 'wide'
  }, {
    trKey: 'filters.code.name',
    value: {
      filterKey: 'code',
      key: 'code',
      hideFalsy: true
    }
  }, {
    trKey: 'filters.country.name',
    value: {
      filterKey: 'country',
      key: 'key',
      formatter: function formatter(value, item) {
        var _item$address, _item$mailingAddress;

        var countryCode = ((_item$address = item.address) === null || _item$address === void 0 ? void 0 : _item$address.country) || ((_item$mailingAddress = item.mailingAddress) === null || _item$mailingAddress === void 0 ? void 0 : _item$mailingAddress.country);
        return countryCode ? react.jsx(reactIntl.FormattedMessage, {
          id: "enums.countryCode.".concat(countryCode)
        }) : null;
      },
      hideFalsy: true
    }
  }, {
    trKey: 'filters.city.name',
    value: {
      filterKey: 'city',
      key: 'key',
      formatter: function formatter(value, item) {
        var _item$address2, _item$mailingAddress2;

        return ((_item$address2 = item.address) === null || _item$address2 === void 0 ? void 0 : _item$address2.city) || ((_item$mailingAddress2 = item.mailingAddress) === null || _item$mailingAddress2 === void 0 ? void 0 : _item$mailingAddress2.city);
      },
      hideFalsy: true
    }
  }, {
    trKey: 'tableHeaders.occurrences',
    value: {
      key: 'occurrenceCount',
      formatter: function formatter(value, item) {
        return react.jsx(reactIntl.FormattedNumber, {
          value: value
        });
      },
      hideFalsy: true,
      rightAlign: true
    }
  }, {
    trKey: 'active',
    value: {
      key: 'active',
      formatter: function formatter(value, item) {
        return value ? 'yes' : 'no';
      }
    }
  }]
};

function Table$4() {
  // const history = useHistory();
  React.useContext(RouteContext);
  return react.jsx(StandardSearchTable, {
    graphQuery: QUERY$3,
    resultKey: "collectionSearch",
    defaultTableConfig: defaultTableConfig$4
  });
}

var filters$4 = ['q', 'institutionKey', 'city', 'country', 'code'].sort();
var highlighted$4 = ['q', 'institutionKey', 'city', 'country', 'code'];
var defaultFilterConfig$4 = {
  filters: filters$4,
  included: filters$4,
  highlighted: highlighted$4
};

var filterConf$4 = {
  fields: {
    country: {
      singleValue: true
    },
    institutionKey: {
      defaultKey: 'institution',
      singleValue: true
    },
    q: {
      singleValue: true
    },
    name: {
      singleValue: true
    },
    fuzzyName: {
      singleValue: true
    },
    city: {
      singleValue: true
    },
    code: {
      singleValue: true
    }
  }
};
filters$4.forEach(function (filter) {
  filterConf$4.fields[filter] = filterConf$4.fields[filter] || {};
});

var _excluded$A = ["className", "config", "Table", "style"];
Tabs.TabList;
    Tabs.Tab;
    Tabs.TabPanel;

var Layout$1 = function Layout(_ref) {
  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      config = _ref.config,
      Table = _ref.Table,
      style = _ref.style;
      _objectWithoutProperties__default["default"](_ref, _excluded$A);

  var _useState = React.useState('list'),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      activeView = _useState2[0],
      setActiveView = _useState2[1];

  var theme = React.useContext(ThemeContext);
  var prefix = theme.prefix || 'gbif';
  var elementName = 'searchLayout';
  return react.jsx("div", {
    className: "".concat(className, " ").concat(prefix, "-").concat(elementName),
    css: cssLayout({
      theme: theme
    }),
    style: style
  }, react.jsx(Tabs, {
    activeId: activeView,
    onChange: setActiveView
  }, react.jsx("div", {
    css: cssNavBar({
      theme: theme
    })
  }, react.jsx("div", {
    css: cssFilter({
      theme: theme
    })
  }, react.jsx(FilterBar$1, {
    config: config
  }))), react.jsx("div", {
    css: cssViewArea({
      theme: theme
    })
  }, react.jsx(Table, null))));
};

var mapContextToProps$1 = function mapContextToProps(_ref2) {
  var test = _ref2.test;
  return {
    test: test
  };
};

var ComponentLayout = withContext(mapContextToProps$1)(Layout$1);

var _excluded$z = ["className", "config", "Table"];
Tabs.TabList;
    Tabs.Tab;
    Tabs.TabPanel;

var Layout = function Layout(_ref) {
  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      config = _ref.config,
      Table = _ref.Table,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$z);

  var _useState = React.useState('list'),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      activeView = _useState2[0],
      setActiveView = _useState2[1];

  var theme = React.useContext(ThemeContext);
  var prefix = theme.prefix || 'gbif';
  var elementName = 'searchLayout';
  return react.jsx("div", _extends__default["default"]({
    className: "".concat(className, " ").concat(prefix, "-").concat(elementName),
    css: cssLayout({
      theme: theme
    })
  }, props), react.jsx(Tabs, {
    activeId: activeView,
    onChange: setActiveView
  }, react.jsx("div", {
    css: cssNavBar({
      theme: theme
    }),
    style: {
      margin: '0 0 10px 0',
      borderRadius: 0
    }
  }, react.jsx(DataHeader, {
    availableCatalogues: config.availableCatalogues,
    style: {
      borderBottom: '1px solid #ddd'
    }
  }), react.jsx("div", {
    css: cssFilter({
      theme: theme
    })
  }, react.jsx(FilterBar$1, {
    config: config
  }))), react.jsx("div", {
    css: cssViewArea({
      theme: theme
    })
  }, react.jsx(Table, null))));
};

var mapContextToProps = function mapContextToProps(_ref2) {
  var test = _ref2.test;
  return {
    test: test
  };
};

var PageLayout = withContext(mapContextToProps)(Layout);

function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function buildConfig(_ref, context) {
  var customConfig = _ref.customConfig,
      predicateConfig = _ref.predicateConfig,
      defaultFilterConfig = _ref.defaultFilterConfig;
  var _customConfig$labels = customConfig.labels,
      labels = _customConfig$labels === void 0 ? {} : _customConfig$labels,
      _customConfig$getSugg = customConfig.getSuggests,
      getSuggests = _customConfig$getSugg === void 0 ? function () {
    return {};
  } : _customConfig$getSugg,
      _customConfig$filters = customConfig.filters,
      customFilters = _customConfig$filters === void 0 ? {} : _customConfig$filters;
      customConfig.adapters;

  var mergedLabels = _objectSpread$6(_objectSpread$6({}, commonLabels), labels);

  var mergedFilters = _objectSpread$6(_objectSpread$6({}, commonFilters), customFilters);

  var suggestConfigMap = getCommonSuggests({
    context: context,
    suggestStyle: suggestStyle
  });
  var suggestConfigMapCustom = getSuggests({
    client: context.client,
    suggestStyle: suggestStyle
  });

  var mergedSuggest = _objectSpread$6(_objectSpread$6({}, suggestConfigMap), suggestConfigMapCustom);

  var labelMap = config2labels(mergedLabels, context.client, context.localeSettings);
  var filters = filterBuilder({
    filterWidgetConfig: mergedFilters,
    labelMap: labelMap,
    suggestConfigMap: mergedSuggest,
    context: context
  });
  var includedFilters = without_1.apply(void 0, [customConfig.includedFilters || defaultFilterConfig.included].concat(_toConsumableArray__default["default"](customConfig.excludedFilters || [])));
  var highlightedFilters = customConfig.highlightedFilters || defaultFilterConfig.highlighted;
  var initialVisibleFilters = intersection_1(highlightedFilters, includedFilters);
  return {
    labelMap: labelMap,
    suggestConfigMap: suggestConfigMap,
    filters: pickBy_1(pick_1(filters, includedFilters), function (e) {
      return !!e;
    }),
    defaultVisibleFilters: initialVisibleFilters,
    rootPredicate: customConfig.rootFilter,
    availableCatalogues: customConfig.availableCatalogues,
    predicateConfig: predicateConfig
  };
}

var _excluded$y = ["config", "predicateConfig", "defaultFilterConfig", "Table", "pageLayout"];

function Search$5(_ref) {
  var _ref$config = _ref.config,
      customConfig = _ref$config === void 0 ? {} : _ref$config,
      predicateConfig = _ref.predicateConfig,
      defaultFilterConfig = _ref.defaultFilterConfig,
      Table = _ref.Table,
      pageLayout = _ref.pageLayout,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$y);

  var theme = React.useContext(ThemeContext);
  var localeSettings = React.useContext(LocaleContext);

  var _useFilterParams = useFilterParams({
    predicateConfig: predicateConfig
  }),
      _useFilterParams2 = _slicedToArray__default["default"](_useFilterParams, 3),
      filter = _useFilterParams2[0],
      setFilter = _useFilterParams2[1];
      _useFilterParams2[2];

  var apiContext = React.useContext(ApiContext);
  var intl = reactIntl.useIntl();
  var config = React.useMemo(function () {
    return buildConfig({
      customConfig: customConfig,
      predicateConfig: predicateConfig,
      defaultFilterConfig: defaultFilterConfig
    }, {
      client: apiContext,
      formatMessage: intl.formatMessage,
      localeSettings: localeSettings
    });
  }, [apiContext, intl]);
  var Layout = pageLayout ? PageLayout : ComponentLayout;
  return react.jsx(Root, {
    dir: theme.dir
  }, react.jsx(SearchContext.Provider, {
    value: config
  }, react.jsx(UncontrollableFilterState, {
    filter: filter,
    onChange: setFilter
  }, react.jsx(Layout, _extends__default["default"]({
    config: config,
    Table: Table
  }, props)))));
}

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Search$4(props) {
  return react.jsx(Search$5, _objectSpread$5(_objectSpread$5({}, props), {}, {
    predicateConfig: filterConf$4,
    defaultFilterConfig: defaultFilterConfig$4,
    Table: Table$4
  }));
}

var _excluded$x = ["siteConfig"];

function Wrap$5(_ref) {
  var siteConfig = _ref.siteConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$x);

  return react.jsx(StandaloneWrapper, {
    siteConfig: siteConfig
  }, react.jsx(Standalone$7, _extends__default["default"]({}, props, {
    siteConfig: siteConfig
  })));
}

function Standalone$7(props) {
  var routeContext = React.useContext(RouteContext);
  var path = routeContext.collectionSearch.route;
  return react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: path,
    render: function render(routeProps) {
      var _props$siteConfig;

      return react.jsx(Search$4, _extends__default["default"]({
        pageLayout: true,
        config: props === null || props === void 0 ? void 0 : (_props$siteConfig = props.siteConfig) === null || _props$siteConfig === void 0 ? void 0 : _props$siteConfig.collection
      }, props, routeProps));
    }
  }));
}

var QUERY$2 = "\nquery list($code: String, $q: String, $offset: Int, $limit: Int, $country: Country, $fuzzyName: String, $city: String, $name: String, $active: Boolean){\n  institutionSearch(code: $code, q: $q, limit: $limit, offset: $offset, country: $country, fuzzyName: $fuzzyName, city: $city, name: $name, active: $active) {\n    count\n    offset\n    limit\n    results {\n      key\n      name\n      code\n      active\n      occurrenceCount\n      numberSpecimens\n      address {\n        city\n        country\n      }\n      mailingAddress {\n        city\n        country\n      }\n    }\n  }\n}\n";
var defaultTableConfig$3 = {
  columns: [{
    trKey: 'title',
    value: {
      key: 'name',
      formatter: function formatter(value, item) {
        return react.jsx(ResourceLink, {
          type: "institutionKey",
          discreet: true,
          id: item.key
        }, value);
      }
    },
    width: 'wide'
  }, {
    trKey: 'filters.code.name',
    value: {
      filterKey: 'code',
      key: 'code',
      hideFalsy: true
    }
  }, {
    trKey: 'filters.country.name',
    value: {
      filterKey: 'country',
      key: 'key',
      formatter: function formatter(value, item) {
        var _item$address, _item$mailingAddress;

        var countryCode = ((_item$address = item.address) === null || _item$address === void 0 ? void 0 : _item$address.country) || ((_item$mailingAddress = item.mailingAddress) === null || _item$mailingAddress === void 0 ? void 0 : _item$mailingAddress.country);
        return countryCode ? react.jsx(reactIntl.FormattedMessage, {
          id: "enums.countryCode.".concat(countryCode)
        }) : null;
      },
      hideFalsy: true
    }
  }, {
    trKey: 'filters.city.name',
    value: {
      filterKey: 'city',
      key: 'key',
      formatter: function formatter(value, item) {
        var _item$address2, _item$mailingAddress2;

        return ((_item$address2 = item.address) === null || _item$address2 === void 0 ? void 0 : _item$address2.city) || ((_item$mailingAddress2 = item.mailingAddress) === null || _item$mailingAddress2 === void 0 ? void 0 : _item$mailingAddress2.city);
      },
      hideFalsy: true
    }
  }, {
    trKey: 'tableHeaders.numberSpecimens',
    value: {
      key: 'numberSpecimens',
      formatter: function formatter(value, item) {
        return react.jsx(reactIntl.FormattedNumber, {
          value: value
        });
      },
      hideFalsy: true,
      rightAlign: true
    }
  }, {
    trKey: 'tableHeaders.gbifNumberSpecimens',
    value: {
      key: 'occurrenceCount',
      formatter: function formatter(value, item) {
        return react.jsx(reactIntl.FormattedNumber, {
          value: value
        });
      },
      hideFalsy: true,
      rightAlign: true
    }
  }, {
    trKey: 'active',
    value: {
      key: 'active',
      formatter: function formatter(value, item) {
        return value ? 'yes' : 'no';
      }
    }
  }]
};

function Table$3() {
  return react.jsx(StandardSearchTable, {
    graphQuery: QUERY$2,
    resultKey: "institutionSearch",
    defaultTableConfig: defaultTableConfig$3
  });
}

var filters$3 = ['q', 'code', 'city', 'country', 'name'].sort();
var highlighted$3 = ['q', 'code', 'city', 'country'];
var defaultFilterConfig$3 = {
  filters: filters$3,
  included: filters$3,
  highlighted: highlighted$3
};

var filterConf$3 = {
  fields: {
    country: {
      singleValue: true
    },
    q: {
      singleValue: true
    },
    name: {
      singleValue: true
    },
    fuzzyName: {
      singleValue: true
    },
    city: {
      singleValue: true
    },
    code: {
      singleValue: true
    }
  }
};
filters$3.forEach(function (filter) {
  filterConf$3.fields[filter] = filterConf$3.fields[filter] || {};
});

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Search$3(props) {
  return react.jsx(Search$5, _objectSpread$4(_objectSpread$4({}, props), {}, {
    predicateConfig: filterConf$3,
    defaultFilterConfig: defaultFilterConfig$3,
    Table: Table$3
  }));
}

var _excluded$w = ["siteConfig"];

function Wrap$4(_ref) {
  var siteConfig = _ref.siteConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$w);

  return react.jsx(StandaloneWrapper, {
    siteConfig: siteConfig
  }, react.jsx(Standalone$6, _extends__default["default"]({}, props, {
    siteConfig: siteConfig
  })));
}

function Standalone$6(props) {
  var routeContext = React.useContext(RouteContext);
  var path = routeContext.institutionSearch.route;
  return react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: path,
    render: function render(routeProps) {
      var _props$siteConfig;

      return react.jsx(Search$3, _extends__default["default"]({
        pageLayout: true,
        config: props === null || props === void 0 ? void 0 : (_props$siteConfig = props.siteConfig) === null || _props$siteConfig === void 0 ? void 0 : _props$siteConfig.institution
      }, props, routeProps));
    }
  }));
}

var QUERY$1 = "\nquery list($predicate: Predicate, $publisher:[String], $source: [String], $doi: [String], $gbifDownloadKey: [ID], $openAccess: Boolean, $peerReview: Boolean, $publishingOrganizationKey: [ID], $topics: [String], $relevance: [String], $year: [String], $literatureType: [String], $countriesOfCoverage: [Country], $countriesOfResearcher: [Country], $gbifDatasetKey: [ID], $q: String, $offset: Int, $limit: Int, ){\n  literatureSearch(predicate:$predicate, \n    gbifDatasetKey: $gbifDatasetKey, \n    q: $q, \n    countriesOfResearcher: $countriesOfResearcher, \n    countriesOfCoverage: $countriesOfCoverage, \n    literatureType: $literatureType, \n    year: $year, \n    relevance: $relevance, \n    topics: $topics, \n    publishingOrganizationKey: $publishingOrganizationKey, \n    peerReview: $peerReview, \n    openAccess: $openAccess, \n    gbifDownloadKey: $gbifDownloadKey, \n    doi: $doi, \n    source: $source, \n    publisher: $publisher\n    limit: $limit, \n    offset: $offset\n    ) {\n    documents {\n      count\n      offset\n      limit\n      results {\n        title\n        abstract\n        authors {\n          firstName\n          lastName\n        }\n        literatureType\n        year\n        identifiers {\n          doi\n        }\n        websites\n      }\n    }\n  }\n}\n";

function getLink(item) {
  var _item$identifiers, _item$websites;

  if (item !== null && item !== void 0 && (_item$identifiers = item.identifiers) !== null && _item$identifiers !== void 0 && _item$identifiers.doi) {
    return "https://doi.org/".concat(item.identifiers.doi);
  }

  return item === null || item === void 0 ? void 0 : (_item$websites = item.websites) === null || _item$websites === void 0 ? void 0 : _item$websites[0];
}

var defaultTableConfig$2 = {
  columns: [{
    trKey: 'tableHeaders.titleAndAbstract',
    value: {
      key: 'title',
      formatter: function formatter(value, item) {
        var _item$abstract;

        var maxLength = 200;
        var truncatedAbstract = ((_item$abstract = item["abstract"]) === null || _item$abstract === void 0 ? void 0 : _item$abstract.length) > maxLength ? "".concat(item["abstract"].substr(0, maxLength), "...") : item["abstract"];
        var link = getLink(item);
        return react.jsx("div", null, link ? react.jsx("div", null, react.jsx("a", {
          href: link,
          style: {
            color: 'inherit',
            textDecoration: 'none'
          }
        }, value, " ", react.jsx(md.MdLink, null))) : react.jsx("div", null, value), react.jsx("div", {
          style: {
            color: '#aaa'
          }
        }, truncatedAbstract));
      }
    },
    width: 'wide'
  }, // {
  //   trKey: 'tableHeaders.altmetric',
  //   value: {
  //     key: 'identifiers',
  //     formatter: (value, item) => {
  //       return <AltmetricDonut doi={item?.identifiers?.doi} />
  //     },
  //     hideFalsy: true
  //   }
  // },
  {
    trKey: 'filters.literatureType.name',
    value: {
      key: 'literatureType',
      labelHandle: 'literatureType',
      hideFalsy: true
    }
  }, {
    trKey: 'filters.year.name',
    value: {
      filterKey: 'year',
      key: 'year',
      hideFalsy: true
    }
  } // {
  //   trKey: 'tableHeaders.occurrences',
  //   value: {
  //     key: 'occurrenceCount',
  //     formatter: (value, item) => <FormattedNumber value={value} />,
  //     hideFalsy: true,
  //     rightAlign: true
  //   }
  // },
  // {
  //   trKey: 'active',
  //   value: {
  //     key: 'active',
  //     formatter: (value, item) => value ? 'yes' : 'no'
  //   }
  // }
  ]
};

function Table$2() {
  return react.jsx(StandardSearchTable, {
    graphQuery: QUERY$1,
    resultKey: "literatureSearch",
    defaultTableConfig: defaultTableConfig$2
  });
}

var filters$2 = ['q', 'year', 'countriesOfResearcher', 'countriesOfCoverage', 'datasetKey', 'publisherKey', 'literatureType'].sort();
var highlighted$2 = ['q', 'year', 'countriesOfResearcher', 'datasetKey'];
var defaultFilterConfig$2 = {
  filters: filters$2,
  included: filters$2,
  highlighted: highlighted$2
};

var filterConf$2 = {
  fields: {
    countriesOfResearcher: {
      defaultKey: 'countriesOfResearcher'
    },
    countriesOfCoverage: {
      defaultKey: 'countriesOfCoverage'
    },
    datasetKey: {
      defaultKey: 'gbifDatasetKey'
    },
    publisherKey: {
      defaultKey: 'publishingOrganizationKey'
    },
    year: {
      v1: {
        supportedTypes: ['range', 'equals']
      }
    },
    q: {
      singleValue: true
    }
  }
};
filters$2.forEach(function (filter) {
  filterConf$2.fields[filter] = filterConf$2.fields[filter] || {};
});

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Search$2(props) {
  return react.jsx(Search$5, _objectSpread$3(_objectSpread$3({}, props), {}, {
    predicateConfig: filterConf$2,
    defaultFilterConfig: defaultFilterConfig$2,
    Table: Table$2
  }));
}

var _excluded$v = ["siteConfig"];

function Wrap$3(_ref) {
  var siteConfig = _ref.siteConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$v);

  return react.jsx(StandaloneWrapper, {
    siteConfig: siteConfig
  }, react.jsx(Standalone$5, _extends__default["default"]({}, props, {
    siteConfig: siteConfig
  })));
}

function Standalone$5(props) {
  var routeContext = React.useContext(RouteContext);
  var path = routeContext.literatureSearch.route;
  return react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: path,
    render: function render(routeProps) {
      var _props$siteConfig;

      return react.jsx(Search$2, _extends__default["default"]({
        pageLayout: true,
        config: props === null || props === void 0 ? void 0 : (_props$siteConfig = props.siteConfig) === null || _props$siteConfig === void 0 ? void 0 : _props$siteConfig.literature
      }, props, routeProps));
    }
  }));
}

var DATASET_LIST = "\nquery list($endorsingNodeKey: [ID], $networkKey: [ID], $publishingOrg: [ID], $hostingOrg: [ID], $publishingCountry: [Country], $q: String, $offset: Int, $limit: Int, $type: [DatasetType], $subtype: [DatasetSubtype]){\n  datasetSearch(endorsingNodeKey:$endorsingNodeKey, networkKey:$networkKey, publishingOrg:$publishingOrg, hostingOrg: $hostingOrg, publishingCountry: $publishingCountry, q: $q, limit: $limit, offset: $offset, type: $type, subtype: $subtype) {\n    count\n    offset\n    limit\n    results {\n      key\n      title\n      publishingOrganizationTitle\n      publishingOrganizationKey\n      type\n      subtype\n      recordCount\n      occurrenceCount\n      literatureCount\n    }\n  }\n}\n";
var defaultTableConfig$1 = {
  columns: [{
    trKey: 'tableHeaders.title',
    value: {
      key: 'title',
      formatter: function formatter(value, item) {
        return react.jsx(DatasetKeyLink, {
          discreet: true,
          id: item.key
        }, value);
      }
    },
    width: 'wide'
  }, {
    trKey: 'filters.publisherKey.name',
    filterKey: 'publisherKey',
    // optional
    value: {
      key: 'publishingOrganizationKey',
      formatter: function formatter(value, item) {
        return item.publishingOrganizationTitle;
      }
    },
    width: 'wide'
  }, {
    trKey: 'filters.datasetType.name',
    filterKey: 'datasetType',
    value: {
      key: 'type',
      labelHandle: 'datasetType'
    }
  }, // {
  //   trKey: 'filters.datasetSubtype.name',
  //   filterKey: 'datasetSubtype',
  //   value: {
  //     key: 'subtype',
  //     labelHandle: 'datasetSubtype',
  //     hideFalsy: true
  //   }
  // },
  {
    trKey: 'tableHeaders.citations',
    value: {
      key: 'literatureCount',
      formatter: function formatter(value, item) {
        return react.jsx(reactIntl.FormattedNumber, {
          value: value
        });
      },
      hideFalsy: true,
      rightAlign: true
    }
  }, {
    trKey: 'tableHeaders.occurrences',
    value: {
      key: 'occurrenceCount',
      formatter: function formatter(value, item) {
        return react.jsx(reactIntl.FormattedNumber, {
          value: value
        });
      },
      hideFalsy: true,
      rightAlign: true
    }
  }]
};

function Table$1() {
  React.useContext(RouteContext);
  return react.jsx(StandardSearchTable, {
    graphQuery: DATASET_LIST,
    resultKey: "datasetSearch",
    defaultTableConfig: defaultTableConfig$1
  });
}

var filters$1 = ['q', 'datasetType', 'license', // 'keyword',
'publisherKey', 'hostingOrganizationKey', // 'decade',
'publishingCountryCode', 'hostingCountry', 'networkKey'].sort();
var included = ['q', 'datasetType', 'license', 'publisherKey', 'hostingOrganizationKey', 'publishingCountryCode', 'hostingCountry'];
var highlighted$1 = ['q', 'datasetType', 'publisherKey', 'license'];
var defaultFilterConfig$1 = {
  filters: filters$1,
  included: included,
  highlighted: highlighted$1
};

var filterConf$1 = {
  fields: {
    publisherKey: {
      defaultKey: 'publishingOrg'
    },
    hostingOrganizationKey: {
      defaultKey: 'hostingOrg'
    },
    publishingCountryCode: {
      defaultKey: 'publishingCountry'
    },
    q: {
      singleValue: true
    },
    datasetType: {
      defaultKey: 'type'
    },
    datasetSubtype: {
      defaultKey: 'subtype'
    }
  }
};
filters$1.forEach(function (filter) {
  filterConf$1.fields[filter] = filterConf$1.fields[filter] || {};
});

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Search$1(props) {
  return react.jsx(Search$5, _objectSpread$2(_objectSpread$2({}, props), {}, {
    predicateConfig: filterConf$1,
    defaultFilterConfig: defaultFilterConfig$1,
    Table: Table$1
  }));
}

var _excluded$u = ["siteConfig"];

function Wrap$2(_ref) {
  var siteConfig = _ref.siteConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$u);

  return react.jsx(StandaloneWrapper, {
    siteConfig: siteConfig
  }, react.jsx(Standalone$4, _extends__default["default"]({}, props, {
    siteConfig: siteConfig
  })));
}

function Standalone$4(props) {
  var routeContext = React.useContext(RouteContext);
  var path = routeContext.datasetSearch.route;
  return react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: path,
    render: function render(routeProps) {
      var _props$siteConfig;

      return react.jsx(Search$1, _extends__default["default"]({
        pageLayout: true,
        config: props === null || props === void 0 ? void 0 : (_props$siteConfig = props.siteConfig) === null || _props$siteConfig === void 0 ? void 0 : _props$siteConfig.dataset
      }, props, routeProps));
    }
  }));
}

var _excluded$t = ["presentationComponent", "presentationProps", "graphQuery", "resultKey", "offsetName", "defaultTableConfig"];

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function StandardSearch(_ref) {
  var _data$resultKey;

  var _ref$presentationComp = _ref.presentationComponent,
      PresentationComponent = _ref$presentationComp === void 0 ? ResultsTable : _ref$presentationComp;
      _ref.presentationProps;
      var graphQuery = _ref.graphQuery,
      resultKey = _ref.resultKey;
      _ref.offsetName;
      var defaultTableConfig = _ref.defaultTableConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$t);

  var _useQueryParam = useQueryParams.useQueryParam('from', useQueryParams.NumberParam),
      _useQueryParam2 = _slicedToArray__default["default"](_useQueryParam, 2),
      _useQueryParam2$ = _useQueryParam2[0],
      offset = _useQueryParam2$ === void 0 ? 0 : _useQueryParam2$,
      setOffset = _useQueryParam2[1];

  var limit = 20;
  var currentFilterContext = React.useContext(FilterContext);

  var _useContext = React.useContext(SearchContext),
      rootPredicate = _useContext.rootPredicate,
      predicateConfig = _useContext.predicateConfig;

  var _useQuery = useQuery(graphQuery, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      loading = _useQuery.loading,
      load = _useQuery.load;

  React.useEffect(function () {
    var _filter2v = filter2v1(currentFilterContext.filter, predicateConfig),
        v1Filter = _filter2v.v1Filter;

    var filter = _objectSpread$1(_objectSpread$1({}, v1Filter), rootPredicate);

    load({
      keepDataWhileLoading: true,
      variables: _objectSpread$1(_objectSpread$1({}, filter), {}, {
        limit: limit,
        offset: offset
      })
    });
  }, [currentFilterContext.filterHash, rootPredicate, offset]); // https://stackoverflow.com/questions/55075604/react-hooks-useeffect-only-on-update

  reactUse.useUpdateEffect(function () {
    setOffset(undefined);
  }, [currentFilterContext.filterHash]);
  var next = React.useCallback(function () {
    setOffset(Math.max(0, offset + limit));
  });
  var prev = React.useCallback(function () {
    var offsetValue = Math.max(0, offset - limit);
    setOffset(offsetValue !== 0 ? offsetValue : undefined);
  });
  var first = React.useCallback(function () {
    setOffset(undefined);
  });
  return react.jsx(React__default["default"].Fragment, null, react.jsx(PresentationComponent, _extends__default["default"]({}, props, {
    loading: loading,
    results: data === null || data === void 0 ? void 0 : data[resultKey].results,
    next: next,
    prev: prev,
    first: first,
    size: limit,
    from: offset,
    total: data === null || data === void 0 ? void 0 : (_data$resultKey = data[resultKey]) === null || _data$resultKey === void 0 ? void 0 : _data$resultKey.count,
    defaultTableConfig: defaultTableConfig
  })));
}

var QUERY = "\nquery list($networkKey: ID, $country: Country, $q: String, $offset: Int, $limit: Int){\n  organizationSearch(networkKey: $networkKey, isEndorsed: true, q: $q, limit: $limit, offset: $offset, country: $country) {\n    count\n    offset\n    limit\n    results {\n      key\n      title\n      country\n      numPublishedDatasets\n      hostedDataset {\n        count\n      }\n      created\n    }\n  }\n}\n";
var defaultTableConfig = {
  columns: [{
    trKey: 'filters.publisherKey.name',
    value: {
      key: 'title',
      formatter: function formatter(value, item) {
        return react.jsx(PublisherKeyLink, {
          discreet: true,
          id: item.key
        }, value);
      }
    },
    width: 'wide',
    filterKey: 'q'
  }, {
    trKey: 'filters.publishingCountryCode.name',
    value: {
      key: 'country',
      labelHandle: 'countryCode',
      hideFalsy: true
    },
    filterKey: 'country'
  }, {
    trKey: 'tableHeaders.pubDatasets',
    value: {
      key: 'numPublishedDatasets',
      formatter: function formatter(value, item) {
        return react.jsx(reactIntl.FormattedNumber, {
          value: value
        });
      },
      hideFalsy: true,
      rightAlign: true
    }
  }, {
    trKey: 'tableHeaders.hostedDatasets',
    value: {
      key: 'hostedDataset.count',
      formatter: function formatter(value, item) {
        return react.jsx(reactIntl.FormattedNumber, {
          value: value
        });
      },
      hideFalsy: true,
      rightAlign: true
    }
  }, {
    trKey: 'tableHeaders.registered',
    value: {
      key: 'created',
      formatter: function formatter(value, item) {
        return react.jsx(reactIntl.FormattedDate, {
          value: value,
          year: "numeric",
          month: "long",
          day: "2-digit"
        });
      },
      hideFalsy: true
    },
    noWrap: true
  }]
};

function Table() {
  React.useContext(RouteContext);
  return react.jsx(StandardSearch, {
    presentationComponent: ResultsTable,
    graphQuery: QUERY,
    resultKey: "organizationSearch",
    defaultTableConfig: defaultTableConfig,
    hideLock: true
  });
}

var filters = ['q', 'countrySingle', 'networkKey'].sort();
var highlighted = ['q', 'countrySingle'];
var defaultFilterConfig = {
  filters: filters,
  included: highlighted,
  highlighted: highlighted
};

var filterConf = {
  fields: {
    countrySingle: {
      singleValue: true,
      defaultKey: 'country'
    },
    q: {
      singleValue: true
    },
    networkKey: {
      singleValue: true
    }
  }
};
filters.forEach(function (filter) {
  filterConf.fields[filter] = filterConf.fields[filter] || {};
});

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function Search(props) {
  return react.jsx(Search$5, _objectSpread(_objectSpread({}, props), {}, {
    predicateConfig: filterConf,
    defaultFilterConfig: defaultFilterConfig,
    Table: Table
  }));
}

var _excluded$s = ["siteConfig"];

function Wrap$1(_ref) {
  var siteConfig = _ref.siteConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$s);

  return react.jsx(StandaloneWrapper, {
    siteConfig: siteConfig
  }, react.jsx(Standalone$3, _extends__default["default"]({}, props, {
    siteConfig: siteConfig
  })));
}

function Standalone$3(props) {
  var routeContext = React.useContext(RouteContext);
  var path = routeContext.publisherSearch.route;
  return react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: path,
    render: function render(routeProps) {
      var _props$siteConfig;

      return react.jsx(Search, _extends__default["default"]({
        pageLayout: true,
        config: props === null || props === void 0 ? void 0 : (_props$siteConfig = props.siteConfig) === null || _props$siteConfig === void 0 ? void 0 : _props$siteConfig.publisher
      }, props, routeProps));
    }
  }));
}

var _ref$7 = {
  name: "1cy8rru",
  styles: "background:white;padding:24px"
} ;

var paper$3 = function paper(_ref2) {
  _extends__default["default"]({}, _ref2);

  return _ref$7;
};

var _excluded$r = ["data", "loading", "error", "collection", "className"];
var T$6 = Properties.Term,
    V$6 = Properties.Value;
function Description$1(_ref) {
  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data;
      _ref.loading;
      _ref.error;
      var collection = _ref.collection;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$r);

  var theme = React.useContext(ThemeContext);
  var routeContext = React.useContext(RouteContext);
  data.occurrence; // if (loading || !occurrence) return <h1>Loading</h1>;

  return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    css: paper$3({
      theme: theme
    }),
    style: {
      marginTop: 24,
      marginBottom: 24
    }
  }, react.jsx(Properties, {
    style: {
      fontSize: 14,
      marginBottom: 12
    },
    horizontal: true
  }, getPlain$1(collection, 'name'), getPlain$1(collection, 'description'), getPlain$1(collection, 'code'), getPlain$1(collection, 'homePage'), getPlain$1(collection, 'active'), getPlain$1(collection, 'personalCollection'), getPlain$1(collection, 'catalogUrl'), getPlain$1(collection, 'accessionStatus'), getPlain$1(collection, 'institutionName'), getPlain$1(collection, 'institutionCode'), collection.institution && react.jsx(React__default["default"].Fragment, null, react.jsx(T$6, null, react.jsx("span", {
    style: {
      paddingRight: 8
    }
  }, "Institution")), react.jsx(V$6, null, react.jsx("a", {
    href: routeContext.institutionKey.url({
      key: collection.institution.key
    })
  }, collection.institution.name))), getPlain$1(collection, 'notes')), react.jsx(Accordion, {
    summary: "Content",
    defaultOpen: true,
    style: {
      marginBottom: 24
    }
  }, react.jsx(Properties, {
    style: {
      fontSize: 14,
      marginBottom: 12
    },
    horizontal: true
  }, getPlain$1(collection, 'contentTypes'), getPlain$1(collection, 'preservationTypes'), getPlain$1(collection, 'taxonomicCoverage'), getPlain$1(collection, 'geography'), getList$1(collection, 'incorporatedCollections'), getList$1(collection, 'importantCollectors'))), react.jsx(Accordion, {
    summary: "Contact",
    defaultOpen: true,
    style: {
      marginBottom: 24
    }
  }, react.jsx(Properties, {
    style: {
      fontSize: 14,
      marginBottom: 12
    },
    horizontal: true
  }, getPlain$1(collection.address, 'address'), getPlain$1(collection.address, 'country'), getPlain$1(collection.address, 'postalCode')))));
}

function getPlain$1(collection, fieldName) {
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$6, null, react.jsx("span", {
    style: {
      paddingRight: 8
    }
  }, fieldName)), react.jsx(V$6, null, collection !== null && collection !== void 0 && collection[fieldName] ? collection[fieldName] : react.jsx("span", {
    style: {
      color: '#aaa'
    }
  }, "Not provided")));
}

function getList$1(collection, fieldName) {
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$6, null, react.jsx("span", {
    style: {
      paddingRight: 8
    }
  }, fieldName)), collection[fieldName] && collection[fieldName].length > 0 && react.jsx("div", null, collection[fieldName].map(function (item) {
    return react.jsx(V$6, null, item);
  })), !collection[fieldName] || collection[fieldName].length === 0 && react.jsx(V$6, null, react.jsx("span", {
    style: {
      color: '#aaa'
    }
  }, "Not provided")));
}

var _excluded$q = ["theme"];

var _ref10$1 = {
  name: "104q5j8",
  styles: "display:flex;margin:0 12px"
} ;

var people$1 = function people(_ref11) {
  _extends__default["default"]({}, _ref11);

  return _ref10$1;
};

var _ref9 = {
  name: "kv5zkl",
  styles: "padding:8px 12px;line-height:1em;display:block;color:inherit;text-decoration:none;&.isActive{background:#e0e7ee;font-weight:500;}"
} ;

var navItem = function navItem(_ref12) {
  _extends__default["default"]({}, _ref12);

  return _ref9;
};

var _ref8 = {
  name: "8vuc0z",
  styles: "display:flex;margin-bottom:24px;margin-left:0;width:100%;input{margin-right:12px;height:auto;}"
} ;

var search = function search(_ref13) {
  _extends__default["default"]({}, _ref13);

  return _ref8;
};

var _ref7$2 = {
  name: "yjzycu",
  styles: "flex:0 0 280px;padding:24px 12px;margin:0;font-size:14px;ul{list-style:none;padding:0;margin:0;}"
} ;

var nav = function nav(_ref14) {
  _extends__default["default"]({}, _ref14);

  return _ref7$2;
};

var _ref6$3 = {
  name: "1gyac2f",
  styles: "background:#65808a;color:white;padding:12px 24px;border-radius:4px;margin-bottom:12px"
} ;

var info = function info(_ref15) {
  _extends__default["default"]({}, _ref15);

  return _ref6$3;
};

var _ref5$3 = {
  name: "10h7o7i",
  styles: "flex:1 1 100%"
} ;

var staffList$1 = function staffList(_ref16) {
  _extends__default["default"]({}, _ref16);

  return _ref5$3;
};

var _ref4$3 = {
  name: "1fsgsda",
  styles: "margin-bottom:18px;font-size:85%;color:#888"
} ;

var staffPosition$1 = function staffPosition(_ref17) {
  _extends__default["default"]({}, _ref17);

  return _ref4$3;
};
var staffDesc$1 = function staffDesc(_ref18) {
  var theme = _ref18.theme;
      _objectWithoutProperties__default["default"](_ref18, _excluded$q);

  return /*#__PURE__*/react.css("flex:1 1 auto;margin:12px;a{color:", theme.primary500, ";text-decoration:none;}h4{margin:0;font-weight:bold;}" + ("" ), "" );
};

var _ref3$5 = {
  name: "1ssixu",
  styles: "flex:0 0 220px;display:flex;font-size:14px;text-align:right;flex-direction:column;>div{flex:1 1 auto;}background:#f8f8f8;padding:12px"
} ;

var staffContact$1 = function staffContact(_ref19) {
  _extends__default["default"]({}, _ref19);

  return _ref3$5;
};

var _ref$6 = {
  name: "kdj9w5",
  styles: "background:white;margin-bottom:12px;display:flex;flex-wrap:nowrap;border:1px solid #eee"
} ;

var person$1 = function person(_ref21) {
  _extends__default["default"]({}, _ref21);

  return _ref$6;
};

var _excluded$p = ["noData"];

var tab = function tab(_ref5) {
  var noData = _ref5.noData;
      _objectWithoutProperties__default["default"](_ref5, _excluded$p);

  return /*#__PURE__*/react.css("color:", noData ? '#888' : null, ";" + ("" ), "" );
};

var _ref4$2 = {
  name: "13h0mpt",
  styles: "background:#88888847;color:#00000085;padding:2px 5px;font-size:10px;border-radius:4px;margin:0 4px;font-weight:bold"
} ;

var tabCountChip = function tabCountChip(_ref6) {
  _extends__default["default"]({}, _ref6);

  return _ref4$2;
};

var _ref3$4 = {
  name: "6kfe4y",
  styles: "background:white;padding:1rem 1rem 0 1rem;h1{margin-top:0;margin-bottom:.25em;font-size:2rem;font-weight:700;}a{color:#1393D8;}"
} ;

var headerWrapper$2 = function headerWrapper(_ref7) {
  _extends__default["default"]({}, _ref7);

  return _ref3$4;
};

var _ref2$6 = {
  name: "66mye2",
  styles: "margin-top:2.5rem;margin-bottom:1.5rem;>div{margin-bottom:8px;}"
} ;

var summary$2 = function summary(_ref8) {
  _extends__default["default"]({}, _ref8);

  return _ref2$6;
};

var _ref$5 = {
  name: "iswyxu",
  styles: "margin:0 auto;width:1000px;max-width:100%"
} ;

var proseWrapper$2 = function proseWrapper(_ref9) {
  _extends__default["default"]({}, _ref9);

  return _ref$5;
};

var CollectorsPresentation = function CollectorsPresentation(_ref) {
  var size = _ref.size,
      search$1 = _ref.search,
      loadMore = _ref.loadMore,
      loading = _ref.loading,
      data = _ref.data;
      _ref.error;
  var routeContext = React.useContext(RouteContext);
  var history = reactRouterDom.useHistory();
  var url = routeContext.collectionSpecimens.url({
    key: '42844cb6-421e-4bcf-bdeb-c56039bee08c'
  });
  console.log(url);

  var _useState = React.useState(''),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      q = _useState2[0],
      setQ = _useState2[1];

  var theme = React.useContext(ThemeContext);
  if (loading && !data) return react.jsx("div", null, "loading");
  var items = data.occurrenceSearch.facet.recordedBy.map(function (x) {
    return {
      key: x.key,
      name: x.key,
      collected: x.count,
      identified: x.occurrencesIdentifiedBy.documents.total
    };
  });
  var hasNoResults = q.length > 0 && items.length === 0 && !loading;
  var columns = ['name', 'collected', 'identified'];
  var headerss = [react.jsx(Th, {
    key: "name"
  }, react.jsx(Tooltip, {
    title: react.jsx("div", null, "Strings as they appear in dwcA 'recordedBy'.")
  }, react.jsx("div", null, "Collected by ", react.jsx(md.MdHelp, null)))), react.jsx(Th, {
    key: "collected",
    style: {
      textAlign: 'right'
    }
  }, "Records collected"), react.jsx(Th, {
    key: "identifed",
    style: {
      textAlign: 'right'
    }
  }, "Records identified")];
  return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    style: {
      flex: "1 1 100%"
    }
  }, react.jsx("div", null, react.jsx("div", {
    css: info({
      theme: theme
    })
  }, react.jsx(md.MdHelp, null))), react.jsx("div", {
    css: info({
      theme: theme
    })
  }, "These are the strings as they appear on the digitized records in the field \"recordedBy\". That means that one row can represent multiple people and that the same person can appear under multiple spellings. The names are ordered by number of records collected."), react.jsx("div", {
    css: search
  }, react.jsx(Input, {
    value: q,
    onChange: function onChange(e) {
      return setQ(e.target.value);
    }
  }), react.jsx(Button, {
    onClick: function onClick(e) {
      return search$1(q);
    }
  }, "Search")), hasNoResults && react.jsx("div", null, "No results for '", q, "'"), !hasNoResults && react.jsx(React__default["default"].Fragment, null, react.jsx(DataTable, {
    loading: loading
  }, react.jsx("thead", null, react.jsx("tr", null, headerss)), react.jsx(TBody, {
    rowCount: 10,
    columnCount: 7,
    loading: loading
  }, getRows({
    items: items,
    columns: columns,
    url: url,
    history: history
  }))), (loading || size === items.length) && react.jsx(Button, {
    loading: loading,
    style: {
      marginTop: 12
    },
    onClick: loadMore
  }, "Load more"))));
};

var getRows = function getRows(_ref2) {
  var items = _ref2.items,
      history = _ref2.history;
  var rows = items.map(function (row, index) {
    var searchLink = encodeURIComponent(btoa(JSON.stringify({
      must: {
        recordedBy: [row.name]
      }
    })));
    var cells = [react.jsx(Td, {
      key: "name"
    }, row.name), react.jsx(Td, {
      key: "collected",
      style: {
        textAlign: 'right'
      }
    }, react.jsx("a", {
      onClick: function onClick() {
        return history.push("../../specimens?filter=".concat(searchLink));
      }
    }, react.jsx(reactIntl.FormattedNumber, {
      value: row.collected
    }))), react.jsx(Td, {
      key: "identified",
      style: {
        textAlign: 'right'
      }
    }, react.jsx(reactIntl.FormattedNumber, {
      value: row.identified
    }))];
    return react.jsx("tr", {
      key: row.key
    }, cells);
  });
  return rows;
};

var _excluded$o = ["id", "defaultTab"];
function Collectors(_ref) {
  var id = _ref.id;
      _ref.defaultTab;
      _objectWithoutProperties__default["default"](_ref, _excluded$o);

  var _useQuery = useQuery(COLLECTORS, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var _useState = React.useState(10),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];

  var _useState3 = React.useState(),
      _useState4 = _slicedToArray__default["default"](_useState3, 2),
      q = _useState4[0],
      setQ = _useState4[1];

  React.useEffect(function () {
    if (typeof id !== 'undefined') {
      var predicates = [{
        "type": "equals",
        "key": "collectionKey",
        "value": id
      }];

      if (q && q !== '') {
        predicates.push({
          "type": "like",
          "key": "recordedBy",
          "value": "*".concat(q, "*")
        });
      }

      load({
        keepDataWhileLoading: true,
        variables: {
          key: id,
          size: size,
          predicate: {
            "type": "and",
            predicates: predicates
          }
        }
      });
    }
  }, [id, size, q]);
  var loadMore = React.useCallback(function () {
    setSize(size + 50);
  }, [size]);
  var search = React.useCallback(function (q) {
    setSize(10);
    setQ(q);
  }, []);
  return react.jsx(CollectorsPresentation, {
    loadMore: loadMore,
    size: size,
    search: search,
    data: data,
    error: error,
    loading: loading || !data,
    id: id
  });
}
var COLLECTORS = "\nquery collectors($predicate: Predicate, $size: Int){\n  occurrenceSearch(predicate: $predicate) {\n    facet {\n      recordedBy(size: $size) {\n        key\n        count\n        occurrencesIdentifiedBy {\n          documents {\n            total\n          }\n        }\n      }\n    }\n  }\n}\n";

var baseEach = _baseEach,
    isArrayLike = isArrayLike_1;

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap$1(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

var _baseMap = baseMap$1;

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */

function baseSortBy$1(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

var _baseSortBy = baseSortBy$1;

var isSymbol = isSymbol_1;

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending$1(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive) {
      return 1;
    }
    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

var _compareAscending = compareAscending$1;

var compareAscending = _compareAscending;

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple$1(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

var _compareMultiple = compareMultiple$1;

var arrayMap = _arrayMap,
    baseGet = _baseGet,
    baseIteratee = _baseIteratee,
    baseMap = _baseMap,
    baseSortBy = _baseSortBy,
    baseUnary = _baseUnary,
    compareMultiple = _compareMultiple,
    identity = identity_1,
    isArray = isArray_1;

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy$1(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap(iteratees, function(iteratee) {
      if (isArray(iteratee)) {
        return function(value) {
          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        }
      }
      return iteratee;
    });
  } else {
    iteratees = [identity];
  }

  var index = -1;
  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) {
    var criteria = arrayMap(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}

var _baseOrderBy = baseOrderBy$1;

var baseFlatten = _baseFlatten,
    baseOrderBy = _baseOrderBy,
    baseRest = _baseRest,
    isIterateeCall = _isIterateeCall;

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */
var sortBy = baseRest(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});

var sortBy_1 = sortBy;

var _excluded$n = ["collection", "recordedByCardinality", "className"];
function People$1(_ref) {
  var _collection$contacts, _collection$contacts2;

  var collection = _ref.collection,
      recordedByCardinality = _ref.recordedByCardinality;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$n);

  var _useRouteMatch = reactRouterDom.useRouteMatch(),
      url = _useRouteMatch.url,
      path = _useRouteMatch.path;

  var theme = React.useContext(ThemeContext);
  return react.jsx("div", {
    css: people$1({
      theme: theme
    })
  }, react.jsx("nav", {
    css: nav({
      theme: theme
    })
  }, react.jsx("ul", null, react.jsx("li", null, react.jsx(reactRouterDom.NavLink, {
    to: url,
    exact: true,
    activeClassName: "isActive",
    css: navItem({
      theme: theme
    })
  }, "Staff", react.jsx("span", {
    css: tabCountChip()
  }, (_collection$contacts = collection.contacts) === null || _collection$contacts === void 0 ? void 0 : _collection$contacts.length))), react.jsx("li", null, react.jsx(reactRouterDom.NavLink, {
    to: join(url, '/agents'),
    activeClassName: "isActive",
    css: navItem({
      theme: theme
    })
  }, "Collectors and identifiers", react.jsx("span", {
    css: tabCountChip()
  }, recordedByCardinality))))), react.jsx("div", {
    style: {
      width: '100%',
      margin: 24
    }
  }, react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: join(path, '/agents')
  }, react.jsx(Collectors, {
    id: collection.key
  })), react.jsx(reactRouterDom.Route, {
    path: path
  }, (collection === null || collection === void 0 ? void 0 : (_collection$contacts2 = collection.contacts) === null || _collection$contacts2 === void 0 ? void 0 : _collection$contacts2.length) === 0 && react.jsx("div", null, "There is no staff associated with this record. You can change that. ", react.jsx("a", {
    herf: ""
  }, "Learn more")), react.jsx("div", {
    css: staffList$1({
      theme: theme
    })
  }, sortBy_1(collection.contacts, 'position').map(function (contact) {
    return react.jsx("article", {
      css: person$1({
        theme: theme
      })
    }, react.jsx("div", {
      css: staffDesc$1({
        theme: theme
      })
    }, react.jsx("a", {
      href: "staff/".concat(contact.key)
    }, react.jsx("h4", null, contact.firstName, " ", contact.lastName)), react.jsx("div", {
      css: staffPosition$1({
        theme: theme
      })
    }, contact.position), contact.researchPursuits && react.jsx("div", null, "Research pursuits: ", contact.researchPursuits)), react.jsx("div", {
      css: staffContact$1({
        theme: theme
      })
    }, react.jsx("div", null, contact.email && react.jsx("div", null, contact.email), contact.phone && react.jsx("div", null, contact.phone), contact.fax && react.jsx("div", null, contact.fax))));
  }))))));
}

var _excluded$m = ["id", "data", "error", "loading"];
var TabList$2 = Tabs.TabList,
    RouterTab$2 = Tabs.RouterTab;
function CollectionPresentation(_ref) {
  var _occurrenceSearch$car, _collection$contacts, _occurrenceSearch$doc;

  var id = _ref.id,
      data = _ref.data,
      error = _ref.error,
      loading = _ref.loading;
      _objectWithoutProperties__default["default"](_ref, _excluded$m);

  var _useRouteMatch = reactRouterDom.useRouteMatch(),
      url = _useRouteMatch.url,
      path = _useRouteMatch.path;

  var theme = React.useContext(ThemeContext);
  if (loading) return react.jsx("div", null, "loading");
  var collection = data.collection,
      occurrenceSearch = data.occurrenceSearch;
  var recordedByCardinality = occurrenceSearch === null || occurrenceSearch === void 0 ? void 0 : (_occurrenceSearch$car = occurrenceSearch.cardinality) === null || _occurrenceSearch$car === void 0 ? void 0 : _occurrenceSearch$car.recordedBy;

  if (error || !collection) {
    // TODO a generic component for failures is needed
    return react.jsx("div", null, "Failed to retrieve item");
  }

  var rootPredicate = {
    "type": "equals",
    "value": id,
    "key": "collectionKey"
  };
  var config = {
    rootPredicate: rootPredicate,
    excludedFilters: ['collectionCode', 'collectionKey', 'institutionKey', 'institutionCode', 'hostingOrganizationKey', 'protocol', 'publishingCountryCode'],
    occurrenceSearchTabs: ['TABLE', 'GALLERY', 'MAP'],
    highlightedFilters: ['taxonKey', 'verbatimScientificName', 'catalogNumber', 'recordedBy', 'identifiedBy', 'typeStatus']
  };
  var hasNoPeople = !(collection !== null && collection !== void 0 && (_collection$contacts = collection.contacts) !== null && _collection$contacts !== void 0 && _collection$contacts.length) && !recordedByCardinality;
  return react.jsx(React__default["default"].Fragment, null, react.jsx(DataHeader, {
    style: {
      borderBottom: '1px solid #ddd',
      background: 'white'
    },
    left: react.jsx(ResourceSearchLink, {
      type: "collectionSearch",
      discreet: true,
      style: {
        display: 'flex',
        alignItems: 'center'
      }
    }, react.jsx(md.MdChevronLeft, null), " ", react.jsx(reactIntl.FormattedMessage, {
      id: "catalogues.collections"
    }))
  }), react.jsx("div", {
    css: headerWrapper$2({
      theme: theme
    })
  }, react.jsx("div", {
    css: proseWrapper$2({
      theme: theme
    })
  }, react.jsx(Eyebrow, {
    prefix: "Collection code",
    suffix: collection.code
  }), react.jsx("h1", null, collection.name), collection.institution && react.jsx("div", null, "From ", react.jsx("a", {
    href: "/institution/".concat(collection.institution.key)
  }, collection.institution.name)), react.jsx("div", {
    css: summary$2
  }, occurrenceSearch.documents.total > 0 && react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(md.MdLocationOn, null), react.jsx("span", null, react.jsx(reactIntl.FormattedNumber, {
    value: occurrenceSearch.documents.total
  }), " digitized specimens")), collection.taxonomicCoverage && react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(md.MdStar, null), react.jsx("span", null, collection.taxonomicCoverage)), collection.contacts.length > 0 && react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(md.MdPeople, null), collection.contacts.length < 5 && react.jsx("span", null, collection.contacts.map(function (c) {
    return "".concat(c.firstName ? c.firstName : '', " ").concat(c.lastName ? c.lastName : '');
  }).join(' • ')), collection.contacts.length >= 5 && react.jsx("span", null, collection.contacts.length, " staff members"))), react.jsx(TabList$2, {
    style: {
      marginTop: '12px',
      borderTop: '1px solid #ddd'
    }
  }, react.jsx(RouterTab$2, {
    to: url,
    exact: true,
    label: "About"
  }), react.jsx(RouterTab$2, {
    to: join(url, 'people'),
    css: tab({
      theme: theme,
      noData: hasNoPeople
    }),
    label: "People"
  }), react.jsx(RouterTab$2, {
    to: join(url, 'specimens'),
    css: tab({
      theme: theme,
      noData: (occurrenceSearch === null || occurrenceSearch === void 0 ? void 0 : (_occurrenceSearch$doc = occurrenceSearch.documents) === null || _occurrenceSearch$doc === void 0 ? void 0 : _occurrenceSearch$doc.total) === 0
    }),
    label: "Digitized specimens"
  })))), react.jsx("section", null, react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: join(path, 'people')
  }, react.jsx("div", {
    css: proseWrapper$2({
      theme: theme
    })
  }, react.jsx(People$1, {
    collection: collection,
    recordedByCardinality: recordedByCardinality
  }))), react.jsx(reactRouterDom.Route, {
    path: join(path, 'specimens')
  }, react.jsx(OccurrenceSearch, {
    config: config,
    style: {
      margin: 'auto',
      maxWidth: 1000,
      minHeight: 'calc(90vh)'
    }
  }), ";"), react.jsx(reactRouterDom.Route, {
    path: path
  }, react.jsx("div", {
    css: proseWrapper$2({
      theme: theme
    })
  }, react.jsx(Description$1, {
    collection: collection
  }))))));
}

function EnsureRouter$2(_ref) {
  var children = _ref.children;
  var hasRouter;

  try {
    var forTestOnly = reactRouterDom.useRouteMatch();
    hasRouter = true;
  } catch (err) {
    console.log('No router context found, so creating a MemoryRouter for the component');
    hasRouter = false;
  }

  return hasRouter ? react.jsx(React__default["default"].Fragment, null, children) : react.jsx(reactRouterDom.MemoryRouter, {
    initialEntries: ['/']
  }, children);
}

var _excluded$l = ["id"];
function Collection(_ref) {
  var id = _ref.id;
      _objectWithoutProperties__default["default"](_ref, _excluded$l);

  var _useQuery = useQuery(COLLECTION, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  React.useContext(ThemeContext);
  React.useEffect(function () {
    if (typeof id !== 'undefined') {
      load({
        variables: {
          key: id,
          predicate: {
            type: "equals",
            key: "collectionKey",
            value: id
          }
        }
      });
    }
  }, [id]);
  return react.jsx(EnsureRouter$2, null, react.jsx(CollectionPresentation, {
    data: data,
    error: error,
    loading: loading || !data,
    id: id
  }));
}
var COLLECTION = "\nquery collection($key: String!, $predicate: Predicate){\n  occurrenceSearch(predicate: $predicate) {\n    documents(size: 0) {\n      total\n    }\n    cardinality {\n      recordedBy\n    }\n  }\n  collection(key: $key) {\n    key\n    code\n    name\n    description\n    contentTypes\n    active\n    personalCollection\n    email\n    phone\n    homepage\n    catalogUrl\n    preservationTypes\n    accessionStatus\n    institutionKey\n    notes\n    identifiers {\n      key\n      type\n      identifier\n    }\n    contacts {\n      key\n      firstName\n      lastName\n      position\n      areaResponsibility\n      researchPursuits\n      phone\n      email\n      fax\n    }\n    numberSpecimens\n    taxonomicCoverage\n    geography\n    incorporatedCollections\n    importantCollectors\n    collectionSummary\n    alternativeCodes {\n      code\n      description\n    }\n    # occurrenceMappings\n    institution {\n      code\n      name\n      key\n    }\n    \n    mailingAddress {\n      address\n      city\n      province\n      postalCode\n      country\n    }\n    address {\n      address\n      city\n      province\n      postalCode\n      country\n    }\n  }\n}\n";

function Standalone$2(props) {
  var routeContext = React.useContext(RouteContext);
  var path = routeContext.collectionKey.route;
  return react.jsx(StandaloneWrapper, props, react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: path,
    render: function render(routeProps) {
      return react.jsx(Collection, _extends__default["default"]({
        id: routeProps.match.params.key
      }, props, routeProps));
    }
  })));
}

var _ref$4 = {
  name: "1cy8rru",
  styles: "background:white;padding:24px"
} ;

var paper$2 = function paper(_ref2) {
  _extends__default["default"]({}, _ref2);

  return _ref$4;
};

var _excluded$k = ["data", "loading", "error", "institution", "className"];
var T$5 = Properties.Term,
    V$5 = Properties.Value;
function Description(_ref) {
  _ref.data;
      _ref.loading;
      _ref.error;
      var institution = _ref.institution;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$k);

  var theme = React.useContext(ThemeContext);
  console.log(institution);
  return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    css: paper$2({
      theme: theme
    }),
    style: {
      marginTop: 24,
      marginBottom: 24
    }
  }, react.jsx(Properties, {
    style: {
      fontSize: 14,
      marginBottom: 12
    },
    horizontal: true
  }, getPlain(institution, 'name'), getPlain(institution, 'description'), getPlain(institution, 'code'), getPlain(institution, 'alternativeCodes'), getPlain(institution, 'type'), getPlain(institution, 'active'), getPlain(institution, 'homepage'), getPlain(institution, 'phone'), getPlain(institution, 'email'), getPlain(institution, 'catalogUrl'), getPlain(institution, 'apiUrl'), getPlain(institution, 'institutionalGovernance'), getPlain(institution, 'disciplines'), getPlain(institution, 'latitude'), getPlain(institution, 'longitude'), getPlain(institution, 'additionalNames'), getPlain(institution, 'foundingDate'), getPlain(institution, 'geographicDescription'), getPlain(institution, 'taxonomicDescription'), getPlain(institution, 'numberSpecimens'), getPlain(institution, 'herbariumRecord'), getPlain(institution, 'logoUrl')), react.jsx(Accordion, {
    summary: "Content",
    defaultOpen: true,
    style: {
      marginBottom: 24
    }
  }, react.jsx(Properties, {
    style: {
      fontSize: 14,
      marginBottom: 12
    },
    horizontal: true
  }, getPlain(institution, 'contentTypes'), getPlain(institution, 'preservationTypes'), getPlain(institution, 'taxonomicCoverage'), getPlain(institution, 'geography'), getList(institution, 'incorporatedCollections'), getList(institution, 'importantCollectors'))), react.jsx(Accordion, {
    summary: "Contact",
    defaultOpen: true,
    style: {
      marginBottom: 24
    }
  }, react.jsx(Properties, {
    style: {
      fontSize: 14,
      marginBottom: 12
    },
    horizontal: true
  }, getPlain(institution.address, 'address'), getPlain(institution.address, 'country'), getPlain(institution.address, 'postalCode')))));
}

function getPlain(institution, fieldName) {
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$5, null, react.jsx("span", {
    style: {
      paddingRight: 8
    }
  }, fieldName)), react.jsx(V$5, null, typeof (institution === null || institution === void 0 ? void 0 : institution[fieldName]) !== 'undefined' && typeof (institution === null || institution === void 0 ? void 0 : institution[fieldName]) !== 'null' ? institution[fieldName] : react.jsx("span", {
    style: {
      color: '#aaa'
    }
  }, "Not provided")));
}

function getList(institution, fieldName) {
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$5, null, react.jsx("span", {
    style: {
      paddingRight: 8
    }
  }, fieldName)), institution[fieldName] && institution[fieldName].length > 0 && react.jsx("div", null, institution[fieldName].map(function (item) {
    return react.jsx(V$5, null, item);
  })), !institution[fieldName] || institution[fieldName].length === 0 && react.jsx(V$5, null, react.jsx("span", {
    style: {
      color: '#aaa'
    }
  }, "Not provided")));
}

var _ref10 = {
  name: "104q5j8",
  styles: "display:flex;margin:0 12px"
} ;

var people = function people(_ref11) {
  _extends__default["default"]({}, _ref11);

  return _ref10;
};

var _ref6$2 = {
  name: "10h7o7i",
  styles: "flex:1 1 100%"
} ;

var staffList = function staffList(_ref15) {
  _extends__default["default"]({}, _ref15);

  return _ref6$2;
};

var _ref5$2 = {
  name: "1fsgsda",
  styles: "margin-bottom:18px;font-size:85%;color:#888"
} ;

var staffPosition = function staffPosition(_ref16) {
  _extends__default["default"]({}, _ref16);

  return _ref5$2;
};

var _ref4$1 = {
  name: "1vvtxux",
  styles: "flex:1 1 auto;margin:12px;h4{margin:0;}"
} ;

var staffDesc = function staffDesc(_ref17) {
  _extends__default["default"]({}, _ref17);

  return _ref4$1;
};

var _ref3$3 = {
  name: "1pvn578",
  styles: "flex:0 0 220px;display:flex;text-align:center;flex-direction:column;>div{flex:1 1 auto;}background:#eee;padding:12px"
} ;

var staffContact = function staffContact(_ref18) {
  _extends__default["default"]({}, _ref18);

  return _ref3$3;
};

var _ref2$5 = {
  name: "172dxbw",
  styles: "margin:12px;flex:0 0 auto"
} ;

var staffImage = function staffImage(_ref19) {
  _extends__default["default"]({}, _ref19);

  return _ref2$5;
};

var _ref$3 = {
  name: "n2p14l",
  styles: "background:white;margin:12px;display:flex;flex-wrap:nowrap;border:1px solid #eee"
} ;

var person = function person(_ref20) {
  _extends__default["default"]({}, _ref20);

  return _ref$3;
};

var _excluded$j = ["institution", "className"];
function People(_ref) {
  var institution = _ref.institution;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$j);

  var _useRouteMatch = reactRouterDom.useRouteMatch();
      _useRouteMatch.path;

  var theme = React.useContext(ThemeContext);
  return react.jsx("div", {
    css: people({
      theme: theme
    })
  }, react.jsx("div", {
    style: {
      width: '100%',
      marginBottom: 24
    }
  }, react.jsx("div", {
    css: staffList({
      theme: theme
    })
  }, sortBy_1(institution.contacts, 'position').map(function (contact) {
    return react.jsx("article", {
      css: person({
        theme: theme
      })
    }, react.jsx("div", {
      css: staffImage({
        theme: theme
      })
    }, react.jsx(JazzIcon, {
      seed: contact.email || contact.key
    })), react.jsx("div", {
      css: staffDesc({
        theme: theme
      })
    }, react.jsx("h4", null, contact.firstName, " ", contact.lastName), react.jsx("div", {
      css: staffPosition({
        theme: theme
      })
    }, contact.position), contact.researchPursuits && react.jsx("div", null, "Research pursuits: ", contact.researchPursuits)), react.jsx("div", {
      css: staffContact({
        theme: theme
      })
    }, react.jsx("div", null, contact.email && react.jsx("div", null, contact.email), contact.phone && react.jsx("div", null, contact.phone), contact.fax && react.jsx("div", null, contact.fax)), react.jsx(Button, {
      as: "a",
      href: "/staff/123"
    }, "See profile")));
  }))));
}

var _ref3$2 = {
  name: "6kfe4y",
  styles: "background:white;padding:1rem 1rem 0 1rem;h1{margin-top:0;margin-bottom:.25em;font-size:2rem;font-weight:700;}a{color:#1393D8;}"
} ;

var headerWrapper$1 = function headerWrapper(_ref4) {
  _extends__default["default"]({}, _ref4);

  return _ref3$2;
};

var _ref2$4 = {
  name: "66mye2",
  styles: "margin-top:2.5rem;margin-bottom:1.5rem;>div{margin-bottom:8px;}"
} ;

var summary$1 = function summary(_ref5) {
  _extends__default["default"]({}, _ref5);

  return _ref2$4;
};

var _ref$2 = {
  name: "iswyxu",
  styles: "margin:0 auto;width:1000px;max-width:100%"
} ;

var proseWrapper$1 = function proseWrapper(_ref6) {
  _extends__default["default"]({}, _ref6);

  return _ref$2;
};

var _excluded$i = ["id", "data", "error", "loading"];
var TabList$1 = Tabs.TabList,
    RouterTab$1 = Tabs.RouterTab;
function InstitutionPresentation(_ref) {
  var id = _ref.id,
      data = _ref.data,
      error = _ref.error,
      loading = _ref.loading;
      _objectWithoutProperties__default["default"](_ref, _excluded$i);

  var _useRouteMatch = reactRouterDom.useRouteMatch(),
      path = _useRouteMatch.path,
      url = _useRouteMatch.url;

  var theme = React.useContext(ThemeContext);
  if (loading) return react.jsx("div", null, "loading");
  var institution = data.institution,
      occurrenceSearch = data.occurrenceSearch;

  if (error || !institution) {
    // TODO a generic component for failures is needed
    return react.jsx("div", null, "Failed to retrieve item");
  }

  var rootPredicate = {
    "type": "equals",
    "value": id,
    "key": "institutionKey"
  };
  var config = {
    rootPredicate: rootPredicate,
    excludedFilters: ['institutionCode', 'institutionKey', 'institutionKey', 'institutionCode', 'hostingOrganizationKey', 'protocol', 'publishingCountryCode'],
    occurrenceSearchTabs: ['TABLE', 'GALLERY', 'MAP'],
    highlightedFilters: ['taxonKey', 'catalogNumber', 'recordedBy', 'identifiedBy', 'typeStatus']
  }; // console.log(data);

  return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    css: headerWrapper$1({
      theme: theme
    })
  }, react.jsx("div", {
    css: proseWrapper$1({
      theme: theme
    })
  }, react.jsx(Eyebrow, {
    prefix: "Institution code",
    suffix: institution.code
  }), react.jsx("h1", null, institution.name), react.jsx("div", {
    css: summary$1
  }, react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(md.MdLocationOn, null), react.jsx("span", null, react.jsx(reactIntl.FormattedNumber, {
    value: occurrenceSearch.documents.total
  }), " specimens")), institution.contacts.length > 0 && react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(md.MdPeople, null), institution.contacts.length < 5 && react.jsx("span", null, institution.contacts.map(function (c) {
    return "".concat(c.firstName ? c.firstName : '', " ").concat(c.lastName ? c.lastName : '');
  }).join(' • ')), institution.contacts.length >= 5 && react.jsx("span", null, institution.contacts.length, " staff members"))), react.jsx(TabList$1, {
    style: {
      marginTop: '12px',
      borderTop: '1px solid #ddd'
    }
  }, react.jsx(RouterTab$1, {
    to: url,
    exact: true,
    label: "About"
  }), react.jsx(RouterTab$1, {
    to: join(url, '/people'),
    label: "People"
  }), react.jsx(RouterTab$1, {
    to: join(url, '/specimens'),
    label: "Digitized specimens"
  })))), react.jsx("section", null, react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: join(path, '/people')
  }, react.jsx("div", {
    css: proseWrapper$1({
      theme: theme
    })
  }, react.jsx(People, {
    institution: institution
  }))), react.jsx(reactRouterDom.Route, {
    path: join(path, '/specimens')
  }, react.jsx(OccurrenceSearch, {
    config: config,
    style: {
      margin: 'auto',
      maxWidth: 1000,
      minHeight: 'calc(90vh)'
    }
  }), ";"), react.jsx(reactRouterDom.Route, {
    path: path
  }, react.jsx("div", {
    css: proseWrapper$1({
      theme: theme
    })
  }, react.jsx(Description, {
    institution: institution
  }))))));
}

var _excluded$h = ["id"];

function EnsureRouter$1(_ref) {
  var children = _ref.children;
  var hasRouter;

  try {
    var forTestOnly = reactRouterDom.useRouteMatch();
    hasRouter = true;
  } catch (err) {
    console.log('No router context found, so creating a MemoryRouter for the component');
    hasRouter = false;
  }

  return hasRouter ? react.jsx(React__default["default"].Fragment, null, children) : react.jsx(reactRouterDom.MemoryRouter, {
    initialEntries: ['/']
  }, children);
}

function Institution(_ref2) {
  var id = _ref2.id;
      _objectWithoutProperties__default["default"](_ref2, _excluded$h);

  var _useQuery = useQuery(INSTITUTION, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  React.useContext(ThemeContext);
  React.useEffect(function () {
    if (typeof id !== 'undefined') {
      load({
        variables: {
          key: id,
          predicate: {
            type: "equals",
            key: "institutionKey",
            value: id
          }
        }
      });
    }
  }, [id]);
  return react.jsx(EnsureRouter$1, null, react.jsx(InstitutionPresentation, {
    data: data,
    error: error,
    loading: loading || !data,
    id: id
  }));
}
var INSTITUTION = "\nquery institution($key: String!, $predicate: Predicate){\n  occurrenceSearch(predicate: $predicate) {\n    documents(size: 0) {\n      total\n    }\n    cardinality {\n      recordedBy\n    }\n  }\n  institution(key: $key) {\n    key\n    code\n    name\n    description\n    active\n    email\n    phone\n    homepage\n    catalogUrl\n    alternativeCodes {\n      code\n      description\n    }\n    type\n    apiUrl\n    institutionalGovernance\n    disciplines\n    latitude\n    longitude\n    additionalNames\n    foundingDate\n    geographicDescription\n    taxonomicDescription\n    numberSpecimens\n    indexHerbariorumRecord\n    logoUrl\n\n    identifiers {\n      identifier\n    }\n    contacts {\n      key\n      firstName\n      lastName\n      position\n      areaResponsibility\n      researchPursuits\n      phone\n      email\n      fax\n    }\n    numberSpecimens\n    \n    mailingAddress {\n      address\n      city\n      province\n      postalCode\n      country\n    }\n    address {\n      address\n      city\n      province\n      postalCode\n      country\n    }\n  }\n}\n";

function Standalone$1(props) {
  var routeContext = React.useContext(RouteContext);
  var path = routeContext.institutionKey.route;
  return react.jsx(StandaloneWrapper, props, react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: path,
    render: function render(routeProps) {
      return react.jsx(Institution, _extends__default["default"]({
        id: routeProps.match.params.key
      }, props, routeProps));
    }
  })));
}

var _ref7$1 = {
  name: "16h4zzf",
  styles: "background:white;padding:24px 48px;margin:12px 0"
} ;

var paper$1 = function paper(_ref8) {
  _extends__default["default"]({}, _ref8);

  return _ref7$1;
};

var _ref6$1 = {
  name: "zjik7",
  styles: "display:flex"
} ;

var withSideBar$1 = function withSideBar(_ref9) {
  _extends__default["default"]({}, _ref9);

  return _ref6$1;
};

var _ref5$1 = {
  name: "154ddyn",
  styles: "background:white;margin-bottom:12px;border-radius:4px;overflow:hidden;padding:4px;ul{list-style:none;padding:0;margin:0;}"
} ;

var sideBarNav$1 = function sideBarNav(_ref10) {
  _extends__default["default"]({}, _ref10);

  return _ref5$1;
};

var _ref4 = {
  name: "69vnwp",
  styles: "color:#888;margin-left:4px"
} ;

var coverageItem_common = function coverageItem_common(_ref11) {
  _extends__default["default"]({}, _ref11);

  return _ref4;
};

var _ref3$1 = {
  name: "ikop4y",
  styles: "margin:3px;padding:1px 3px;border:1px solid #ddd;display:inline-block;background:#efefef"
} ;

var coverageItem = function coverageItem(_ref12) {
  _extends__default["default"]({}, _ref12);

  return _ref3$1;
};

var _ref2$3 = {
  name: "v80hby",
  styles: "flex:0 0 250px;padding-top:12px;margin:0;font-size:14px;position:sticky;top:0;align-self:flex-start;height:100%"
} ;

var sideBar$1 = function sideBar(_ref13) {
  _extends__default["default"]({}, _ref13);

  return _ref2$3;
};
var area = {
  name: "1xbk6p4",
  styles: "background:white;border-radius:4px;margin-bottom:8px;margin-right:12px"
} ;
var testcard = {
  name: "6u75bj",
  styles: "padding:12px;display:flex"
} ;
var testicon = {
  name: "qggz2r",
  styles: "flex:0 0 auto;div{padding:8px 0;text-align:center;background:var(--primary500);color:white;font-weight:900;border-radius:50%;width:25px;height:25px;line-height:25px;padding:0;text-align:center;padding-top:2px;}"
} ;
var progress = {
  name: "r1qpl1",
  styles: "height:4px;border-radius:2px;background:#ddd;>div{background:var(--primary500);height:4px;border-radius:2px;}margin-bottom:12px"
} ;
var testcardWrapper = {
  name: "1a7qdqi",
  styles: "img{width:100%;border-radius:4px 4px 0 0;}"
} ;
var testcontent = {
  name: "1gtkkjd",
  styles: "padding-left:12px;flex:1 1 auto;a{color:inherit;text-decoration:none;}h5{font-size:13px;margin:0;}p{font-size:13px;color:#888;margin:0;margin-top:8px;}"
} ;
var galleryHeight = '300';
var galleryBar = /*#__PURE__*/react.css("height:", galleryHeight, "px;overflow:hidden;position:relative;margin:0 -6px;>a{position:absolute;margin:12px;bottom:0;right:0;}>div{display:flex;overflow-x:auto;height:", galleryHeight + 100, "px;padding-bottom:100px;>div{margin-right:10px;flex:0 0 auto;height:", galleryHeight, "px;}}img{display:block;height:", galleryHeight, "px;margin:0 6px;}" + ("" ), "" );

var _excluded$g = ["bibliographicCitations"];
Properties.Term;
    Properties.Value;
function BibliographicCitations(_ref) {
  var _ref$bibliographicCit = _ref.bibliographicCitations,
      bibliographicCitations = _ref$bibliographicCit === void 0 ? [] : _ref$bibliographicCit;
      _objectWithoutProperties__default["default"](_ref, _excluded$g);

  // I really dislike "show all"-buttons that only show me one more item. Just show the damn item to begin with then. It is such a disappointing experience.
  // So instead we do: if less than 10 items then show them all. If above 10, then show 5 + expand button.
  // then it feels like you are rewarded for your action
  var _useState = React.useState(5),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      threshold = _useState2[0],
      setThreshold = _useState2[1];

  var citations = bibliographicCitations.length < 10 ? bibliographicCitations : bibliographicCitations.slice(0, threshold);
  var hasHidden = bibliographicCitations.length > citations.length;
  return react.jsx(React__default["default"].Fragment, null, react.jsx("ul", null, citations.map(function (x, index) {
    return react.jsx(BibiliographicCitation, {
      key: index,
      citation: x
    });
  })), hasHidden && react.jsx(Button, {
    onClick: function onClick() {
      return setThreshold(500);
    }
  }, "Show all"));
}

function BibiliographicCitation(_ref2) {
  var citation = _ref2.citation;
  var pattern = /^http(s)?:\/\/.+/;
  var match = citation.identifier ? citation.identifier.match(pattern) : null;
  return react.jsx("li", null, citation.text && react.jsx("div", null, react.jsx(HyperText, {
    text: citation.text
  })), citation.identifier && match && react.jsx("a", {
    href: citation.identifier
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.viewArticle"
  })), citation.identifier && !match && react.jsx(React__default["default"].Fragment, null, react.jsx("span", {
    style: {
      color: '#888'
    }
  }, "Identifier: "), react.jsx("span", null, citation.identifier)));
}

var _excluded$f = ["data", "loading", "error"];
Properties.Term;
    Properties.Value;
function Citation(_ref) {
  var _dataset$citation;

  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data;
      _ref.loading;
      _ref.error;
      _objectWithoutProperties__default["default"](_ref, _excluded$f);

  var dataset = data.dataset;
  var doi = dataset.doi;
  return dataset !== null && dataset !== void 0 && (_dataset$citation = dataset.citation) !== null && _dataset$citation !== void 0 && _dataset$citation.text ? react.jsx(React__default["default"].Fragment, null, react.jsx(HyperText, {
    text: dataset.citation.text
  }), doi && react.jsx("div", {
    style: {
      marginTop: '1em'
    }
  }, react.jsx(Button, {
    as: "a",
    href: "https://data.crosscite.org/application/x-research-info-systems/".concat(doi),
    look: "primaryOutline",
    style: {
      marginRight: '1em'
    }
  }, "RIS"), react.jsx(Button, {
    as: "a",
    href: "https://data.crosscite.org/application/x-bibtex/".concat(doi),
    look: "primaryOutline"
  }, "BibTex"))) : null;
}

Properties.Term;
    Properties.Value;

Properties.Term;
    Properties.Value;

Properties.Term;
    Properties.Value;

var _excluded$e = ["dataset"];
var T$4 = Properties.Term,
    V$4 = Properties.Value;
function SamplingDescription(_ref) {
  var _dataset$samplingDesc, _dataset$samplingDesc2, _dataset$samplingDesc3, _dataset$samplingDesc4, _dataset$samplingDesc5, _dataset$samplingDesc6;

  var dataset = _ref.dataset;
      _objectWithoutProperties__default["default"](_ref, _excluded$e);

  return react.jsx(Properties, {
    style: {
      marginBottom: 12
    },
    horizontal: true
  }, ((_dataset$samplingDesc = dataset.samplingDescription) === null || _dataset$samplingDesc === void 0 ? void 0 : _dataset$samplingDesc.sampling) && react.jsx(React__default["default"].Fragment, null, react.jsx(T$4, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.sampling",
    defaultMessage: "Sampling"
  })), react.jsx(V$4, null, react.jsx(HyperText, {
    text: dataset.samplingDescription.sampling
  }))), ((_dataset$samplingDesc2 = dataset.samplingDescription) === null || _dataset$samplingDesc2 === void 0 ? void 0 : _dataset$samplingDesc2.studyExtent) && react.jsx(React__default["default"].Fragment, null, react.jsx(T$4, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.studyExtent",
    defaultMessage: "Study extent"
  })), react.jsx(V$4, null, react.jsx(HyperText, {
    text: dataset.samplingDescription.studyExtent
  }))), ((_dataset$samplingDesc3 = dataset.samplingDescription) === null || _dataset$samplingDesc3 === void 0 ? void 0 : _dataset$samplingDesc3.qualityControl) && react.jsx(React__default["default"].Fragment, null, react.jsx(T$4, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.qualityControl",
    defaultMessage: "Quality control"
  })), react.jsx(V$4, null, react.jsx(HyperText, {
    text: dataset.samplingDescription.qualityControl
  }))), ((_dataset$samplingDesc4 = dataset.samplingDescription) === null || _dataset$samplingDesc4 === void 0 ? void 0 : _dataset$samplingDesc4.methodSteps) && ((_dataset$samplingDesc5 = dataset.samplingDescription) === null || _dataset$samplingDesc5 === void 0 ? void 0 : (_dataset$samplingDesc6 = _dataset$samplingDesc5.methodSteps) === null || _dataset$samplingDesc6 === void 0 ? void 0 : _dataset$samplingDesc6.length) > 0 && react.jsx(React__default["default"].Fragment, null, react.jsx(T$4, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.methodSteps",
    defaultMessage: "Method steps"
  })), react.jsx(V$4, null, react.jsx("ol", {
    style: {
      padding: "0px",
      margin: 0
    }
  }, dataset.samplingDescription.methodSteps.map(function (s, i) {
    return react.jsx("li", {
      key: s,
      style: i < dataset.samplingDescription.methodSteps.length - 1 ? {
        marginBottom: "12px"
      } : null
    }, react.jsx(HyperText, {
      text: s
    }));
  })))));
}

var _excluded$d = ["temporalCoverages"];
var T$3 = Properties.Term,
    V$3 = Properties.Value;
function TemporalCoverages(_ref) {
  var temporalCoverages = _ref.temporalCoverages;
      _objectWithoutProperties__default["default"](_ref, _excluded$d);

  return react.jsx(React__default["default"].Fragment, null, react.jsx(Properties, {
    horizontal: true
  }, temporalCoverages.map(function (period, idx) {
    return react.jsx(TemporalCoverage, {
      period: period,
      key: idx
    });
  })));
}

function Date$1(_ref2) {
  var value = _ref2.value;
  return react.jsx(reactIntl.FormattedDate, {
    value: value,
    year: "numeric",
    month: "long",
    day: "2-digit"
  });
}

function TemporalCoverage(_ref3) {
  var period = _ref3.period;
  return react.jsx(React__default["default"].Fragment, null, react.jsx(T$3, null, period['@type']), period['@type'] == 'range' && react.jsx(V$3, null, react.jsx(Date$1, {
    value: period.start
  }), " - ", react.jsx(Date$1, {
    value: period.end
  })), period['@type'] == 'single' && react.jsx(V$3, null, react.jsx(Date$1, {
    value: period.date
  })), period['@type'] == 'verbatim' && react.jsx(V$3, null, period.period));
}

var _excluded$c = ["geographicCoverages"];
var T$2 = Properties.Term,
    V$2 = Properties.Value;
function GeographicCoverages(_ref) {
  var geographicCoverages = _ref.geographicCoverages;
      _objectWithoutProperties__default["default"](_ref, _excluded$c);

  return react.jsx(React__default["default"].Fragment, null, geographicCoverages.map(function (coverage, idx) {
    return react.jsx(GeographicCoverage, {
      coverage: coverage,
      key: idx
    });
  }));
}

function GeographicCoverage(_ref2) {
  var _coverage$boundingBox, _coverage$boundingBox2, _coverage$boundingBox4;

  var coverage = _ref2.coverage;
  var geoJSON;

  if ((coverage === null || coverage === void 0 ? void 0 : (_coverage$boundingBox = coverage.boundingBox) === null || _coverage$boundingBox === void 0 ? void 0 : _coverage$boundingBox.minLatitude) > -85 && (coverage === null || coverage === void 0 ? void 0 : (_coverage$boundingBox2 = coverage.boundingBox) === null || _coverage$boundingBox2 === void 0 ? void 0 : _coverage$boundingBox2.maxLatitude) < 85) {
    var _coverage$boundingBox3 = coverage.boundingBox,
        minLongitude = _coverage$boundingBox3.minLongitude,
        minLatitude = _coverage$boundingBox3.minLatitude,
        maxLongitude = _coverage$boundingBox3.maxLongitude,
        maxLatitude = _coverage$boundingBox3.maxLatitude;
    geoJSON = {
      type: "Polygon",
      coordinates: [[[minLongitude, minLatitude], [maxLongitude, minLatitude], [maxLongitude, maxLatitude], [minLongitude, maxLatitude], [minLongitude, minLatitude]]]
    };
  }

  var Bbox;

  if (coverage !== null && coverage !== void 0 && (_coverage$boundingBox4 = coverage.boundingBox) !== null && _coverage$boundingBox4 !== void 0 && _coverage$boundingBox4.minLatitude) {
    Bbox = react.jsx(Properties, {
      horizontal: true
    }, react.jsx(T$2, null, "Latitude"), react.jsx(V$2, null, "From ", coverage.boundingBox.minLatitude, " to", " ", coverage.boundingBox.maxLatitude), react.jsx(T$2, null, "Longitude"), react.jsx(V$2, null, "From ", coverage.boundingBox.minLongitude, " to", " ", coverage.boundingBox.maxLongitude));
  } else {
    Bbox = null;
  }

  return react.jsx(Properties, null, react.jsx(T$2, null, "Description"), react.jsx(V$2, null, react.jsx(HyperText, {
    text: coverage.description
  })), geoJSON && react.jsx(React__default["default"].Fragment, null, react.jsx(T$2, null), react.jsx(V$2, {
    style: {
      width: "100%"
    }
  }, react.jsx("img", {
    style: {
      marginTop: 24,
      maxWidth: "100%"
    },
    src: "https://api.mapbox.com/styles/v1/mapbox/light-v10/static/geojson(".concat(encodeURIComponent(JSON.stringify(geoJSON)), ")/auto/600x300@2x?access_token=pk.eyJ1IjoiaG9mZnQiLCJhIjoiY2llaGNtaGRiMDAxeHNxbThnNDV6MG95OSJ9.p6Dj5S7iN-Mmxic6Z03BEA")
  }), Bbox)), !geoJSON && react.jsx(React__default["default"].Fragment, null, react.jsx(T$2, null, "Bounding box"), react.jsx(V$2, null, Bbox)));
}

var _excluded$b = ["dataset", "taxonomicCoverages"];
var T$1 = Properties.Term,
    V$1 = Properties.Value;
function TaxonomicCoverages(_ref) {
  _ref.dataset;
      var taxonomicCoverages = _ref.taxonomicCoverages;
      _objectWithoutProperties__default["default"](_ref, _excluded$b);

  return react.jsx(React__default["default"].Fragment, null, taxonomicCoverages.map(function (coverage, idx) {
    return react.jsx(TaxonomicCoverage, {
      coverage: coverage,
      key: idx
    });
  }));
}

function TaxonomicCoverage(_ref2) {
  var coverage = _ref2.coverage;
  React.useContext(ThemeContext); // I really dislike "show all"-buttons that only show me one more item. Just show the damn item to begin with then. It is such a disappointing experience.
  // So instead we do: if less than 10 items then show them all. If above 10, then show 5 + expand button.
  // then it feels like you are rewarded for your action

  var _useState = React.useState(5),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      threshold = _useState2[0],
      setThreshold = _useState2[1];

  var coverages = coverage.coverages.length < 10 ? coverage.coverages : coverage.coverages.slice(0, threshold);
  var hasHidden = coverage.coverages.length > coverages.length;
  return react.jsx(Properties, {
    horizontal: true
  }, react.jsx(T$1, null, "Description"), react.jsx(V$1, null, react.jsx(HyperText, {
    text: coverage.description
  })), react.jsx(T$1, null, "Coverage"), react.jsx(V$1, null, coverages.map(function (c, i) {
    return react.jsx(CoverageItem, {
      key: i,
      item: c,
      lastItem: coverage.coverages[i - 1]
    });
  }), hasHidden && react.jsx(React__default["default"].Fragment, null, react.jsx("br", null), react.jsx(Button, {
    onClick: function onClick() {
      return setThreshold(500);
    }
  }, "Show all"))));
}

function CoverageItem(_ref3) {
  var _lastItem$rank, _item$rank;

  var item = _ref3.item,
      lastItem = _ref3.lastItem;
  return react.jsx(React__default["default"].Fragment, null, lastItem && (lastItem === null || lastItem === void 0 ? void 0 : (_lastItem$rank = lastItem.rank) === null || _lastItem$rank === void 0 ? void 0 : _lastItem$rank.interpreted) !== (item === null || item === void 0 ? void 0 : (_item$rank = item.rank) === null || _item$rank === void 0 ? void 0 : _item$rank.interpreted) && react.jsx("br", null), react.jsx("span", {
    css: coverageItem
  }, react.jsx("span", null, item.scientificName), react.jsx("span", {
    css: coverageItem_common
  }, item.commonName)));
}

Properties.Term;
    Properties.Value;

var _excluded$a = ["dataset"];
var T = Properties.Term,
    V = Properties.Value;
function Registration(_ref) {
  var _ref$dataset = _ref.dataset,
      dataset = _ref$dataset === void 0 ? {} : _ref$dataset;
      _objectWithoutProperties__default["default"](_ref, _excluded$a);

  var _dataset$machineTags = dataset.machineTags,
      machineTags = _dataset$machineTags === void 0 ? [] : _dataset$machineTags,
      doi = dataset.doi,
      _dataset$endpoints = dataset.endpoints,
      endpoints = _dataset$endpoints === void 0 ? [] : _dataset$endpoints,
      _dataset$identifiers = dataset.identifiers,
      identifiers = _dataset$identifiers === void 0 ? [] : _dataset$identifiers,
      created = dataset.created,
      modified = dataset.modified,
      pubDate = dataset.pubDate,
      installation = dataset.installation;
  var hostingOrganization = installation.organization;
  var urlEndpoints = endpoints.filter(function (x) {
    return x.url;
  });
  var visibleIdentifiers = identifiers.filter(function (x) {
    return ['DOI', 'URL', 'LSID', 'FTP', 'UNKNOWN'].indexOf(x.type) > -1;
  });
  var orphanMachineTag = machineTags.find(function (machineTag) {
    return machineTag.namespace === 'orphans.gbif.org' && name === 'status';
  });
  var hostingStatus = orphanMachineTag ? orphanMachineTag.value : undefined;
  return react.jsx("div", {
    style: {
      paddingBottom: 12,
      marginBottom: 12
    }
  }, react.jsx(Properties, {
    style: {
      marginBottom: 12
    },
    horizontal: true
  }, created && react.jsx(React__default["default"].Fragment, null, react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.registrationDate"
  })), react.jsx(V, null, react.jsx(reactIntl.FormattedDate, {
    value: created,
    year: "numeric",
    month: "long",
    day: "2-digit"
  }))), modified && react.jsx(React__default["default"].Fragment, null, react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.metdataLastModified"
  })), react.jsx(V, null, react.jsx(reactIntl.FormattedDate, {
    value: modified,
    year: "numeric",
    month: "long",
    day: "2-digit"
  }))), pubDate && react.jsx(React__default["default"].Fragment, null, react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.pubDate"
  })), react.jsx(V, null, react.jsx(reactIntl.FormattedDate, {
    value: pubDate,
    year: "numeric",
    month: "long",
    day: "2-digit"
  }))), hostingOrganization && react.jsx(React__default["default"].Fragment, null, react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.hostedBy"
  })), react.jsx(V, null, hostingOrganization === null || hostingOrganization === void 0 ? void 0 : hostingOrganization.title)), installation && react.jsx(React__default["default"].Fragment, null, react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.installation"
  })), react.jsx(V, null, installation === null || installation === void 0 ? void 0 : installation.title)), urlEndpoints.length > 0 && react.jsx(React__default["default"].Fragment, null, react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.endpoints"
  })), react.jsx(V, null, react.jsx(Properties, {
    breakpoint: 800,
    horizontal: false
  }, urlEndpoints.map(function (endpoint) {
    return react.jsx(React__default["default"].Fragment, {
      key: endpoint.key
    }, react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
      id: "enums.endpointType.".concat(endpoint.type)
    })), react.jsx(V, null, react.jsx("a", null, endpoint.url, " ", endpoint.type)));
  })))), hostingStatus && react.jsx(React__default["default"].Fragment, null, react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.hostingStatus"
  })), react.jsx(V, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.".concat(hostingStatus)
  }))), react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.preferredIdentifier"
  })), react.jsx(V, null, doi), visibleIdentifiers.length > 0 && react.jsx(React__default["default"].Fragment, null, react.jsx(T, null, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.alternativeIdentifier"
  })), react.jsx(V, null, react.jsx(Properties, {
    breakpoint: 800,
    horizontal: false
  }, visibleIdentifiers.map(function (identifier) {
    return react.jsx(React__default["default"].Fragment, {
      key: identifier.key
    }, react.jsx(V, null, react.jsx(HyperText, {
      text: identifier.identifier
    })));
  }))))), react.jsx("p", null, react.jsx("a", {
    href: "https://registry.gbif.org/dataset/".concat(dataset.key, "/ingestion-history")
  }, react.jsx(reactIntl.FormattedMessage, {
    id: "dataset.registry.registrationDetails"
  }))));
}

var _excluded$9 = ["images"];
function Images(_ref) {
  var _images$documents, _images$documents2;

  var _ref$images = _ref.images,
      images = _ref$images === void 0 ? [] : _ref$images,
      props = _objectWithoutProperties__default["default"](_ref, _excluded$9);

  if (!((images === null || images === void 0 ? void 0 : (_images$documents = images.documents) === null || _images$documents === void 0 ? void 0 : _images$documents.total) > 0)) return null;
  return react.jsx("div", _extends__default["default"]({
    css: galleryBar
  }, props), react.jsx("div", null, images.documents.results.map(function (occurrence) {
    return react.jsx("div", {
      key: occurrence.key
    }, react.jsx(Image$1, {
      src: occurrence.stillImages[0].identifier,
      height: 300
    }));
  })), react.jsx(Tooltip, {
    title: react.jsx("span", null, "Records with images"),
    placement: "auto"
  }, react.jsx(Button, {
    look: "primary",
    as: "a",
    href: "/"
  }, react.jsx(md.MdImage, {
    style: {
      marginRight: 8
    }
  }), " ", react.jsx(reactIntl.FormattedNumber, {
    value: images === null || images === void 0 ? void 0 : (_images$documents2 = images.documents) === null || _images$documents2 === void 0 ? void 0 : _images$documents2.total
  }))));
}

var _excluded$8 = ["data", "insights", "loading", "error", "tocState", "className"];
Properties.Term;
    Properties.Value;
function About(_ref) {
  var _dataset$gridded, _dataset$gridded$, _insights$data, _insights$data$unfilt, _insights$data$unfilt2, _insights$data2, _insights$data2$withC, _insights$data2$withC2, _insights$data3, _insights$data3$withY, _insights$data3$withY2, _occurrenceSearch$doc, _insights$data4, _insights$data4$withT, _insights$data4$withT2, _occurrenceSearch$doc2, _insights$data5, _insights$data5$unfil, _insights$data5$unfil2, _insights$data6, _dataset$geographicCo, _dataset$temporalCove, _dataset$taxonomicCov, _dataset$bibliographi, _occurrenceSearch$doc3;

  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data,
      insights = _ref.insights;
      _ref.loading;
      _ref.error;
      _ref.tocState;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$8);

  var isBelowTOC = useBelow(1200);

  var _useRouteMatch = reactRouterDom.useRouteMatch(),
      url = _useRouteMatch.url;
      _useRouteMatch.path;

  var theme = React.useContext(ThemeContext);
  React.useContext(RouteContext);

  var _useState = React.useState({}),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      tocRefs = _useState2[0];
      _useState2[1]; // if (loading || !occurrence) return <h1>Loading</h1>;


  var dataset = data.dataset,
      occurrenceSearch = data.occurrenceSearch,
      literatureSearch = data.literatureSearch; // collect all refs to headlines for the TOC, e.g. ref={node => { tocRefs["description"] = node; }}
  //let tocRefs = {};

  var isGridded = (dataset === null || dataset === void 0 ? void 0 : (_dataset$gridded = dataset.gridded) === null || _dataset$gridded === void 0 ? void 0 : (_dataset$gridded$ = _dataset$gridded[0]) === null || _dataset$gridded$ === void 0 ? void 0 : _dataset$gridded$.percent) > 0.5; // threshold decided in https://github.com/gbif/gridded-datasets/issues/3

  var hasDna = ((insights === null || insights === void 0 ? void 0 : (_insights$data = insights.data) === null || _insights$data === void 0 ? void 0 : (_insights$data$unfilt = _insights$data.unfiltered) === null || _insights$data$unfilt === void 0 ? void 0 : (_insights$data$unfilt2 = _insights$data$unfilt.facet) === null || _insights$data$unfilt2 === void 0 ? void 0 : _insights$data$unfilt2.dwcaExtension) || []).find(function (ext) {
    return ext.key === 'http://rs.gbif.org/terms/1.0/DNADerivedData';
  });
  var withCoordinates = insights === null || insights === void 0 ? void 0 : (_insights$data2 = insights.data) === null || _insights$data2 === void 0 ? void 0 : (_insights$data2$withC = _insights$data2.withCoordinates) === null || _insights$data2$withC === void 0 ? void 0 : (_insights$data2$withC2 = _insights$data2$withC.documents) === null || _insights$data2$withC2 === void 0 ? void 0 : _insights$data2$withC2.total;
  var withYear = insights === null || insights === void 0 ? void 0 : (_insights$data3 = insights.data) === null || _insights$data3 === void 0 ? void 0 : (_insights$data3$withY = _insights$data3.withYear) === null || _insights$data3$withY === void 0 ? void 0 : (_insights$data3$withY2 = _insights$data3$withY.documents) === null || _insights$data3$withY2 === void 0 ? void 0 : _insights$data3$withY2.total;
  var withTaxonMatch = (occurrenceSearch === null || occurrenceSearch === void 0 ? void 0 : (_occurrenceSearch$doc = occurrenceSearch.documents) === null || _occurrenceSearch$doc === void 0 ? void 0 : _occurrenceSearch$doc.total) - (insights === null || insights === void 0 ? void 0 : (_insights$data4 = insights.data) === null || _insights$data4 === void 0 ? void 0 : (_insights$data4$withT = _insights$data4.withTaxonMatch) === null || _insights$data4$withT === void 0 ? void 0 : (_insights$data4$withT2 = _insights$data4$withT.documents) === null || _insights$data4$withT2 === void 0 ? void 0 : _insights$data4$withT2.total);
  var total = occurrenceSearch === null || occurrenceSearch === void 0 ? void 0 : (_occurrenceSearch$doc2 = occurrenceSearch.documents) === null || _occurrenceSearch$doc2 === void 0 ? void 0 : _occurrenceSearch$doc2.total;
  var withCoordinatesPercentage = asPercentage(withCoordinates / total);
  var withYearPercentage = asPercentage(withYear / total);
  var withTaxonMatchPercentage = asPercentage(withTaxonMatch / total);
  var withEventId = insights === null || insights === void 0 ? void 0 : (_insights$data5 = insights.data) === null || _insights$data5 === void 0 ? void 0 : (_insights$data5$unfil = _insights$data5.unfiltered) === null || _insights$data5$unfil === void 0 ? void 0 : (_insights$data5$unfil2 = _insights$data5$unfil.cardinality) === null || _insights$data5$unfil2 === void 0 ? void 0 : _insights$data5$unfil2.eventId;
  var labelAsEventDataset = dataset.type === 'SAMPLING_EVENT_DATASET' || withEventId > 1 && withEventId / total < 0.99; // Threshold chosen somewhat randomly. The issue is that some datasets assign random unique eventIds to all their occurrences. Those aren't really event datasets, it is a misunderstanding.

  return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    css: withSideBar$1({
      theme: theme
    })
  }, !isBelowTOC && react.jsx("div", {
    css: sideBar$1({
      theme: theme
    })
  }, react.jsx("nav", {
    css: sideBarNav$1({
      theme: theme
    })
  }, react.jsx(Toc, {
    refs: tocRefs
  }))), react.jsx("div", {
    style: {
      width: '100%',
      marginLeft: 12,
      overflow: 'hidden'
    }
  }, react.jsx(OccurrenceMap, {
    rootPredicate: {
      type: 'equals',
      key: 'datasetKey',
      value: dataset.key
    }
  }), dataset.description && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["description"] = node;
    }
  }, "Description"), react.jsx(HyperText, {
    text: dataset.description
  })), react.jsx(Images, {
    images: insights === null || insights === void 0 ? void 0 : (_insights$data6 = insights.data) === null || _insights$data6 === void 0 ? void 0 : _insights$data6.images
  }), dataset.purpose && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["purpose"] = node;
    }
  }, "Purpose"), react.jsx(HyperText, {
    text: dataset.purpose
  })), (dataset === null || dataset === void 0 ? void 0 : (_dataset$geographicCo = dataset.geographicCoverages) === null || _dataset$geographicCo === void 0 ? void 0 : _dataset$geographicCo.length) > 0 && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["geographic-scope"] = node;
    }
  }, "Geographic scope"), react.jsx(GeographicCoverages, {
    geographicCoverages: dataset.geographicCoverages
  })), (dataset === null || dataset === void 0 ? void 0 : (_dataset$temporalCove = dataset.temporalCoverages) === null || _dataset$temporalCove === void 0 ? void 0 : _dataset$temporalCove.length) > 0 && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["temporal-scope"] = node;
    }
  }, "Temporal scope"), react.jsx(TemporalCoverages, {
    temporalCoverages: dataset.temporalCoverages
  })), (dataset === null || dataset === void 0 ? void 0 : (_dataset$taxonomicCov = dataset.taxonomicCoverages) === null || _dataset$taxonomicCov === void 0 ? void 0 : _dataset$taxonomicCov.length) > 0 && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["taxonomic-scope"] = node;
    }
  }, "Taxonomic scope"), react.jsx(TaxonomicCoverages, {
    taxonomicCoverages: dataset.taxonomicCoverages
  })), dataset.samplingDescription && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["methodology"] = node;
    }
  }, "Methodology"), react.jsx(SamplingDescription, {
    dataset: dataset
  })), dataset.additionalInfo && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["additional-info"] = node;
    }
  }, "Additional info"), react.jsx(HyperText, {
    text: dataset.additionalInfo
  })), (dataset === null || dataset === void 0 ? void 0 : dataset.volatileContributors) && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["contacts"] = node;
    }
  }, "Contacts"), react.jsx(ContactList, {
    contacts: dataset.volatileContributors,
    style: {
      paddingInlineStart: 0
    }
  })), (dataset === null || dataset === void 0 ? void 0 : (_dataset$bibliographi = dataset.bibliographicCitations) === null || _dataset$bibliographi === void 0 ? void 0 : _dataset$bibliographi.length) > 0 && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["bibliographic-citations"] = node;
    }
  }, "Bibliographic citations"), react.jsx(BibliographicCitations, {
    bibliographicCitations: dataset === null || dataset === void 0 ? void 0 : dataset.bibliographicCitations
  })), react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["registration"] = node;
    }
  }, "Registration"), react.jsx(Registration, {
    dataset: dataset
  })), (dataset === null || dataset === void 0 ? void 0 : dataset.citation) && react.jsx(Prose, {
    css: paper$1({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["citation"] = node;
    }
  }, "Citation"), react.jsx(Citation, {
    data: data
  }))), react.jsx("div", {
    css: sideBar$1({
      theme: theme
    }),
    style: {
      margin: '0 0 0 12px',
      position: 'relative'
    }
  }, react.jsx("div", null, react.jsx("div", {
    css: area
  }, react.jsx("div", {
    css: testcard
  }, react.jsx("div", {
    css: testicon
  }, react.jsx("div", null, react.jsx(md.MdFormatQuote, null))), react.jsx("div", {
    css: testcontent
  }, react.jsx("h5", null, react.jsx(reactRouterDom.Link, {
    to: join(url, 'citations')
  }, react.jsx(reactIntl.FormattedNumber, {
    value: literatureSearch.documents.count
  }), " citations"))))), react.jsx("div", {
    css: area
  }, react.jsx("div", {
    css: testcardWrapper
  }, react.jsx("div", {
    css: testcard
  }, react.jsx("div", {
    css: testcontent
  }, react.jsx("h5", null, react.jsx(reactIntl.FormattedNumber, {
    value: occurrenceSearch === null || occurrenceSearch === void 0 ? void 0 : (_occurrenceSearch$doc3 = occurrenceSearch.documents) === null || _occurrenceSearch$doc3 === void 0 ? void 0 : _occurrenceSearch$doc3.total
  }), " occurrences"), react.jsx("p", null, withCoordinatesPercentage, "% with coordinates"), react.jsx("div", {
    css: progress
  }, react.jsx("div", {
    style: {
      width: "".concat(withCoordinatesPercentage, "%")
    }
  })), react.jsx("p", null, withYearPercentage, "% with year"), react.jsx("div", {
    css: progress
  }, react.jsx("div", {
    style: {
      width: "".concat(withYearPercentage, "%")
    }
  })), react.jsx("p", null, withTaxonMatchPercentage, "% with taxon match"), react.jsx("div", {
    css: progress
  }, react.jsx("div", {
    style: {
      width: "".concat(withTaxonMatchPercentage, "%")
    }
  }))))), hasDna && react.jsx("div", {
    css: testcard
  }, react.jsx("div", {
    css: testicon
  }, react.jsx("div", null, react.jsx(gi.GiDna1, null))), react.jsx("div", {
    css: testcontent
  }, react.jsx("h5", null, "Includes DNA"), react.jsx("p", null, "Lorem ipsum sfhkjh sfhlksduf bksk sdkh sdfg "))), labelAsEventDataset && react.jsx("div", {
    css: testcard
  }, react.jsx("div", {
    css: testicon
  }, react.jsx("div", null, react.jsx(md.MdGridOn, null))), react.jsx("div", {
    css: testcontent
  }, react.jsx("h5", null, "Contains sampling events"), react.jsx("p", null, "Lorem ipsum sfhkjh sfhlksduf bksk sdkh sdfg "))), isGridded && react.jsx("div", {
    css: testcard
  }, react.jsx("div", {
    css: testicon
  }, react.jsx("div", null, react.jsx(md.MdGridOn, null))), react.jsx("div", {
    css: testcontent
  }, react.jsx("h5", null, "Gridded data"), react.jsx("p", null, "This dataset looks like it is gridded."))))))));
}

function asPercentage(fraction) {
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var formatedPercentage = 0;

  if (!isFinite(fraction)) {
    return fraction;
  }

  fraction = 100 * fraction;

  if (fraction > 101) {
    formatedPercentage = fraction.toFixed();
  } else if (fraction > 100.1) {
    formatedPercentage = fraction.toFixed(1);
  } else if (fraction > 100) {
    formatedPercentage = 100.1;
  } else if (fraction == 100) {
    formatedPercentage = 100;
  } else if (fraction >= 99.9) {
    formatedPercentage = 99.9;
  } else if (fraction > 99) {
    formatedPercentage = fraction.toFixed(1);
  } else if (fraction >= 1) {
    formatedPercentage = fraction.toFixed();
  } else if (fraction >= 0.01) {
    formatedPercentage = fraction.toFixed(2);
  } else if (fraction < 0.01 && fraction != 0) {
    formatedPercentage = 0.01;
  }

  if (formatedPercentage > max) {
    formatedPercentage = max;
  }

  return formatedPercentage;
}

var _ref7 = {
  name: "16h4zzf",
  styles: "background:white;padding:24px 48px;margin:12px 0"
} ;

var paper = function paper(_ref8) {
  _extends__default["default"]({}, _ref8);

  return _ref7;
};

var _ref6 = {
  name: "zjik7",
  styles: "display:flex"
} ;

var withSideBar = function withSideBar(_ref9) {
  _extends__default["default"]({}, _ref9);

  return _ref6;
};

var _ref5 = {
  name: "154ddyn",
  styles: "background:white;margin-bottom:12px;border-radius:4px;overflow:hidden;padding:4px;ul{list-style:none;padding:0;margin:0;}"
} ;

var sideBarNav = function sideBarNav(_ref10) {
  _extends__default["default"]({}, _ref10);

  return _ref5;
};

var _ref2$2 = {
  name: "v80hby",
  styles: "flex:0 0 250px;padding-top:12px;margin:0;font-size:14px;position:sticky;top:0;align-self:flex-start;height:100%"
} ;

var sideBar = function sideBar(_ref13) {
  _extends__default["default"]({}, _ref13);

  return _ref2$2;
};

var _excluded$7 = ["data", "loading", "error", "tocState", "className"];
function Project(_ref) {
  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data;
      _ref.loading;
      _ref.error;
      _ref.tocState;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$7);

  var theme = React.useContext(ThemeContext);

  var _useState = React.useState({}),
      _useState2 = _slicedToArray__default["default"](_useState, 2),
      tocRefs = _useState2[0];
      _useState2[1];

  var dataset = data.dataset;
  var project = dataset.project;
  if (!project) return react.jsx("div", null, "This dataset does not state any relation to a project");
  return react.jsx(React__default["default"].Fragment, null, react.jsx("div", {
    css: withSideBar({
      theme: theme
    })
  }, react.jsx("div", {
    css: sideBar({
      theme: theme
    })
  }, react.jsx("nav", {
    css: sideBarNav({
      theme: theme
    })
  }, react.jsx(Toc, {
    refs: tocRefs
  }))), react.jsx("div", {
    style: {
      width: '100%',
      marginLeft: 12
    }
  }, (project["abstract"] || project.title) && react.jsx(Prose, {
    css: paper({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["abstract"] = node;
    }
  }, project.title), react.jsx(HyperText, {
    text: project["abstract"]
  })), project.studyAreaDescription && react.jsx(Prose, {
    css: paper({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["studyAreaDescription"] = node;
    }
  }, "studyAreaDescription"), react.jsx(HyperText, {
    text: project.studyAreaDescription
  })), project.designDescription && react.jsx(Prose, {
    css: paper({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["designDescription"] = node;
    }
  }, "designDescription"), react.jsx(HyperText, {
    text: project.designDescription
  })), project.funding && react.jsx(Prose, {
    css: paper({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["funding"] = node;
    }
  }, "funding"), react.jsx(HyperText, {
    text: project.funding
  })), (project === null || project === void 0 ? void 0 : project.contacts) && react.jsx(Prose, {
    css: paper({
      theme: theme
    })
  }, react.jsx("h2", {
    ref: function ref(node) {
      tocRefs["contacts"] = node;
    }
  }, "Contacts"), react.jsx(ContactList, {
    contacts: project.contacts,
    style: {
      paddingInlineStart: 0
    }
  })))));
}

var _ref3 = {
  name: "cpyc7r",
  styles: "background:var(--paperBackground);padding:2rem 1rem 0 1rem"
} ;

var headerWrapper = function headerWrapper(_ref7) {
  _extends__default["default"]({}, _ref7);

  return _ref3;
};

var _ref2$1 = {
  name: "9v6ty9",
  styles: "margin-top:1.5rem;margin-bottom:1.5rem;>div{margin-bottom:8px;}"
} ;

var summary = function summary(_ref8) {
  _extends__default["default"]({}, _ref8);

  return _ref2$1;
};
var headerFlex = {
  name: "lxew06",
  styles: "display:flex;margin-top:.5em"
} ;
var headerContent = {
  name: "mkkf9p",
  styles: "flex:1 1 auto"
} ;
var headerIcons = {
  name: "1ju08nc",
  styles: "padding:0 6px;align-items:center;display:flex;>button{padding:7px;font-size:18px;}>gbif-button-text{color:#555;}"
} ;

var _ref$1 = {
  name: "zn1n19",
  styles: "margin:0 auto;width:1350px;max-width:100%"
} ;

var proseWrapper = function proseWrapper(_ref9) {
  _extends__default["default"]({}, _ref9);

  return _ref$1;
};

var _excluded$6 = ["dataset", "className"];
function Activity(_ref) {
  var dataset = _ref.dataset;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$6);

  var _useRouteMatch = reactRouterDom.useRouteMatch();
      _useRouteMatch.url;
      _useRouteMatch.path;

  React.useContext(ThemeContext);
  var config = {
    rootFilter: {
      gbifDatasetKey: [dataset.key]
    },
    excludedFilters: ['datasetKey'] // highlightedFilters: ['taxonKey', 'catalogNumber', 'recordedBy', 'identifiedBy', 'typeStatus']

  };
  return react.jsx("div", null, react.jsx(Search$2, {
    config: config,
    style: {
      margin: 'auto',
      maxWidth: '100%',
      minHeight: 'calc(90vh)'
    }
  }));
}

var _excluded$5 = ["highlighted"];

var _ref2 = {
  name: "p3cyll",
  styles: "display:flex;justify-content:space-evenly;margin:24px 0"
} ;

var options = function options(_ref3) {
  _extends__default["default"]({}, _ref3);

  return _ref2;
};
var card = function card(_ref4) {
  var highlighted = _ref4.highlighted;
      _objectWithoutProperties__default["default"](_ref4, _excluded$5);

  return /*#__PURE__*/react.css("background:white;width:250px;max-width:100%;background:white;padding:24px;margin:12px;border-radius:8px;box-shadow:0 0 3px 3px rgba(0,0,0,.05);font-size:14px;h4{font-size:16px;font-weight:bold;margin:0 0 24px 0;}>div{margin-bottom:12px;}", highlighted ? isHighlighted() : '', ";" + ("" ), "" );
};

var _ref = {
  name: "ieew9t",
  styles: "transform:scale(1.025);border-color:#9ecaed;box-shadow:0 0 10px #9ecaed"
} ;

function isHighlighted() {
  return _ref;
}

var _excluded$4 = ["dataset", "className"];
function DownloadOptions(_ref) {
  _ref.dataset;
      _ref.className;
      _objectWithoutProperties__default["default"](_ref, _excluded$4);

  var theme = React.useContext(ThemeContext);
  return react.jsx("div", {
    css: options({
      theme: theme
    })
  }, react.jsx("div", null, react.jsx("div", {
    css: card({
      theme: theme
    })
  }, react.jsx("h4", null, "GBIF annotated metadata"), react.jsx("div", null, "The annotated EML file contains information lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."), react.jsx(Button, {
    appeance: "outline"
  }, "EML"))), react.jsx("div", null, react.jsx("div", {
    css: card({
      theme: theme,
      highlighted: true
    })
  }, react.jsx("h4", null, "GBIF annotated occurrence archive"), react.jsx("div", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."), react.jsx(Button, null, "Interpreted occurrences"))), react.jsx("div", null, react.jsx("div", {
    css: card({
      theme: theme
    })
  }, react.jsx("h4", null, "Source archive"), react.jsx("div", null, "The source archive is the data as published to GBIF. It contains information lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."), react.jsx(Button, {
    appeance: "outline"
  }, "source archive"))));
}

var _excluded$3 = ["theme"];
var headline = function headline(_ref) {
  var theme = _ref.theme;
      _objectWithoutProperties__default["default"](_ref, _excluded$3);

  return /*#__PURE__*/react.css("color:", theme.color, ";margin-top:0;" + ("" ), "" );
};

var H1 = Prose.H1;
function Headline(props) {
  var theme = React.useContext(ThemeContext);
  return react.jsx(H1, _extends__default["default"]({
    css: headline({
      theme: theme
    })
  }, props));
}

var _excluded$2 = ["id", "data", "insights", "error", "loading"];
var TabList = Tabs.TabList,
    RouterTab = Tabs.RouterTab;
Prose.H1;
function DatasetPresentation(_ref) {
  var _literatureSearch$doc;

  var id = _ref.id,
      data = _ref.data,
      insights = _ref.insights,
      error = _ref.error,
      loading = _ref.loading;
      _objectWithoutProperties__default["default"](_ref, _excluded$2);

  var isBelowNarrow = useBelow(800);

  var _useRouteMatch = reactRouterDom.useRouteMatch(),
      url = _useRouteMatch.url,
      path = _useRouteMatch.path;

  var theme = React.useContext(ThemeContext);
  if (loading) return react.jsx("div", null, "loading");
  var dataset = data.dataset,
      literatureSearch = data.literatureSearch,
      occurrenceSearch = data.occurrenceSearch;
      data.siteOccurrences;
      var taxonSearch = data.taxonSearch;

  if (error || !dataset) {
    // TODO a generic component for failures is needed
    return react.jsx("div", null, "Failed to retrieve item");
  }

  var rootPredicate = {
    "type": "equals",
    "value": id,
    "key": "datasetKey"
  };
  var config = {
    rootPredicate: rootPredicate,
    excludedFilters: ['datasetCode', 'datasetKey', 'institutionKey', 'institutionCode', 'hostingOrganizationKey', 'protocol', 'publishingCountryCode'],
    occurrenceSearchTabs: ['TABLE', 'GALLERY', 'MAP'],
    highlightedFilters: ['taxonKey', 'catalogNumber', 'recordedBy', 'identifiedBy', 'typeStatus']
  };
  return react.jsx(React__default["default"].Fragment, null, react.jsx(DataHeader, {
    left: react.jsx(ResourceSearchLink, {
      type: "datasetSearch",
      discreet: true
    }, react.jsx(md.MdKeyboardArrowLeft, null), react.jsx(reactIntl.FormattedMessage, {
      id: "catalogues.datasets"
    })),
    style: {
      borderBottom: "1px solid ".concat(theme.paperBorderColor),
      background: 'white'
    },
    right: react.jsx("div", {
      css: headerIcons
    }, !isBelowNarrow && react.jsx(Doi, {
      id: dataset.doi
    }), react.jsx(Button, {
      look: "text"
    }, react.jsx(md.MdFormatQuote, null)), react.jsx(Button, {
      look: "text"
    }, react.jsx(md.MdOutlineCode, null)), react.jsx(Button, {
      look: "text"
    }, react.jsx(md.MdOutlineHelpOutline, null)))
  }), react.jsx("div", {
    css: headerWrapper({
      theme: theme
    })
  }, react.jsx("div", {
    css: proseWrapper({
      theme: theme
    })
  }, react.jsx(Eyebrow, {
    prefix: react.jsx(reactIntl.FormattedMessage, {
      id: "dataset.longType.".concat(dataset.type)
    }),
    suffix: react.jsx(reactIntl.FormattedMessage, {
      id: "dataset.registeredDate",
      values: {
        DATE: react.jsx(reactIntl.FormattedDate, {
          value: dataset.created,
          year: "numeric",
          month: "long",
          day: "2-digit"
        })
      }
    })
  }), react.jsx("div", {
    css: headerFlex
  }, react.jsx("div", {
    css: headerContent
  }, react.jsx(Headline, null, dataset.title), react.jsx(Row, {
    wrap: "nowrap"
  }, react.jsx(Col, {
    grow: true
  }, (dataset === null || dataset === void 0 ? void 0 : dataset.contactsCitation.length) > 0 && react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(md.MdPeople, null), react.jsx("div", null, react.jsx("ol", {
    css: bulletList
  }, dataset === null || dataset === void 0 ? void 0 : dataset.contactsCitation.map(function (p) {
    return react.jsx("li", {
      key: p.key
    }, p.abbreviatedName);
  })))), react.jsx("div", {
    style: {
      marginTop: '.5em'
    }
  }, "Published by ", react.jsx(ResourceLink, {
    css: Prose.css.a(theme),
    type: "publisherKey",
    id: dataset.publishingOrganizationKey
  }, dataset.publishingOrganizationTitle)), react.jsx("div", {
    css: summary
  }, react.jsx("div", {
    css: iconFeatures()
  }, react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(LicenseTag, {
    value: dataset.license
  })), isBelowNarrow && react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(Doi, {
    id: dataset.doi
  })), dataset.homepage && react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(md.MdLink, null), react.jsx("span", null, react.jsx(Hostname, {
    href: dataset.homepage
  }))), occurrenceSearch.documents.total > 0 && react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(md.MdLocationOn, null), react.jsx("span", null, react.jsx(reactIntl.FormattedNumber, {
    value: occurrenceSearch.documents.total
  }), " occurrences")), taxonSearch.count > 0 && react.jsx("div", {
    css: iconFeature({
      theme: theme
    })
  }, react.jsx(md.MdPlaylistAddCheck, null), react.jsx("span", null, react.jsx(reactIntl.FormattedNumber, {
    value: taxonSearch.count
  }), " accepted names")))))))), react.jsx(TabList, {
    style: {
      marginTop: '12px',
      borderTop: '1px solid #ddd'
    }
  }, react.jsx(RouterTab, {
    to: url,
    exact: true,
    label: "About"
  }), dataset.project && react.jsx(RouterTab, {
    to: join(url, 'project'),
    label: "Project"
  }), ((_literatureSearch$doc = literatureSearch.documents) === null || _literatureSearch$doc === void 0 ? void 0 : _literatureSearch$doc.count) > 0 && react.jsx(RouterTab, {
    to: join(url, 'citations'),
    label: "Citations"
  }), react.jsx(RouterTab, {
    to: join(url, 'download'),
    label: "Download"
  })))), react.jsx("section", null, react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: join(path, 'citations')
  }, react.jsx("div", {
    css: proseWrapper({
      theme: theme
    })
  }, react.jsx(Activity, {
    dataset: dataset
  }))), react.jsx(reactRouterDom.Route, {
    path: join(path, 'download')
  }, react.jsx("div", {
    css: proseWrapper({
      theme: theme
    })
  }, react.jsx(DownloadOptions, {
    dataset: dataset
  }))), react.jsx(reactRouterDom.Route, {
    path: join(path, 'specimens')
  }, react.jsx(OccurrenceSearch, {
    config: config,
    style: {
      margin: 'auto',
      maxWidth: 1000,
      minHeight: 'calc(90vh)'
    }
  })), react.jsx(reactRouterDom.Route, {
    path: join(path, 'project')
  }, react.jsx("div", {
    css: proseWrapper({
      theme: theme
    })
  }, react.jsx(Project, {
    data: data
  }))), react.jsx(reactRouterDom.Route, {
    path: path
  }, react.jsx("div", {
    css: proseWrapper({
      theme: theme
    })
  }, react.jsx(About, {
    data: data,
    insights: insights
  }))))));
}

function Hostname(_ref2) {
  var href = _ref2.href;

  try {
    var hostname = new URL(href).hostname;
    return react.jsx("a", {
      href: href,
      css: discreetLink
    }, hostname);
  } catch (err) {
    return react.jsx("span", null, "invalid");
  }
}

var _excluded$1 = ["id"];

function EnsureRouter(_ref) {
  var children = _ref.children;
  var hasRouter;

  try {
    var forTestOnly = reactRouterDom.useRouteMatch();
    hasRouter = true;
  } catch (err) {
    console.log('No router context found, so creating a MemoryRouter for the component');
    hasRouter = false;
  }

  return hasRouter ? react.jsx(React__default["default"].Fragment, null, children) : react.jsx(reactRouterDom.MemoryRouter, {
    initialEntries: ['/']
  }, children);
}

function Dataset(_ref2) {
  var _siteContext$occurren;

  var id = _ref2.id;
      _objectWithoutProperties__default["default"](_ref2, _excluded$1);

  var _useQuery = useQuery(DATASET, {
    lazyLoad: true
  }),
      data = _useQuery.data,
      error = _useQuery.error,
      loading = _useQuery.loading,
      load = _useQuery.load;

  var _useQuery2 = useQuery(DATASET_SECONDARY, {
    lazyLoad: true
  }),
      insights = _useQuery2.data,
      insightsError = _useQuery2.error,
      insightsLoading = _useQuery2.loading,
      loadInsights = _useQuery2.load;

  React.useContext(ThemeContext);
  var siteContext = React.useContext(SiteContext);
  var sitePredicate = siteContext === null || siteContext === void 0 ? void 0 : (_siteContext$occurren = siteContext.occurrence) === null || _siteContext$occurren === void 0 ? void 0 : _siteContext$occurren.rootPredicate;
  React.useEffect(function () {
    if (typeof id !== 'undefined') {
      var datasetPredicate = {
        type: "equals",
        key: "datasetKey",
        value: id
      }; // we also want to know how many of those occurrences are included on the present site

      var predicates = [datasetPredicate];
      if (sitePredicate) predicates.push(sitePredicate);
      load({
        variables: {
          key: id,
          predicate: datasetPredicate,
          sitePredicate: {
            type: 'and',
            predicates: predicates
          }
        }
      });
      loadInsights({
        variables: {
          key: id,
          datasetPredicate: datasetPredicate,
          imagePredicate: {
            type: 'and',
            predicates: [datasetPredicate, {
              type: 'equals',
              key: 'mediaType',
              value: 'StillImage'
            }]
          },
          coordinatePredicate: {
            type: 'and',
            predicates: [datasetPredicate, {
              type: 'equals',
              key: 'hasCoordinate',
              value: 'true'
            }, {
              type: 'equals',
              key: 'hasGeospatialIssue',
              value: 'false'
            }]
          },
          taxonPredicate: {
            type: 'and',
            predicates: [datasetPredicate, {
              type: 'equals',
              key: 'issue',
              value: 'TAXON_MATCH_NONE'
            }]
          },
          yearPredicate: {
            type: 'and',
            predicates: [datasetPredicate, {
              type: 'isNotNull',
              key: 'year'
            }]
          },
          eventPredicate: {
            type: 'and',
            predicates: [datasetPredicate, {
              type: 'isNotNull',
              key: 'eventId'
            }]
          }
        }
      });
    }
  }, [id]);
  return react.jsx(EnsureRouter, null, react.jsx(DatasetPresentation, {
    data: data,
    error: error,
    loading: loading || !data,
    id: id,
    insights: {
      data: insights,
      loading: insightsLoading,
      error: insightsError
    }
  }));
}
var DATASET_SECONDARY = "\nquery ($datasetPredicate: Predicate, $imagePredicate: Predicate, $coordinatePredicate: Predicate, $taxonPredicate: Predicate, $yearPredicate: Predicate, $eventPredicate: Predicate){\n  unfiltered: occurrenceSearch(predicate: $datasetPredicate) {\n    cardinality {\n      eventId\n    }\n    facet {\n      dwcaExtension {\n        key\n        count\n      }\n    }\n  }\n  images: occurrenceSearch(predicate: $imagePredicate) {\n    documents(size: 10) {\n      total\n      results {\n        key\n        stillImages {\n          identifier\n        }\n      }\n    }\n  }\n  withCoordinates: occurrenceSearch(predicate: $coordinatePredicate) {\n    documents(size: 10) {\n      total\n    }\n  }\n  withTaxonMatch: occurrenceSearch(predicate: $taxonPredicate) {\n    documents(size: 10) {\n      total\n    }\n  }\n  withYear: occurrenceSearch(predicate: $yearPredicate) {\n    documents(size: 10) {\n      total\n    }\n  }\n  withEventId: occurrenceSearch(predicate: $eventPredicate) {\n    documents(size: 10) {\n      total\n    }\n  }\n}\n";
var DATASET = "\nquery dataset($key: ID!, $predicate: Predicate, $sitePredicate: Predicate){\n  occurrenceSearch(predicate: $predicate) {\n    documents(size: 0) {\n      total\n    }\n  }\n  siteOccurrences: occurrenceSearch(predicate: $sitePredicate) {\n    documents(size: 0) {\n      total\n    }\n  }\n  literatureSearch(gbifDatasetKey: [$key]) {\n    documents {\n      count\n    }\n  }\n  taxonSearch(datasetKey: [$key], origin: [SOURCE], status: [ACCEPTED]){\n    count\n  }\n  dataset(key: $key) {\n    key\n    type\n    title\n    created\n    modified\n    pubDate\n    description\n    purpose\n    temporalCoverages\n    logoUrl\n    publishingOrganizationKey\n    publishingOrganizationTitle\n    homepage\n    additionalInfo\n    installation {\n      key\n      title\n      organization {\n        key\n        title\n      }\n    }\n    volatileContributors {\n      key\n      firstName\n      lastName\n      position\n      organization\n      address\n      userId\n      email\n      phone\n      type\n      _highlighted\n      roles\n    }\n    contactsCitation {\n      key\n      abbreviatedName\n      firstName\n      lastName\n      userId\n      roles\n    }\n    geographicCoverages {\n      description\n      boundingBox {\n        minLatitude\n        maxLatitude\n        minLongitude\n        maxLongitude\n        globalCoverage\n      }\n    }\n    taxonomicCoverages {\n      description\n      coverages {\n        scientificName\n        commonName\n        rank {\n          interpreted\n        }\n      }\n    }\n    bibliographicCitations {\n      identifier\n      text\n    }\n    samplingDescription {\n      studyExtent\n      sampling\n      qualityControl\n      methodSteps\n    }\n    dataDescriptions {\n      charset\n      name\n      format\n      formatVersion\n      url\n    }\n    citation {\n      text\n    }\n    license\n    project {\n      title\n      abstract\n      studyAreaDescription\n      designDescription\n      funding\n      contacts {\n        firstName\n        lastName\n\n        organization\n        position\n        roles\n        type\n\n        address\n        city\n        postalCode\n        province\n        country\n        \n        homepage\n        email\n        phone\n        userId\n      }\n      identifier\n    }\n    endpoints {\n      key\n      type\n      url\n    }\n    identifiers {\n      key\n      type\n      identifier\n    }\n    doi\n    machineTags {\n      namespace\n    }\n    gridded {\n      percent\n    }\n  }\n}\n";

var _excluded = ["siteConfig"];

function Wrap(_ref) {
  var siteConfig = _ref.siteConfig,
      props = _objectWithoutProperties__default["default"](_ref, _excluded);

  return react.jsx(StandaloneWrapper, {
    siteConfig: siteConfig
  }, react.jsx(Standalone, props));
}

function Standalone(props) {
  var routeContext = React.useContext(RouteContext);
  var path = routeContext.datasetKey.route;
  return react.jsx(reactRouterDom.Switch, null, react.jsx(reactRouterDom.Route, {
    path: path,
    render: function render(routeProps) {
      return react.jsx(Dataset, _extends__default["default"]({
        id: routeProps.match.params.key
      }, props, routeProps));
    }
  }));
}

exports.Accordion = Accordion;
exports.AltmetricDonut = AltmetricDonut;
exports.Autocomplete = Autocomplete;
exports.Button = Button;
exports.ButtonGroup = ButtonGroup;
exports.Checkbox = Checkbox;
exports.Classification = Classification;
exports.Col = Col;
exports.Collection = Standalone$2;
exports.CollectionSearch = Wrap$5;
exports.ContactList = ContactList;
exports.DataHeader = DataHeader;
exports.DataTable = DataTable;
exports.Dataset = Wrap;
exports.DatasetKeyLink = DatasetKeyLink;
exports.DatasetSearch = Wrap$2;
exports.DetailsDrawer = DetailsDrawer;
exports.Doi = Doi;
exports.Eyebrow = Eyebrow;
exports.FilterButton = FilterButton;
exports.GadmClassification = GadmClassification;
exports.Gallery = Gallery;
exports.GalleryCaption = GalleryCaption;
exports.GalleryTile = GalleryTile;
exports.GalleryTileSkeleton = GalleryTileSkeleton;
exports.GalleryTiles = GalleryTiles;
exports.HyperText = HyperText;
exports.IconFeatures = IconFeatures;
exports.IdentifierBadge = IdentifierBadge;
exports.Image = Image$1;
exports.Input = Input;
exports.Institution = Standalone$1;
exports.InstitutionSearch = Wrap$4;
exports.JazzIcon = JazzIcon;
exports.LicenseTag = LicenseTag;
exports.LiteratureSearch = Wrap$3;
exports.MajorRanks = MajorRanks;
exports.Menu = Menu;
exports.MenuAction = MenuAction;
exports.MenuToggle = MenuToggle;
exports.Message = Message;
exports.NavBar = NavBar;
exports.NavItem = NavItem;
exports.OccurrenceMap = OccurrenceMap;
exports.OccurrenceSearch = Wrap$6;
exports.Popover = Popover$9;
exports.Progress = Progress;
exports.Properties = Properties;
exports.Prose = Prose;
exports.PublisherKeyLink = PublisherKeyLink;
exports.PublisherSearch = Wrap$1;
exports.Radio = Radio;
exports.ResourceLink = ResourceLink;
exports.ResourceSearchLink = ResourceSearchLink;
exports.Root = Root;
exports.Row = Row;
exports.Skeleton = Skeleton;
exports.StripeLoader = StripeLoader;
exports.Switch = Switch;
exports.TBody = TBody;
exports.Tabs = Tabs;
exports.Tag = Tag;
exports.Tags = Tags;
exports.Td = Td;
exports.Test = Test;
exports.Th = Th;
exports.Toc = Toc;
exports.Tooltip = Tooltip;
exports.ZoomableImage = ZoomableImage;
exports.themeBuilder = themeBuilder;
exports.useToc = useToc;
